
TCS34725_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008790  08008790  00020e7c  2**0
                  CONTENTS
  4 .ARM          00000008  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008798  08008798  00020e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e7c  20000000  080087a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000e7c  0800961c  00020e7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  0800961c  00021898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020e7c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020eac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfb7  00000000  00000000  00020eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210f  00000000  00000000  0002dea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000885  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017214  00000000  00000000  00031335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec2e  00000000  00000000  00048549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a3fa  00000000  00000000  00057177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c58  00000000  00000000  000e1574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e51cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000e7c 	.word	0x20000e7c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008434 	.word	0x08008434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000e80 	.word	0x20000e80
 80001dc:	08008434 	.word	0x08008434

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <I2C_Write8BIT>:
extern I2C_HandleTypeDef hi2c1;


//Funkcja ustawiająca wartość rejestru 8-bitowego
void I2C_Write8BIT (uint8_t reg, uint32_t value)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  uint8_t pkt[2];
  pkt[0] = (TCS34725_COMMAND_BIT | reg);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	733b      	strb	r3, [r7, #12]
  pkt[1] = (value & 0xFF);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, pkt, 2, HAL_MAX_DELAY);
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	2152      	movs	r1, #82	; 0x52
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <I2C_Write8BIT+0x38>)
 8000f20:	f001 fdf8 	bl	8002b14 <HAL_I2C_Master_Transmit>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200016a4 	.word	0x200016a4

08000f30 <I2C_Read16BIT>:
	return pkt;
}


//Funkcja odczytująca dwa rejestry 8-bitowe do jednej zmiennej 16-bitowej
uint16_t I2C_Read16BIT(uint8_t reg) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	uint16_t ret;
	uint8_t data[2];

	data[0] = (TCS34725_COMMAND_BIT | reg);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, data, 1, HAL_MAX_DELAY);
 8000f44:	f107 020c 	add.w	r2, r7, #12
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	2152      	movs	r1, #82	; 0x52
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <I2C_Read16BIT+0x5c>)
 8000f54:	f001 fdde 	bl	8002b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000f58:	f107 020c 	add.w	r2, r7, #12
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	2152      	movs	r1, #82	; 0x52
 8000f66:	4809      	ldr	r0, [pc, #36]	; (8000f8c <I2C_Read16BIT+0x5c>)
 8000f68:	f001 fed2 	bl	8002d10 <HAL_I2C_Master_Receive>

	ret = (uint16_t) data[1];
 8000f6c:	7b7b      	ldrb	r3, [r7, #13]
 8000f6e:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	81fb      	strh	r3, [r7, #14]
	ret |= (uint16_t) data[0];
 8000f76:	7b3b      	ldrb	r3, [r7, #12]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	81fb      	strh	r3, [r7, #14]
	return ret;
 8000f80:	89fb      	ldrh	r3, [r7, #14]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200016a4 	.word	0x200016a4

08000f90 <I2C_GetColor>:


//Funkcja służąca do pobrania koloru o danym adresie
uint16_t I2C_GetColor(uint8_t reg){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	uint16_t ret=-1;
 8000f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9e:	81fb      	strh	r3, [r7, #14]
	uint32_t clear = I2C_Read16BIT(0x14);
 8000fa0:	2014      	movs	r0, #20
 8000fa2:	f7ff ffc5 	bl	8000f30 <I2C_Read16BIT>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60bb      	str	r3, [r7, #8]
	switch (reg){
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	3b14      	subs	r3, #20
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d837      	bhi.n	8001022 <I2C_GetColor+0x92>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <I2C_GetColor+0x28>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	0800101d 	.word	0x0800101d
 8000fbc:	08001023 	.word	0x08001023
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	08001023 	.word	0x08001023
 8000fc8:	08000fd5 	.word	0x08000fd5
 8000fcc:	08001023 	.word	0x08001023
 8000fd0:	08000fd5 	.word	0x08000fd5
		case 0x16:
		case 0x18:
		case 0x1A:
			ret=I2C_Read16BIT(reg);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffaa 	bl	8000f30 <I2C_Read16BIT>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	81fb      	strh	r3, [r7, #14]
			ret = (float)ret / clear * 255.0;
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ff8:	ee16 0a90 	vmov	r0, s13
 8000ffc:	f7ff faac 	bl	8000558 <__aeabi_f2d>
 8001000:	a30b      	add	r3, pc, #44	; (adr r3, 8001030 <I2C_GetColor+0xa0>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff faff 	bl	8000608 <__aeabi_dmul>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdd1 	bl	8000bb8 <__aeabi_d2uiz>
 8001016:	4603      	mov	r3, r0
 8001018:	81fb      	strh	r3, [r7, #14]
		break;
 800101a:	e002      	b.n	8001022 <I2C_GetColor+0x92>

		case 0x14:
			ret=clear;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	81fb      	strh	r3, [r7, #14]
		break;
 8001020:	bf00      	nop

	}
	return ret;
 8001022:	89fb      	ldrh	r3, [r7, #14]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	f3af 8000 	nop.w
 8001030:	00000000 	.word	0x00000000
 8001034:	406fe000 	.word	0x406fe000

08001038 <USART_start>:
__IO int USART_TX_Busy=0;
__IO int USART_RX_Empty=0;
__IO int USART_RX_Busy=0;


void USART_start(){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 800103c:	2201      	movs	r2, #1
 800103e:	4903      	ldr	r1, [pc, #12]	; (800104c <USART_start+0x14>)
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <USART_start+0x18>)
 8001042:	f004 fd95 	bl	8005b70 <HAL_UART_Receive_IT>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20001480 	.word	0x20001480
 8001050:	200016f8 	.word	0x200016f8

08001054 <BX_haveData>:

uint8_t BX_haveData(){
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	if(USART_RX_Empty==USART_RX_Busy)
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <BX_haveData+0x20>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <BX_haveData+0x24>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d101      	bne.n	8001068 <BX_haveData+0x14>
		return 0;
 8001064:	2300      	movs	r3, #0
 8001066:	e000      	b.n	800106a <BX_haveData+0x16>
	else return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20001590 	.word	0x20001590
 8001078:	20001594 	.word	0x20001594

0800107c <USART_getchar>:

//Funkcja pobierająca znak z buforu kołowego
uint8_t USART_getchar(){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
uint8_t tmp;
	if(BX_haveData()){
 8001082:	f7ff ffe7 	bl	8001054 <BX_haveData>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <USART_getchar+0x38>
		 tmp=USART_RxBuf[USART_RX_Busy];
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <USART_getchar+0x44>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <USART_getchar+0x48>)
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	71fb      	strb	r3, [r7, #7]
		 USART_RX_Busy++;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <USART_getchar+0x44>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <USART_getchar+0x44>)
 800109e:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Busy >= MAX_FRAME_SIZE)USART_RX_Busy=0;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <USART_getchar+0x44>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010a8:	dd02      	ble.n	80010b0 <USART_getchar+0x34>
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <USART_getchar+0x44>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
		 return tmp;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	e000      	b.n	80010b6 <USART_getchar+0x3a>
	}else return -1;
 80010b4:	23ff      	movs	r3, #255	; 0xff
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20001594 	.word	0x20001594
 80010c4:	20001480 	.word	0x20001480

080010c8 <CALCULATE_CRC>:

uint8_t CALCULATE_CRC(char *data, uint16_t length) {
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
    const uint8_t WIELOMIAN = 0x9B;
 80010d4:	239b      	movs	r3, #155	; 0x9b
 80010d6:	73fb      	strb	r3, [r7, #15]
    uint8_t MY_CRC = 0xFF;
 80010d8:	23ff      	movs	r3, #255	; 0xff
 80010da:	75fb      	strb	r3, [r7, #23]

    for (uint16_t i = 0; i < length; ++i) {
 80010dc:	2300      	movs	r3, #0
 80010de:	82bb      	strh	r3, [r7, #20]
 80010e0:	e022      	b.n	8001128 <CALCULATE_CRC+0x60>
    	MY_CRC ^= data[i];
 80010e2:	8abb      	ldrh	r3, [r7, #20]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	4053      	eors	r3, r2
 80010ee:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	e012      	b.n	800111c <CALCULATE_CRC+0x54>
            if (MY_CRC & 0x80)
 80010f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da08      	bge.n	8001110 <CALCULATE_CRC+0x48>
            	MY_CRC = (MY_CRC << 1) ^ WIELOMIAN;
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	b25a      	sxtb	r2, r3
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4053      	eors	r3, r2
 800110a:	b25b      	sxtb	r3, r3
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	e002      	b.n	8001116 <CALCULATE_CRC+0x4e>
            else
            	MY_CRC <<= 1;
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3301      	adds	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	2b07      	cmp	r3, #7
 8001120:	dde9      	ble.n	80010f6 <CALCULATE_CRC+0x2e>
    for (uint16_t i = 0; i < length; ++i) {
 8001122:	8abb      	ldrh	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	82bb      	strh	r3, [r7, #20]
 8001128:	8aba      	ldrh	r2, [r7, #20]
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3d8      	bcc.n	80010e2 <CALCULATE_CRC+0x1a>
        }
    }
    return MY_CRC;
 8001130:	7dfb      	ldrb	r3, [r7, #23]
}
 8001132:	4618      	mov	r0, r3
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <USART_fsend>:

void USART_fsend(char* format,...){ // Funkcja odpowiedzialna za przesyłanie tekstu do komputera
 8001140:	b40f      	push	{r0, r1, r2, r3}
 8001142:	b580      	push	{r7, lr}
 8001144:	b0ec      	sub	sp, #432	; 0x1b0
 8001146:	af04      	add	r7, sp, #16
	char tmp_rs[128];
	char FRAME[MAX_FRAME_SIZE];
	__IO int idx;
	va_list arglist; // Deklaracja listy argumentów
	va_start(arglist,format);
 8001148:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 800114c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001150:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001154:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_rs,format,arglist); //Wpisanie do bufora tmp_rs sformatowanego tekstu
 8001156:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800115a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800115e:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8001168:	f005 fdee 	bl	8006d48 <vsiprintf>
	va_end(arglist); // Koniec przetwarzania zmienych argumentow
	idx=USART_TX_Empty; // Przypisanie do idx wartości wskaźnika
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <USART_fsend+0x17c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001174:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001178:	601a      	str	r2, [r3, #0]

	uint8_t CHECKSUM=CALCULATE_CRC(tmp_rs, strlen(tmp_rs));
 800117a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f82e 	bl	80001e0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff9a 	bl	80010c8 <CALCULATE_CRC>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	sprintf(FRAME,"%c%s%02x%c%c%c",STX,tmp_rs,CHECKSUM,ETB,'\n','\r');
 800119a:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800119e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80011a2:	f107 0010 	add.w	r0, r7, #16
 80011a6:	210d      	movs	r1, #13
 80011a8:	9103      	str	r1, [sp, #12]
 80011aa:	210a      	movs	r1, #10
 80011ac:	9102      	str	r1, [sp, #8]
 80011ae:	2117      	movs	r1, #23
 80011b0:	9101      	str	r1, [sp, #4]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	4613      	mov	r3, r2
 80011b6:	2202      	movs	r2, #2
 80011b8:	4941      	ldr	r1, [pc, #260]	; (80012c0 <USART_fsend+0x180>)
 80011ba:	f005 fd4b 	bl	8006c54 <siprintf>

	for(int i=0;i<strlen(FRAME);i++){
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011c4:	e02c      	b.n	8001220 <USART_fsend+0xe0>
		USART_TxBuf[idx]=FRAME[i]; //Przypisujemy do bufora znaki z tmp_rs
 80011c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80011d4:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 80011d8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011dc:	440a      	add	r2, r1
 80011de:	7811      	ldrb	r1, [r2, #0]
 80011e0:	4a38      	ldr	r2, [pc, #224]	; (80012c4 <USART_fsend+0x184>)
 80011e2:	54d1      	strb	r1, [r2, r3]
		idx++; // Zwiększamy wskaźnik
 80011e4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011e8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80011f8:	601a      	str	r2, [r3, #0]
		if(idx >= USART_TXBUF_LEN)idx=0; // Jeżeli datarlśmy do końca bufora to zawijamy
 80011fa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001208:	db05      	blt.n	8001216 <USART_fsend+0xd6>
 800120a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800120e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
	for(int i=0;i<strlen(FRAME);i++){
 8001216:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800121a:	3301      	adds	r3, #1
 800121c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4618      	mov	r0, r3
 8001226:	f7fe ffdb 	bl	80001e0 <strlen>
 800122a:	4602      	mov	r2, r0
 800122c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001230:	429a      	cmp	r2, r3
 8001232:	d8c8      	bhi.n	80011c6 <USART_fsend+0x86>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
	}
	__disable_irq();
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <USART_fsend+0x17c>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <USART_fsend+0x188>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d12a      	bne.n	800129a <USART_fsend+0x15a>
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <USART_fsend+0x18c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	2b80      	cmp	r3, #128	; 0x80
 8001250:	d123      	bne.n	800129a <USART_fsend+0x15a>
		USART_TX_Empty=idx; //
 8001252:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001256:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <USART_fsend+0x17c>)
 800125e:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <USART_fsend+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <USART_fsend+0x184>)
 8001266:	5cd2      	ldrb	r2, [r2, r3]
 8001268:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800126c:	f2a3 1399 	subw	r3, r3, #409	; 0x199
 8001270:	701a      	strb	r2, [r3, #0]
		USART_TX_Busy++;
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <USART_fsend+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <USART_fsend+0x188>)
 800127a:	6013      	str	r3, [r2, #0]

		if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <USART_fsend+0x188>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001284:	db02      	blt.n	800128c <USART_fsend+0x14c>
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <USART_fsend+0x188>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 800128c:	1dfb      	adds	r3, r7, #7
 800128e:	2201      	movs	r2, #1
 8001290:	4619      	mov	r1, r3
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <USART_fsend+0x18c>)
 8001294:	f004 fc27 	bl	8005ae6 <HAL_UART_Transmit_IT>
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001298:	e006      	b.n	80012a8 <USART_fsend+0x168>
	}else{
		USART_TX_Empty=idx;
 800129a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800129e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a05      	ldr	r2, [pc, #20]	; (80012bc <USART_fsend+0x17c>)
 80012a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012a8:	b662      	cpsie	i
}
 80012aa:	bf00      	nop
	}
	__enable_irq();
}
 80012ac:	bf00      	nop
 80012ae:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012b8:	b004      	add	sp, #16
 80012ba:	4770      	bx	lr
 80012bc:	20001588 	.word	0x20001588
 80012c0:	0800844c 	.word	0x0800844c
 80012c4:	20000e98 	.word	0x20000e98
 80012c8:	2000158c 	.word	0x2000158c
 80012cc:	200016f8 	.word	0x200016f8

080012d0 <USART_GETFRAME>:

uint8_t USART_GETFRAME(char *buf){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	static char FRAME[MAX_FRAME_SIZE];
	static uint8_t FRAME_STATE=0;
	static uint16_t FRAME_IDX=0;
	uint8_t ZNAK=USART_getchar();
 80012d8:	f7ff fed0 	bl	800107c <USART_getchar>
 80012dc:	4603      	mov	r3, r0
 80012de:	74fb      	strb	r3, [r7, #19]


	switch(ZNAK){
 80012e0:	7cfb      	ldrb	r3, [r7, #19]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d002      	beq.n	80012ec <USART_GETFRAME+0x1c>
 80012e6:	2b17      	cmp	r3, #23
 80012e8:	d013      	beq.n	8001312 <USART_GETFRAME+0x42>
 80012ea:	e09e      	b.n	800142a <USART_GETFRAME+0x15a>
	case STX:
		FRAME_STATE=1; //DO POPRAWY
 80012ec:	4b68      	ldr	r3, [pc, #416]	; (8001490 <USART_GETFRAME+0x1c0>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		FRAME_IDX=0;
 80012f2:	4b68      	ldr	r3, [pc, #416]	; (8001494 <USART_GETFRAME+0x1c4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	801a      	strh	r2, [r3, #0]
		FRAME[FRAME_IDX]=ZNAK;
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <USART_GETFRAME+0x1c4>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4a66      	ldr	r2, [pc, #408]	; (8001498 <USART_GETFRAME+0x1c8>)
 8001300:	7cfb      	ldrb	r3, [r7, #19]
 8001302:	5453      	strb	r3, [r2, r1]
		FRAME_IDX++;
 8001304:	4b63      	ldr	r3, [pc, #396]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b61      	ldr	r3, [pc, #388]	; (8001494 <USART_GETFRAME+0x1c4>)
 800130e:	801a      	strh	r2, [r3, #0]
	break;
 8001310:	e0ab      	b.n	800146a <USART_GETFRAME+0x19a>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	case ETB:
		if(FRAME_STATE==1){
 8001312:	4b5f      	ldr	r3, [pc, #380]	; (8001490 <USART_GETFRAME+0x1c0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	f040 80a2 	bne.w	8001460 <USART_GETFRAME+0x190>
			FRAME_STATE=0;
 800131c:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <USART_GETFRAME+0x1c0>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
			FRAME[FRAME_IDX]=ZNAK;
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4a5b      	ldr	r2, [pc, #364]	; (8001498 <USART_GETFRAME+0x1c8>)
 800132a:	7cfb      	ldrb	r3, [r7, #19]
 800132c:	5453      	strb	r3, [r2, r1]
			FRAME_IDX++;
 800132e:	4b59      	ldr	r3, [pc, #356]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b57      	ldr	r3, [pc, #348]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001338:	801a      	strh	r2, [r3, #0]

			if (FRAME_IDX < 5){
 800133a:	4b56      	ldr	r3, [pc, #344]	; (8001494 <USART_GETFRAME+0x1c4>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	2b04      	cmp	r3, #4
 8001340:	f240 8090 	bls.w	8001464 <USART_GETFRAME+0x194>
				break;
			}

			if(FRAME[FRAME_IDX-4]==SEPARATOR){
 8001344:	4b53      	ldr	r3, [pc, #332]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	3b04      	subs	r3, #4
 800134a:	4a53      	ldr	r2, [pc, #332]	; (8001498 <USART_GETFRAME+0x1c8>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	2b3b      	cmp	r3, #59	; 0x3b
 8001350:	f040 8086 	bne.w	8001460 <USART_GETFRAME+0x190>
				char GIVEN_CRC[3]={""};
 8001354:	4b51      	ldr	r3, [pc, #324]	; (800149c <USART_GETFRAME+0x1cc>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	733b      	strb	r3, [r7, #12]
 800135a:	f107 030d 	add.w	r3, r7, #13
 800135e:	2200      	movs	r2, #0
 8001360:	801a      	strh	r2, [r3, #0]
				char CALC_CRC[3]={""};
 8001362:	4b4e      	ldr	r3, [pc, #312]	; (800149c <USART_GETFRAME+0x1cc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	723b      	strb	r3, [r7, #8]
 8001368:	f107 0309 	add.w	r3, r7, #9
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]

				sprintf(CALC_CRC,"%02x",CALCULATE_CRC(FRAME+1,FRAME_IDX-4));
 8001370:	4a4b      	ldr	r2, [pc, #300]	; (80014a0 <USART_GETFRAME+0x1d0>)
 8001372:	4b48      	ldr	r3, [pc, #288]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	3b04      	subs	r3, #4
 8001378:	b29b      	uxth	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff fea3 	bl	80010c8 <CALCULATE_CRC>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4946      	ldr	r1, [pc, #280]	; (80014a4 <USART_GETFRAME+0x1d4>)
 800138c:	4618      	mov	r0, r3
 800138e:	f005 fc61 	bl	8006c54 <siprintf>
				strncpy(GIVEN_CRC,FRAME+(FRAME_IDX-3),2);
 8001392:	4b40      	ldr	r3, [pc, #256]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	3b03      	subs	r3, #3
 8001398:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <USART_GETFRAME+0x1c8>)
 800139a:	1899      	adds	r1, r3, r2
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2202      	movs	r2, #2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fcf4 	bl	8006d90 <strncpy>

				if(tolower(GIVEN_CRC[0])==CALC_CRC[0] && tolower(GIVEN_CRC[1])==CALC_CRC[1]){
 80013a8:	7b3b      	ldrb	r3, [r7, #12]
 80013aa:	74bb      	strb	r3, [r7, #18]
 80013ac:	7cbb      	ldrb	r3, [r7, #18]
 80013ae:	3301      	adds	r3, #1
 80013b0:	4a3d      	ldr	r2, [pc, #244]	; (80014a8 <USART_GETFRAME+0x1d8>)
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d102      	bne.n	80013c4 <USART_GETFRAME+0xf4>
 80013be:	7cbb      	ldrb	r3, [r7, #18]
 80013c0:	3320      	adds	r3, #32
 80013c2:	e000      	b.n	80013c6 <USART_GETFRAME+0xf6>
 80013c4:	7cbb      	ldrb	r3, [r7, #18]
 80013c6:	7a3a      	ldrb	r2, [r7, #8]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d149      	bne.n	8001460 <USART_GETFRAME+0x190>
 80013cc:	7b7b      	ldrb	r3, [r7, #13]
 80013ce:	747b      	strb	r3, [r7, #17]
 80013d0:	7c7b      	ldrb	r3, [r7, #17]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <USART_GETFRAME+0x1d8>)
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d102      	bne.n	80013e8 <USART_GETFRAME+0x118>
 80013e2:	7c7b      	ldrb	r3, [r7, #17]
 80013e4:	3320      	adds	r3, #32
 80013e6:	e000      	b.n	80013ea <USART_GETFRAME+0x11a>
 80013e8:	7c7b      	ldrb	r3, [r7, #17]
 80013ea:	7a7a      	ldrb	r2, [r7, #9]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d137      	bne.n	8001460 <USART_GETFRAME+0x190>
					for(int i=1;i<FRAME_IDX-3;i++){
 80013f0:	2301      	movs	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00b      	b.n	800140e <USART_GETFRAME+0x13e>
						buf[i-1]=FRAME[i];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	4926      	ldr	r1, [pc, #152]	; (8001498 <USART_GETFRAME+0x1c8>)
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	440a      	add	r2, r1
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	701a      	strb	r2, [r3, #0]
					for(int i=1;i<FRAME_IDX-3;i++){
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	3301      	adds	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	3b03      	subs	r3, #3
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbed      	blt.n	80013f6 <USART_GETFRAME+0x126>
					}
					buf[FRAME_IDX-4]=0;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <USART_GETFRAME+0x1c4>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	3b04      	subs	r3, #4
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	break;
 8001428:	e01a      	b.n	8001460 <USART_GETFRAME+0x190>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	default:
	if(FRAME_STATE==1){
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <USART_GETFRAME+0x1c0>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d11a      	bne.n	8001468 <USART_GETFRAME+0x198>
		if (!(ZNAK > 0x21 && ZNAK < 0x7E)){
 8001432:	7cfb      	ldrb	r3, [r7, #19]
 8001434:	2b21      	cmp	r3, #33	; 0x21
 8001436:	d902      	bls.n	800143e <USART_GETFRAME+0x16e>
 8001438:	7cfb      	ldrb	r3, [r7, #19]
 800143a:	2b7d      	cmp	r3, #125	; 0x7d
 800143c:	d903      	bls.n	8001446 <USART_GETFRAME+0x176>
			FRAME_STATE = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <USART_GETFRAME+0x1c0>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
			break;
 8001444:	e011      	b.n	800146a <USART_GETFRAME+0x19a>
		}
		else{
			FRAME[FRAME_IDX] = ZNAK;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <USART_GETFRAME+0x1c8>)
 800144e:	7cfb      	ldrb	r3, [r7, #19]
 8001450:	5453      	strb	r3, [r2, r1]
			FRAME_IDX++;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <USART_GETFRAME+0x1c4>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <USART_GETFRAME+0x1c4>)
 800145c:	801a      	strh	r2, [r3, #0]
		}
	}
	break;
 800145e:	e003      	b.n	8001468 <USART_GETFRAME+0x198>
	break;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <USART_GETFRAME+0x19a>
				break;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <USART_GETFRAME+0x19a>
	break;
 8001468:	bf00      	nop
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	}
	if(FRAME_IDX>=MAX_FRAME_SIZE-4){
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <USART_GETFRAME+0x1c4>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001472:	d908      	bls.n	8001486 <USART_GETFRAME+0x1b6>
		USART_fsend("FRAME RANGE EXCEEDED;");
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <USART_GETFRAME+0x1dc>)
 8001476:	f7ff fe63 	bl	8001140 <USART_fsend>
		FRAME_IDX=0;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <USART_GETFRAME+0x1c4>)
 800147c:	2200      	movs	r2, #0
 800147e:	801a      	strh	r2, [r3, #0]
		FRAME_STATE=0;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <USART_GETFRAME+0x1c0>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
	}
	return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20001598 	.word	0x20001598
 8001494:	2000159a 	.word	0x2000159a
 8001498:	2000159c 	.word	0x2000159c
 800149c:	0800847c 	.word	0x0800847c
 80014a0:	2000159d 	.word	0x2000159d
 80014a4:	0800845c 	.word	0x0800845c
 80014a8:	080085ac 	.word	0x080085ac
 80014ac:	08008464 	.word	0x08008464

080014b0 <ParseCommand>:


//Funkcja odpowiedzialna za rozpoznawanie komend
void ParseCommand(char *buf){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	char * commBuff = strtok(buf,";");
 80014b8:	495d      	ldr	r1, [pc, #372]	; (8001630 <ParseCommand+0x180>)
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f005 fc7c 	bl	8006db8 <strtok>
 80014c0:	60f8      	str	r0, [r7, #12]
	while(commBuff!=NULL){
 80014c2:	e0ac      	b.n	800161e <ParseCommand+0x16e>
		if(strncmp(commBuff,"LIVE",4)==0){
 80014c4:	2204      	movs	r2, #4
 80014c6:	495b      	ldr	r1, [pc, #364]	; (8001634 <ParseCommand+0x184>)
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f005 fc4f 	bl	8006d6c <strncmp>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d103      	bne.n	80014dc <ParseCommand+0x2c>
			LIVE_TOGGLE=1;
 80014d4:	4b58      	ldr	r3, [pc, #352]	; (8001638 <ParseCommand+0x188>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e09b      	b.n	8001614 <ParseCommand+0x164>
		}
		else if(strncmp(commBuff,"STOP",4)==0){
 80014dc:	2204      	movs	r2, #4
 80014de:	4957      	ldr	r1, [pc, #348]	; (800163c <ParseCommand+0x18c>)
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f005 fc43 	bl	8006d6c <strncmp>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <ParseCommand+0x4a>
			LIVE_TOGGLE=0;
 80014ec:	4b52      	ldr	r3, [pc, #328]	; (8001638 <ParseCommand+0x188>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
			USART_fsend("STOPPED!;");
 80014f2:	4853      	ldr	r0, [pc, #332]	; (8001640 <ParseCommand+0x190>)
 80014f4:	f7ff fe24 	bl	8001140 <USART_fsend>
 80014f8:	e08c      	b.n	8001614 <ParseCommand+0x164>

		}
		else if (strncmp(commBuff, "SETINTERVAL[", 12) == 0 && buf[strlen(buf) - 1] == ']'){
 80014fa:	220c      	movs	r2, #12
 80014fc:	4951      	ldr	r1, [pc, #324]	; (8001644 <ParseCommand+0x194>)
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f005 fc34 	bl	8006d6c <strncmp>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d139      	bne.n	800157e <ParseCommand+0xce>
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7fe fe68 	bl	80001e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	3b01      	subs	r3, #1
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b5d      	cmp	r3, #93	; 0x5d
 800151c:	d12f      	bne.n	800157e <ParseCommand+0xce>
			if(atoi(buf + 12)<3){
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	330c      	adds	r3, #12
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fa44 	bl	80069b0 <atoi>
 8001528:	4603      	mov	r3, r0
 800152a:	2b02      	cmp	r3, #2
 800152c:	dc0a      	bgt.n	8001544 <ParseCommand+0x94>
				USART_fsend("GIVEN VALUE IS TOO LOW: %d ;", atoi(buf + 12));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	330c      	adds	r3, #12
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fa3c 	bl	80069b0 <atoi>
 8001538:	4603      	mov	r3, r0
 800153a:	4619      	mov	r1, r3
 800153c:	4842      	ldr	r0, [pc, #264]	; (8001648 <ParseCommand+0x198>)
 800153e:	f7ff fdff 	bl	8001140 <USART_fsend>
			if(atoi(buf + 12)<3){
 8001542:	e067      	b.n	8001614 <ParseCommand+0x164>
			}
			else if(atoi(buf + 12)>65535){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	330c      	adds	r3, #12
 8001548:	4618      	mov	r0, r3
 800154a:	f005 fa31 	bl	80069b0 <atoi>
 800154e:	4603      	mov	r3, r0
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	db03      	blt.n	800155e <ParseCommand+0xae>
				USART_fsend("INTERVAL LIMIT EXCEEDED;");
 8001556:	483d      	ldr	r0, [pc, #244]	; (800164c <ParseCommand+0x19c>)
 8001558:	f7ff fdf2 	bl	8001140 <USART_fsend>
			if(atoi(buf + 12)<3){
 800155c:	e05a      	b.n	8001614 <ParseCommand+0x164>
			}
			else{
				Delay = atoi(buf + 12);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	330c      	adds	r3, #12
 8001562:	4618      	mov	r0, r3
 8001564:	f005 fa24 	bl	80069b0 <atoi>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b38      	ldr	r3, [pc, #224]	; (8001650 <ParseCommand+0x1a0>)
 800156e:	801a      	strh	r2, [r3, #0]
				USART_fsend("INTERVAL SET TO %d MS;",Delay);
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <ParseCommand+0x1a0>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4837      	ldr	r0, [pc, #220]	; (8001654 <ParseCommand+0x1a4>)
 8001578:	f7ff fde2 	bl	8001140 <USART_fsend>
			if(atoi(buf + 12)<3){
 800157c:	e04a      	b.n	8001614 <ParseCommand+0x164>
				//I2C_RGBCTime(Delay);
			}
		}
		else if(strncmp(commBuff,"SHOWINT",7)==0){
 800157e:	2207      	movs	r2, #7
 8001580:	4935      	ldr	r1, [pc, #212]	; (8001658 <ParseCommand+0x1a8>)
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f005 fbf2 	bl	8006d6c <strncmp>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <ParseCommand+0xec>
			USART_fsend("INTERVAL= %dms",Delay);
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <ParseCommand+0x1a0>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	4831      	ldr	r0, [pc, #196]	; (800165c <ParseCommand+0x1ac>)
 8001596:	f7ff fdd3 	bl	8001140 <USART_fsend>
 800159a:	e03b      	b.n	8001614 <ParseCommand+0x164>
		}
		else if (strncmp(commBuff, "SHOWARCHIVAL[", 13) == 0 && buf[strlen(buf) - 1] == ']'){
 800159c:	220d      	movs	r2, #13
 800159e:	4930      	ldr	r1, [pc, #192]	; (8001660 <ParseCommand+0x1b0>)
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f005 fbe3 	bl	8006d6c <strncmp>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d130      	bne.n	800160e <ParseCommand+0x15e>
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7fe fe17 	bl	80001e0 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	3b01      	subs	r3, #1
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b5d      	cmp	r3, #93	; 0x5d
 80015be:	d126      	bne.n	800160e <ParseCommand+0x15e>
			uint16_t arg1 = atoi(commBuff+13);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	330d      	adds	r3, #13
 80015c4:	4618      	mov	r0, r3
 80015c6:	f005 f9f3 	bl	80069b0 <atoi>
 80015ca:	4603      	mov	r3, r0
 80015cc:	817b      	strh	r3, [r7, #10]
			uint16_t arg2 = atoi(commBuff+14+((int)log10(arg1)+1));
 80015ce:	897b      	ldrh	r3, [r7, #10]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff9f 	bl	8000514 <__aeabi_ui2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b10 	vmov	d0, r2, r3
 80015de:	f006 fc9b 	bl	8007f18 <log10>
 80015e2:	ec53 2b10 	vmov	r2, r3, d0
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fabd 	bl	8000b68 <__aeabi_d2iz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	330f      	adds	r3, #15
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 f9da 	bl	80069b0 <atoi>
 80015fc:	4603      	mov	r3, r0
 80015fe:	813b      	strh	r3, [r7, #8]
			ShowArchivalData(arg1,arg2);
 8001600:	893a      	ldrh	r2, [r7, #8]
 8001602:	897b      	ldrh	r3, [r7, #10]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f82e 	bl	8001668 <ShowArchivalData>
		else if (strncmp(commBuff, "SHOWARCHIVAL[", 13) == 0 && buf[strlen(buf) - 1] == ']'){
 800160c:	e002      	b.n	8001614 <ParseCommand+0x164>
		}
		else{
			USART_fsend("UNRECOGNIZED COMMAND!;");
 800160e:	4815      	ldr	r0, [pc, #84]	; (8001664 <ParseCommand+0x1b4>)
 8001610:	f7ff fd96 	bl	8001140 <USART_fsend>
		}
		commBuff = strtok( NULL,";");
 8001614:	4906      	ldr	r1, [pc, #24]	; (8001630 <ParseCommand+0x180>)
 8001616:	2000      	movs	r0, #0
 8001618:	f005 fbce 	bl	8006db8 <strtok>
 800161c:	60f8      	str	r0, [r7, #12]
	while(commBuff!=NULL){
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f47f af4f 	bne.w	80014c4 <ParseCommand+0x14>
	}
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	08008480 	.word	0x08008480
 8001634:	08008484 	.word	0x08008484
 8001638:	2000173c 	.word	0x2000173c
 800163c:	0800848c 	.word	0x0800848c
 8001640:	08008494 	.word	0x08008494
 8001644:	080084a0 	.word	0x080084a0
 8001648:	080084b0 	.word	0x080084b0
 800164c:	080084d0 	.word	0x080084d0
 8001650:	20000000 	.word	0x20000000
 8001654:	080084ec 	.word	0x080084ec
 8001658:	08008504 	.word	0x08008504
 800165c:	0800850c 	.word	0x0800850c
 8001660:	0800851c 	.word	0x0800851c
 8001664:	0800852c 	.word	0x0800852c

08001668 <ShowArchivalData>:


void ShowArchivalData(uint16_t x,uint16_t y){
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b087      	sub	sp, #28
 800166c:	af02      	add	r7, sp, #8
 800166e:	4603      	mov	r3, r0
 8001670:	460a      	mov	r2, r1
 8001672:	80fb      	strh	r3, [r7, #6]
 8001674:	4613      	mov	r3, r2
 8001676:	80bb      	strh	r3, [r7, #4]
	if((x > 0 && x <= 1200) && (y > 0 && y <= 1200)){
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d067      	beq.n	800174e <ShowArchivalData+0xe6>
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001684:	d863      	bhi.n	800174e <ShowArchivalData+0xe6>
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d060      	beq.n	800174e <ShowArchivalData+0xe6>
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001692:	d85c      	bhi.n	800174e <ShowArchivalData+0xe6>
		if(x>y){
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d92c      	bls.n	80016f6 <ShowArchivalData+0x8e>
			for(int i=x-1;i>=y-1;i--){
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	3b01      	subs	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e022      	b.n	80016ea <ShowArchivalData+0x82>
				USART_fsend("%d| \tR= %d\tG= %d\tB= %d;",i,ARCHIVED_DATA[i][0],ARCHIVED_DATA[i][1],ARCHIVED_DATA[i][2]);
 80016a4:	492e      	ldr	r1, [pc, #184]	; (8001760 <ShowArchivalData+0xf8>)
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	492a      	ldr	r1, [pc, #168]	; (8001760 <ShowArchivalData+0xf8>)
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	440b      	add	r3, r1
 80016c0:	3301      	adds	r3, #1
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461c      	mov	r4, r3
 80016c6:	4926      	ldr	r1, [pc, #152]	; (8001760 <ShowArchivalData+0xf8>)
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	3302      	adds	r3, #2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4623      	mov	r3, r4
 80016da:	4602      	mov	r2, r0
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	4821      	ldr	r0, [pc, #132]	; (8001764 <ShowArchivalData+0xfc>)
 80016e0:	f7ff fd2e 	bl	8001140 <USART_fsend>
			for(int i=x-1;i>=y-1;i--){
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	88bb      	ldrh	r3, [r7, #4]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dad7      	bge.n	80016a4 <ShowArchivalData+0x3c>
		if(x>y){
 80016f4:	e02f      	b.n	8001756 <ShowArchivalData+0xee>
			}
		}else{
			for(int i=x-1;i<=y-1;i++){
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	e022      	b.n	8001744 <ShowArchivalData+0xdc>
				USART_fsend("%d| \tR= %d\tG= %d\tB= %d;",i,ARCHIVED_DATA[i][0],ARCHIVED_DATA[i][1],ARCHIVED_DATA[i][2]);
 80016fe:	4918      	ldr	r1, [pc, #96]	; (8001760 <ShowArchivalData+0xf8>)
 8001700:	68ba      	ldr	r2, [r7, #8]
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	440b      	add	r3, r1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	4914      	ldr	r1, [pc, #80]	; (8001760 <ShowArchivalData+0xf8>)
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	440b      	add	r3, r1
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461c      	mov	r4, r3
 8001720:	490f      	ldr	r1, [pc, #60]	; (8001760 <ShowArchivalData+0xf8>)
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	440b      	add	r3, r1
 800172c:	3302      	adds	r3, #2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	4623      	mov	r3, r4
 8001734:	4602      	mov	r2, r0
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	480a      	ldr	r0, [pc, #40]	; (8001764 <ShowArchivalData+0xfc>)
 800173a:	f7ff fd01 	bl	8001140 <USART_fsend>
			for(int i=x-1;i<=y-1;i++){
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3301      	adds	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbd8      	blt.n	80016fe <ShowArchivalData+0x96>
		if(x>y){
 800174c:	e003      	b.n	8001756 <ShowArchivalData+0xee>
			}
		}
	}else{USART_fsend("WRONG PARAMETER!");}
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <ShowArchivalData+0x100>)
 8001750:	f7ff fcf6 	bl	8001140 <USART_fsend>
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}
 800175e:	bf00      	nop
 8001760:	20000004 	.word	0x20000004
 8001764:	08008544 	.word	0x08008544
 8001768:	0800855c 	.word	0x0800855c

0800176c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <HAL_UART_TxCpltCallback+0x58>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d11e      	bne.n	80017ba <HAL_UART_TxCpltCallback+0x4e>
	   if(USART_TX_Empty!=USART_TX_Busy){
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_UART_TxCpltCallback+0x5c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_UART_TxCpltCallback+0x60>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d018      	beq.n	80017ba <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_UART_TxCpltCallback+0x60>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_UART_TxCpltCallback+0x64>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	73fb      	strb	r3, [r7, #15]
		   USART_TX_Busy++;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_UART_TxCpltCallback+0x60>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_UART_TxCpltCallback+0x60>)
 800179a:	6013      	str	r3, [r2, #0]
		   if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_UART_TxCpltCallback+0x60>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 80017a4:	db02      	blt.n	80017ac <HAL_UART_TxCpltCallback+0x40>
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_UART_TxCpltCallback+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80017ac:	f107 030f 	add.w	r3, r7, #15
 80017b0:	2201      	movs	r2, #1
 80017b2:	4619      	mov	r1, r3
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <HAL_UART_TxCpltCallback+0x58>)
 80017b6:	f004 f996 	bl	8005ae6 <HAL_UART_Transmit_IT>
	   }
   }
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200016f8 	.word	0x200016f8
 80017c8:	20001588 	.word	0x20001588
 80017cc:	2000158c 	.word	0x2000158c
 80017d0:	20000e98 	.word	0x20000e98

080017d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_UART_RxCpltCallback+0x44>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d115      	bne.n	8001810 <HAL_UART_RxCpltCallback+0x3c>
		 USART_RX_Empty++;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_UART_RxCpltCallback+0x48>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <HAL_UART_RxCpltCallback+0x48>)
 80017ec:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Empty>=MAX_FRAME_SIZE)USART_RX_Empty=0;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_UART_RxCpltCallback+0x48>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017f6:	dd02      	ble.n	80017fe <HAL_UART_RxCpltCallback+0x2a>
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_UART_RxCpltCallback+0x48>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1);
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_UART_RxCpltCallback+0x48>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_UART_RxCpltCallback+0x4c>)
 8001804:	4413      	add	r3, r2
 8001806:	2201      	movs	r2, #1
 8001808:	4619      	mov	r1, r3
 800180a:	4803      	ldr	r0, [pc, #12]	; (8001818 <HAL_UART_RxCpltCallback+0x44>)
 800180c:	f004 f9b0 	bl	8005b70 <HAL_UART_Receive_IT>

	 }
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200016f8 	.word	0x200016f8
 800181c:	20001590 	.word	0x20001590
 8001820:	20001480 	.word	0x20001480

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ffc2 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <ADD_ARCHIVE_DATA.0>:

  USART_start();
  USART_fsend("Hello User!;");
  char FRAME[MAX_FRAME_SIZE]={""};

  void ADD_ARCHIVE_DATA(uint8_t r,uint8_t g,uint8_t b){
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	460b      	mov	r3, r1
 80018c8:	71bb      	strb	r3, [r7, #6]
 80018ca:	4613      	mov	r3, r2
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	f8c7 c000 	str.w	ip, [r7]
		  ARCHIVED_DATA[ARCHIVE_RS][0]=r;
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <ADD_ARCHIVE_DATA.0+0x78>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4918      	ldr	r1, [pc, #96]	; (8001938 <ADD_ARCHIVE_DATA.0+0x7c>)
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	440b      	add	r3, r1
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	701a      	strb	r2, [r3, #0]
		  ARCHIVED_DATA[ARCHIVE_RS][1]=g;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <ADD_ARCHIVE_DATA.0+0x78>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4913      	ldr	r1, [pc, #76]	; (8001938 <ADD_ARCHIVE_DATA.0+0x7c>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	3301      	adds	r3, #1
 80018f4:	79ba      	ldrb	r2, [r7, #6]
 80018f6:	701a      	strb	r2, [r3, #0]
		  ARCHIVED_DATA[ARCHIVE_RS][2]=b;
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <ADD_ARCHIVE_DATA.0+0x78>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <ADD_ARCHIVE_DATA.0+0x7c>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	440b      	add	r3, r1
 8001906:	3302      	adds	r3, #2
 8001908:	797a      	ldrb	r2, [r7, #5]
 800190a:	701a      	strb	r2, [r3, #0]
		  ARCHIVE_RS++;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <ADD_ARCHIVE_DATA.0+0x78>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <ADD_ARCHIVE_DATA.0+0x78>)
 8001914:	6013      	str	r3, [r2, #0]
		  if(ARCHIVE_RS >= 1200) ARCHIVE_RS=0;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <ADD_ARCHIVE_DATA.0+0x78>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800191e:	db02      	blt.n	8001926 <ADD_ARCHIVE_DATA.0+0x6a>
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <ADD_ARCHIVE_DATA.0+0x78>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
  }
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20001740 	.word	0x20001740
 8001938:	20000004 	.word	0x20000004

0800193c <main>:
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b0c4      	sub	sp, #272	; 0x110
 8001940:	af00      	add	r7, sp, #0
int main(void)
 8001942:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001946:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  HAL_Init();
 800194a:	f000 fbdd 	bl	8002108 <HAL_Init>
  SysTick_Config(84000000/1000);
 800194e:	483f      	ldr	r0, [pc, #252]	; (8001a4c <main+0x110>)
 8001950:	f7ff ff92 	bl	8001878 <SysTick_Config>
  SystemClock_Config();
 8001954:	f000 f886 	bl	8001a64 <SystemClock_Config>
  MX_GPIO_Init();
 8001958:	f000 f948 	bl	8001bec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800195c:	f000 f91c 	bl	8001b98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001960:	f000 f8ec 	bl	8001b3c <MX_I2C1_Init>
  HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET); //Wyłączenie diody led
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196a:	4839      	ldr	r0, [pc, #228]	; (8001a50 <main+0x114>)
 800196c:	f000 ff74 	bl	8002858 <HAL_GPIO_WritePin>
  I2C_Write8BIT(ATIME_REG,0); //Ustawienie czasu RGBC
 8001970:	2100      	movs	r1, #0
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fabe 	bl	8000ef4 <I2C_Write8BIT>
  I2C_Write8BIT(CONTROL_REG,0); //Ustawienie Gainu
 8001978:	2100      	movs	r1, #0
 800197a:	200f      	movs	r0, #15
 800197c:	f7ff faba 	bl	8000ef4 <I2C_Write8BIT>
  I2C_Write8BIT(ENABLE_REG,3); //Włączenie czujnika
 8001980:	2103      	movs	r1, #3
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fab6 	bl	8000ef4 <I2C_Write8BIT>
  USART_start();
 8001988:	f7ff fb56 	bl	8001038 <USART_start>
  USART_fsend("Hello User!;");
 800198c:	4831      	ldr	r0, [pc, #196]	; (8001a54 <main+0x118>)
 800198e:	f7ff fbd7 	bl	8001140 <USART_fsend>
  char FRAME[MAX_FRAME_SIZE]={""};
 8001992:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001996:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	3304      	adds	r3, #4
 80019a0:	f240 1201 	movw	r2, #257	; 0x101
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 f9d8 	bl	8006d5c <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  if(BX_haveData()==1)
 80019ac:	f7ff fb52 	bl	8001054 <BX_haveData>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d103      	bne.n	80019be <main+0x82>
		  USART_GETFRAME(FRAME);
 80019b6:	463b      	mov	r3, r7
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fc89 	bl	80012d0 <USART_GETFRAME>

	  if(strlen(FRAME)!=0){
 80019be:	463b      	mov	r3, r7
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <main+0x9e>
		  ParseCommand(FRAME);
 80019c6:	463b      	mov	r3, r7
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fd71 	bl	80014b0 <ParseCommand>
		  FRAME[0]=0;
 80019ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	  }
	  if(LIVE_TOGGLE==1 && HAL_GetTick() % Delay == 0){
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <main+0x11c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d1e4      	bne.n	80019ac <main+0x70>
 80019e2:	f000 fbf7 	bl	80021d4 <HAL_GetTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <main+0x120>)
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80019f0:	fb01 f202 	mul.w	r2, r1, r2
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1d8      	bne.n	80019ac <main+0x70>
		  uint8_t r=I2C_GetColor(RED);
 80019fa:	2016      	movs	r0, #22
 80019fc:	f7ff fac8 	bl	8000f90 <I2C_GetColor>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

		  uint8_t g=I2C_GetColor(GREEN);
 8001a06:	2018      	movs	r0, #24
 8001a08:	f7ff fac2 	bl	8000f90 <I2C_GetColor>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
		  uint8_t b=I2C_GetColor(BLUE);
 8001a12:	201a      	movs	r0, #26
 8001a14:	f7ff fabc 	bl	8000f90 <I2C_GetColor>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

		  ADD_ARCHIVE_DATA(r,g,b);
 8001a1e:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8001a22:	f897 110e 	ldrb.w	r1, [r7, #270]	; 0x10e
 8001a26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001a2e:	4684      	mov	ip, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff43 	bl	80018bc <ADD_ARCHIVE_DATA.0>
		  USART_fsend("R= %d\tG= %d\tB= %d;",r,g,b);
 8001a36:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8001a3a:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 8001a3e:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <main+0x124>)
 8001a44:	f7ff fb7c 	bl	8001140 <USART_fsend>
  if(BX_haveData()==1)
 8001a48:	e7b0      	b.n	80019ac <main+0x70>
 8001a4a:	bf00      	nop
 8001a4c:	00014820 	.word	0x00014820
 8001a50:	40020400 	.word	0x40020400
 8001a54:	08008570 	.word	0x08008570
 8001a58:	2000173c 	.word	0x2000173c
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	08008580 	.word	0x08008580

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b094      	sub	sp, #80	; 0x50
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	2230      	movs	r2, #48	; 0x30
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 f972 	bl	8006d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <SystemClock_Config+0xd0>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <SystemClock_Config+0xd0>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <SystemClock_Config+0xd0>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <SystemClock_Config+0xd4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ab0:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <SystemClock_Config+0xd4>)
 8001ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <SystemClock_Config+0xd4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001acc:	2310      	movs	r3, #16
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001adc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fb14 	bl	800511c <HAL_RCC_OscConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001afa:	f000 f8e5 	bl	8001cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afe:	230f      	movs	r3, #15
 8001b00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b02:	2302      	movs	r3, #2
 8001b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fd76 	bl	800560c <HAL_RCC_ClockConfig>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b26:	f000 f8cf 	bl	8001cc8 <Error_Handler>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3750      	adds	r7, #80	; 0x50
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40007000 	.word	0x40007000

08001b3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <MX_I2C1_Init+0x54>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_I2C1_Init+0x58>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_I2C1_Init+0x50>)
 8001b7a:	f000 fe87 	bl	800288c <HAL_I2C_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b84:	f000 f8a0 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200016a4 	.word	0x200016a4
 8001b90:	40005400 	.word	0x40005400
 8001b94:	000186a0 	.word	0x000186a0

08001b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_USART2_UART_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	f003 ff3c 	bl	8005a4c <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bda:	f000 f875 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200016f8 	.word	0x200016f8
 8001be8:	40004400 	.word	0x40004400

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <MX_GPIO_Init+0xd4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c78:	4812      	ldr	r0, [pc, #72]	; (8001cc4 <MX_GPIO_Init+0xd8>)
 8001c7a:	f000 fded 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TCSLED_Pin */
  GPIO_InitStruct.Pin = TCSLED_Pin;
 8001c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TCSLED_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <MX_GPIO_Init+0xd8>)
 8001c98:	f000 fc5a 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_GPIO_Init+0xd8>)
 8001cb2:	f000 fc4d 	bl	8002550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <Error_Handler+0x8>
	...

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_MspInit+0x4c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_MspInit+0x4c>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x4c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_MspInit+0x4c>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d12:	2007      	movs	r0, #7
 8001d14:	f000 fb3a 	bl	800238c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_I2C_MspInit+0xa4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d13b      	bne.n	8001dbe <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <HAL_I2C_MspInit+0xa8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <HAL_I2C_MspInit+0xa8>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_I2C_MspInit+0xa8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d62:	23c0      	movs	r3, #192	; 0xc0
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d66:	2312      	movs	r3, #18
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d72:	2304      	movs	r3, #4
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <HAL_I2C_MspInit+0xac>)
 8001d7e:	f000 fbe7 	bl	8002550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_I2C_MspInit+0xa8>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <HAL_I2C_MspInit+0xa8>)
 8001d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_I2C_MspInit+0xa8>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	201f      	movs	r0, #31
 8001da4:	f000 fafd 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001da8:	201f      	movs	r0, #31
 8001daa:	f000 fb16 	bl	80023da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2020      	movs	r0, #32
 8001db4:	f000 faf5 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001db8:	2020      	movs	r0, #32
 8001dba:	f000 fb0e 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_UART_MspInit+0x94>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d133      	bne.n	8001e5e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_UART_MspInit+0x98>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_UART_MspInit+0x98>)
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_UART_MspInit+0x98>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_UART_MspInit+0x98>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <HAL_UART_MspInit+0x98>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_UART_MspInit+0x98>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e2e:	230c      	movs	r3, #12
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3e:	2307      	movs	r3, #7
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <HAL_UART_MspInit+0x9c>)
 8001e4a:	f000 fb81 	bl	8002550 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2026      	movs	r0, #38	; 0x26
 8001e54:	f000 faa5 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e58:	2026      	movs	r0, #38	; 0x26
 8001e5a:	f000 fabe 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40004400 	.word	0x40004400
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f974 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <I2C1_EV_IRQHandler+0x10>)
 8001ece:	f001 f945 	bl	800315c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200016a4 	.word	0x200016a4

08001edc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <I2C1_ER_IRQHandler+0x10>)
 8001ee2:	f001 fa8e 	bl	8003402 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200016a4 	.word	0x200016a4

08001ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <USART2_IRQHandler+0x10>)
 8001ef6:	f003 fe6b 	bl	8005bd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200016f8 	.word	0x200016f8

08001f04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return 1;
 8001f08:	2301      	movs	r3, #1
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_kill>:

int _kill(int pid, int sig)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f1e:	f004 ffed 	bl	8006efc <__errno>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2216      	movs	r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
  return -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_exit>:

void _exit (int status)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe7 	bl	8001f14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f46:	e7fe      	b.n	8001f46 <_exit+0x12>

08001f48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5a:	f3af 8000 	nop.w
 8001f5e:	4601      	mov	r1, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf0      	blt.n	8001f5a <_read+0x12>
  }

  return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e009      	b.n	8001fa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf1      	blt.n	8001f94 <_write+0x12>
  }
  return len;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_close>:

int _close(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_isatty>:

int _isatty(int file)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <_sbrk+0x5c>)
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <_sbrk+0x60>)
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <_sbrk+0x64>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <_sbrk+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	d207      	bcs.n	8002064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002054:	f004 ff52 	bl	8006efc <__errno>
 8002058:	4603      	mov	r3, r0
 800205a:	220c      	movs	r2, #12
 800205c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	e009      	b.n	8002078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <_sbrk+0x64>)
 8002074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20018000 	.word	0x20018000
 8002084:	00000400 	.word	0x00000400
 8002088:	20001744 	.word	0x20001744
 800208c:	20001898 	.word	0x20001898

08002090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <SystemInit+0x20>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <SystemInit+0x20>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ba:	490e      	ldr	r1, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020bc:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d0:	4c0b      	ldr	r4, [pc, #44]	; (8002100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020de:	f7ff ffd7 	bl	8002090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f004 ff11 	bl	8006f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff fc29 	bl	800193c <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	20000e7c 	.word	0x20000e7c
  ldr r2, =_sidata
 80020f8:	080087a0 	.word	0x080087a0
  ldr r2, =_sbss
 80020fc:	20000e7c 	.word	0x20000e7c
  ldr r4, =_ebss
 8002100:	20001898 	.word	0x20001898

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_Init+0x40>)
 8002112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_Init+0x40>)
 800211e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_Init+0x40>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f000 f92b 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	2000      	movs	r0, #0
 8002138:	f000 f808 	bl	800214c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fdca 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_InitTick+0x54>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x58>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002162:	fbb3 f3f1 	udiv	r3, r3, r1
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f943 	bl	80023f6 <HAL_SYSTICK_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d80a      	bhi.n	8002196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f000 f90b 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <HAL_InitTick+0x5c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000e14 	.word	0x20000e14
 80021a4:	20000e1c 	.word	0x20000e1c
 80021a8:	20000e18 	.word	0x20000e18

080021ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x20>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x24>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_IncTick+0x24>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000e1c 	.word	0x20000e1c
 80021d0:	20001748 	.word	0x20001748

080021d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_GetTick+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20001748 	.word	0x20001748

080021ec <__NVIC_SetPriorityGrouping>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4907      	ldr	r1, [pc, #28]	; (8002288 <__NVIC_EnableIRQ+0x38>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100

0800228c <__NVIC_SetPriority>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	; (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	; (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <NVIC_EncodePriority>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0307 	rsb	r3, r3, #7
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf28      	it	cs
 80022fe:	2304      	movcs	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	2b06      	cmp	r3, #6
 8002308:	d902      	bls.n	8002310 <NVIC_EncodePriority+0x30>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3b03      	subs	r3, #3
 800230e:	e000      	b.n	8002312 <NVIC_EncodePriority+0x32>
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43d9      	mvns	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	4313      	orrs	r3, r2
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <SysTick_Config>:
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f7ff ff8e 	bl	800228c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff29 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff3e 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff8e 	bl	80022e0 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5d 	bl	800228c <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff31 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800241c:	f7ff feda 	bl	80021d4 <HAL_GetTick>
 8002420:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d008      	beq.n	8002440 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e052      	b.n	80024e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0216 	bic.w	r2, r2, #22
 800244e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d103      	bne.n	8002470 <HAL_DMA_Abort+0x62>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0208 	bic.w	r2, r2, #8
 800247e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002490:	e013      	b.n	80024ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002492:	f7ff fe9f 	bl	80021d4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b05      	cmp	r3, #5
 800249e:	d90c      	bls.n	80024ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2203      	movs	r2, #3
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e015      	b.n	80024e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e4      	bne.n	8002492 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	223f      	movs	r2, #63	; 0x3f
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d004      	beq.n	800250c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e00c      	b.n	8002526 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2205      	movs	r2, #5
 8002510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002540:	b2db      	uxtb	r3, r3
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	; 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e159      	b.n	8002820 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	f040 8148 	bne.w	800281a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d005      	beq.n	80025a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d130      	bne.n	8002604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a2 	beq.w	800281a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_GPIO_Init+0x2e8>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a56      	ldr	r2, [pc, #344]	; (8002838 <HAL_GPIO_Init+0x2e8>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_GPIO_Init+0x2e8>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f2:	4a52      	ldr	r2, [pc, #328]	; (800283c <HAL_GPIO_Init+0x2ec>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_GPIO_Init+0x2f0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x202>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_GPIO_Init+0x2f4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x1fe>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a47      	ldr	r2, [pc, #284]	; (8002848 <HAL_GPIO_Init+0x2f8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x1fa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a46      	ldr	r2, [pc, #280]	; (800284c <HAL_GPIO_Init+0x2fc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x1f6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a45      	ldr	r2, [pc, #276]	; (8002850 <HAL_GPIO_Init+0x300>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x1f2>
 800273e:	2304      	movs	r3, #4
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x204>
 8002742:	2307      	movs	r3, #7
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x204>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x204>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x204>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x204>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	; (800283c <HAL_GPIO_Init+0x2ec>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_GPIO_Init+0x304>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002796:	4a2f      	ldr	r2, [pc, #188]	; (8002854 <HAL_GPIO_Init+0x304>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_GPIO_Init+0x304>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ea:	4a1a      	ldr	r2, [pc, #104]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_GPIO_Init+0x304>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002814:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_GPIO_Init+0x304>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f aea2 	bls.w	800256c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020800 	.word	0x40020800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40021000 	.word	0x40021000
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e12b      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fa36 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f0:	f003 f884 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 80028f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a81      	ldr	r2, [pc, #516]	; (8002b00 <HAL_I2C_Init+0x274>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d807      	bhi.n	8002910 <HAL_I2C_Init+0x84>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a80      	ldr	r2, [pc, #512]	; (8002b04 <HAL_I2C_Init+0x278>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e006      	b.n	800291e <HAL_I2C_Init+0x92>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a7d      	ldr	r2, [pc, #500]	; (8002b08 <HAL_I2C_Init+0x27c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0e7      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a78      	ldr	r2, [pc, #480]	; (8002b0c <HAL_I2C_Init+0x280>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_I2C_Init+0x274>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d802      	bhi.n	8002960 <HAL_I2C_Init+0xd4>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3301      	adds	r3, #1
 800295e:	e009      	b.n	8002974 <HAL_I2C_Init+0xe8>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <HAL_I2C_Init+0x284>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	3301      	adds	r3, #1
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	495c      	ldr	r1, [pc, #368]	; (8002b00 <HAL_I2C_Init+0x274>)
 8002990:	428b      	cmp	r3, r1
 8002992:	d819      	bhi.n	80029c8 <HAL_I2C_Init+0x13c>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e59      	subs	r1, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029a8:	400b      	ands	r3, r1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_I2C_Init+0x138>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e59      	subs	r1, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	e051      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c4:	2304      	movs	r3, #4
 80029c6:	e04f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_I2C_Init+0x168>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e012      	b.n	8002a1a <HAL_I2C_Init+0x18e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x196>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e022      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10e      	bne.n	8002a48 <HAL_I2C_Init+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e58      	subs	r0, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	0099      	lsls	r1, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6809      	ldr	r1, [r1, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6911      	ldr	r1, [r2, #16]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	000186a0 	.word	0x000186a0
 8002b04:	001e847f 	.word	0x001e847f
 8002b08:	003d08ff 	.word	0x003d08ff
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	10624dd3 	.word	0x10624dd3

08002b14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	460b      	mov	r3, r1
 8002b22:	817b      	strh	r3, [r7, #10]
 8002b24:	4613      	mov	r3, r2
 8002b26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff fb54 	bl	80021d4 <HAL_GetTick>
 8002b2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	f040 80e0 	bne.w	8002cfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2319      	movs	r3, #25
 8002b42:	2201      	movs	r2, #1
 8002b44:	4970      	ldr	r1, [pc, #448]	; (8002d08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f002 f8be 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
 8002b54:	e0d3      	b.n	8002cfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2C_Master_Transmit+0x50>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e0cc      	b.n	8002cfe <HAL_I2C_Master_Transmit+0x1ea>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d007      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2221      	movs	r2, #33	; 0x21
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	893a      	ldrh	r2, [r7, #8]
 8002bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a50      	ldr	r2, [pc, #320]	; (8002d0c <HAL_I2C_Master_Transmit+0x1f8>)
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bcc:	8979      	ldrh	r1, [r7, #10]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f001 fe80 	bl	80048d8 <I2C_MasterRequestWrite>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e08d      	b.n	8002cfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bf8:	e066      	b.n	8002cc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	6a39      	ldr	r1, [r7, #32]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f002 f938 	bl	8004e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d107      	bne.n	8002c22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06b      	b.n	8002cfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d11b      	bne.n	8002c9c <HAL_I2C_Master_Transmit+0x188>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d017      	beq.n	8002c9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	6a39      	ldr	r1, [r7, #32]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f002 f928 	bl	8004ef6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d107      	bne.n	8002cc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e01a      	b.n	8002cfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d194      	bne.n	8002bfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	00100002 	.word	0x00100002
 8002d0c:	ffff0000 	.word	0xffff0000

08002d10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08c      	sub	sp, #48	; 0x30
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	817b      	strh	r3, [r7, #10]
 8002d20:	4613      	mov	r3, r2
 8002d22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d24:	f7ff fa56 	bl	80021d4 <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	f040 820b 	bne.w	800314e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	2319      	movs	r3, #25
 8002d3e:	2201      	movs	r2, #1
 8002d40:	497c      	ldr	r1, [pc, #496]	; (8002f34 <HAL_I2C_Master_Receive+0x224>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f001 ffc0 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e1fe      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_I2C_Master_Receive+0x50>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e1f7      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d007      	beq.n	8002d86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2222      	movs	r2, #34	; 0x22
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2210      	movs	r2, #16
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	893a      	ldrh	r2, [r7, #8]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4a5c      	ldr	r2, [pc, #368]	; (8002f38 <HAL_I2C_Master_Receive+0x228>)
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f001 fe04 	bl	80049dc <I2C_MasterRequestRead>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1b8      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d113      	bne.n	8002e0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	623b      	str	r3, [r7, #32]
 8002dfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e18c      	b.n	8003128 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d11b      	bne.n	8002e4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	e16c      	b.n	8003128 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d11b      	bne.n	8002e8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	e14c      	b.n	8003128 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002eb4:	e138      	b.n	8003128 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	f200 80f1 	bhi.w	80030a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d123      	bne.n	8002f10 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f002 f885 	bl	8004fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e139      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f0e:	e10b      	b.n	8003128 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d14e      	bne.n	8002fb6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4906      	ldr	r1, [pc, #24]	; (8002f3c <HAL_I2C_Master_Receive+0x22c>)
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f001 fed0 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e10e      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
 8002f32:	bf00      	nop
 8002f34:	00100002 	.word	0x00100002
 8002f38:	ffff0000 	.word	0xffff0000
 8002f3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb4:	e0b8      	b.n	8003128 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4966      	ldr	r1, [pc, #408]	; (8003158 <HAL_I2C_Master_Receive+0x448>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f001 fe81 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0bf      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	2200      	movs	r2, #0
 800301a:	494f      	ldr	r1, [pc, #316]	; (8003158 <HAL_I2C_Master_Receive+0x448>)
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f001 fe53 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e091      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a0:	e042      	b.n	8003128 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f001 ff98 	bl	8004fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e04c      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d118      	bne.n	8003128 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f aec2 	bne.w	8002eb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	00010004 	.word	0x00010004

0800315c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800317c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b10      	cmp	r3, #16
 800318a:	d003      	beq.n	8003194 <HAL_I2C_EV_IRQHandler+0x38>
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	f040 80b1 	bne.w	80032f6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <HAL_I2C_EV_IRQHandler+0x6e>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80031b4:	d003      	beq.n	80031be <HAL_I2C_EV_IRQHandler+0x62>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_EV_IRQHandler+0x66>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_I2C_EV_IRQHandler+0x68>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f000 8114 	beq.w	80033f2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x90>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f001 ff81 	bl	80050e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fd5e 	bl	8003ca6 <I2C_Master_SB>
 80031ea:	e083      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_I2C_EV_IRQHandler+0xac>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fdd6 	bl	8003db2 <I2C_Master_ADD10>
 8003206:	e075      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0xc8>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fdf2 	bl	8003e06 <I2C_Master_ADDR>
 8003222:	e067      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d036      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323c:	f000 80db 	beq.w	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_I2C_EV_IRQHandler+0x10a>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_I2C_EV_IRQHandler+0x10a>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f9d6 	bl	8003610 <I2C_MasterTransmit_TXE>
 8003264:	e046      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80c2 	beq.w	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80bc 	beq.w	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	2b21      	cmp	r3, #33	; 0x21
 8003282:	d103      	bne.n	800328c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fa5f 	bl	8003748 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328a:	e0b4      	b.n	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	f040 80b1 	bne.w	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 facd 	bl	8003834 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329a:	e0ac      	b.n	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	f000 80a4 	beq.w	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x178>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x178>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb45 	bl	800395c <I2C_MasterReceive_RXNE>
 80032d2:	e00f      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 808b 	beq.w	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8085 	beq.w	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fbf0 	bl	8003ad2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f2:	e080      	b.n	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
 80032f4:	e07f      	b.n	80033f6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d004      	beq.n	8003308 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	e007      	b.n	8003318 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d011      	beq.n	8003346 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 ffb0 	bl	80042a4 <I2C_Slave_ADDR>
 8003344:	e05a      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0x206>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 ffea 	bl	8004334 <I2C_Slave_STOPF>
 8003360:	e04c      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003362:	7bbb      	ldrb	r3, [r7, #14]
 8003364:	2b21      	cmp	r3, #33	; 0x21
 8003366:	d002      	beq.n	800336e <HAL_I2C_EV_IRQHandler+0x212>
 8003368:	7bbb      	ldrb	r3, [r7, #14]
 800336a:	2b29      	cmp	r3, #41	; 0x29
 800336c:	d120      	bne.n	80033b0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <HAL_I2C_EV_IRQHandler+0x238>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_I2C_EV_IRQHandler+0x238>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d103      	bne.n	8003394 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fecb 	bl	8004128 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003392:	e032      	b.n	80033fa <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02d      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x29e>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d028      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fefa 	bl	80041a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ae:	e024      	b.n	80033fa <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_EV_IRQHandler+0x27a>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_I2C_EV_IRQHandler+0x27a>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 ff08 	bl	80041e4 <I2C_SlaveReceive_RXNE>
 80033d4:	e012      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 ff38 	bl	8004260 <I2C_SlaveReceive_BTF>
 80033f0:	e004      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80033f2:	bf00      	nop
 80033f4:	e002      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003424:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_I2C_ER_IRQHandler+0x4a>
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800344a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_I2C_ER_IRQHandler+0x70>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	f043 0302 	orr.w	r3, r3, #2
 8003466:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003470:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03e      	beq.n	80034fa <HAL_I2C_ER_IRQHandler+0xf8>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d039      	beq.n	80034fa <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003486:	7efb      	ldrb	r3, [r7, #27]
 8003488:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80034a0:	7ebb      	ldrb	r3, [r7, #26]
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d112      	bne.n	80034cc <HAL_I2C_ER_IRQHandler+0xca>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <HAL_I2C_ER_IRQHandler+0xca>
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b21      	cmp	r3, #33	; 0x21
 80034b0:	d008      	beq.n	80034c4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b29      	cmp	r3, #41	; 0x29
 80034b6:	d005      	beq.n	80034c4 <HAL_I2C_ER_IRQHandler+0xc2>
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	2b28      	cmp	r3, #40	; 0x28
 80034bc:	d106      	bne.n	80034cc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2b21      	cmp	r3, #33	; 0x21
 80034c2:	d103      	bne.n	80034cc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f001 f865 	bl	8004594 <I2C_Slave_AF>
 80034ca:	e016      	b.n	80034fa <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80034de:	7efb      	ldrb	r3, [r7, #27]
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d002      	beq.n	80034ea <HAL_I2C_ER_IRQHandler+0xe8>
 80034e4:	7efb      	ldrb	r3, [r7, #27]
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d107      	bne.n	80034fa <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_I2C_ER_IRQHandler+0x11e>
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	f043 0308 	orr.w	r3, r3, #8
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800351e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f001 f89e 	bl	8004674 <I2C_ITError>
  }
}
 8003538:	bf00      	nop
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
 800359c:	4613      	mov	r3, r2
 800359e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003626:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d150      	bne.n	80036d8 <I2C_MasterTransmit_TXE+0xc8>
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b21      	cmp	r3, #33	; 0x21
 800363a:	d14d      	bne.n	80036d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d01d      	beq.n	800367e <I2C_MasterTransmit_TXE+0x6e>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b20      	cmp	r3, #32
 8003646:	d01a      	beq.n	800367e <I2C_MasterTransmit_TXE+0x6e>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800364e:	d016      	beq.n	800367e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800365e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2211      	movs	r2, #17
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff62 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800367c:	e060      	b.n	8003740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800368c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d107      	bne.n	80036c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ff7d 	bl	80035c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036c6:	e03b      	b.n	8003740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff35 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036d6:	e033      	b.n	8003740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b21      	cmp	r3, #33	; 0x21
 80036dc:	d005      	beq.n	80036ea <I2C_MasterTransmit_TXE+0xda>
 80036de:	7bbb      	ldrb	r3, [r7, #14]
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d12d      	bne.n	8003740 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b22      	cmp	r3, #34	; 0x22
 80036e8:	d12a      	bne.n	8003740 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003704:	e01c      	b.n	8003740 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d103      	bne.n	800371a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f88e 	bl	8003834 <I2C_MemoryTransmit_TXE_BTF>
}
 8003718:	e012      	b.n	8003740 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	781a      	ldrb	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800373e:	e7ff      	b.n	8003740 <I2C_MasterTransmit_TXE+0x130>
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b21      	cmp	r3, #33	; 0x21
 8003760:	d164      	bne.n	800382c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003790:	e04c      	b.n	800382c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d01d      	beq.n	80037d4 <I2C_MasterTransmit_BTF+0x8c>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b20      	cmp	r3, #32
 800379c:	d01a      	beq.n	80037d4 <I2C_MasterTransmit_BTF+0x8c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037a4:	d016      	beq.n	80037d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2211      	movs	r2, #17
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff feb7 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
}
 80037d2:	e02b      	b.n	800382c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d107      	bne.n	800381e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fed2 	bl	80035c0 <HAL_I2C_MemTxCpltCallback>
}
 800381c:	e006      	b.n	800382c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fe8a 	bl	8003540 <HAL_I2C_MasterTxCpltCallback>
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003842:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11d      	bne.n	8003888 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	2b01      	cmp	r3, #1
 8003852:	d10b      	bne.n	800386c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	b2da      	uxtb	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800386a:	e073      	b.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	b29b      	uxth	r3, r3
 8003872:	121b      	asrs	r3, r3, #8
 8003874:	b2da      	uxtb	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003886:	e065      	b.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10b      	bne.n	80038a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	b2da      	uxtb	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038a6:	e055      	b.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d151      	bne.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b22      	cmp	r3, #34	; 0x22
 80038b4:	d10d      	bne.n	80038d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038d0:	e040      	b.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d015      	beq.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b21      	cmp	r3, #33	; 0x21
 80038e0:	d112      	bne.n	8003908 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003906:	e025      	b.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d120      	bne.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b21      	cmp	r3, #33	; 0x21
 8003916:	d11d      	bne.n	8003954 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003926:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff fe36 	bl	80035c0 <HAL_I2C_MemTxCpltCallback>
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b22      	cmp	r3, #34	; 0x22
 800396e:	f040 80ac 	bne.w	8003aca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d921      	bls.n	80039c4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	f040 808c 	bne.w	8003aca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80039c2:	e082      	b.n	8003aca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d075      	beq.n	8003ab8 <I2C_MasterReceive_RXNE+0x15c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d002      	beq.n	80039d8 <I2C_MasterReceive_RXNE+0x7c>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d16f      	bne.n	8003ab8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f001 facd 	bl	8004f78 <I2C_WaitOnSTOPRequestThroughIT>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d142      	bne.n	8003a6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d10a      	bne.n	8003a54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fdc1 	bl	80035d4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a52:	e03a      	b.n	8003aca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2212      	movs	r2, #18
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fd76 	bl	8003554 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a68:	e02f      	b.n	8003aca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff fd99 	bl	80035e8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ab6:	e008      	b.n	8003aca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	605a      	str	r2, [r3, #4]
}
 8003ac8:	e7ff      	b.n	8003aca <I2C_MasterReceive_RXNE+0x16e>
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d11b      	bne.n	8003b22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b20:	e0bd      	b.n	8003c9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d129      	bne.n	8003b80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d00a      	beq.n	8003b58 <I2C_MasterReceive_BTF+0x86>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d007      	beq.n	8003b58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b7e:	e08e      	b.n	8003c9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d176      	bne.n	8003c78 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <I2C_MasterReceive_BTF+0xc4>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d108      	bne.n	8003ba8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e019      	b.n	8003bdc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d002      	beq.n	8003bb4 <I2C_MasterReceive_BTF+0xe2>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d108      	bne.n	8003bc6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e00a      	b.n	8003bdc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d007      	beq.n	8003bdc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d10a      	bne.n	8003c62 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fcba 	bl	80035d4 <HAL_I2C_MemRxCpltCallback>
}
 8003c60:	e01d      	b.n	8003c9e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2212      	movs	r2, #18
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fc6f 	bl	8003554 <HAL_I2C_MasterRxCpltCallback>
}
 8003c76:	e012      	b.n	8003c9e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d117      	bne.n	8003cea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003cd4:	e067      	b.n	8003da6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]
}
 8003ce8:	e05d      	b.n	8003da6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf2:	d133      	bne.n	8003d5c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b21      	cmp	r3, #33	; 0x21
 8003cfe:	d109      	bne.n	8003d14 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d10:	611a      	str	r2, [r3, #16]
 8003d12:	e008      	b.n	8003d26 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <I2C_Master_SB+0x92>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d108      	bne.n	8003d4a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d032      	beq.n	8003da6 <I2C_Master_SB+0x100>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02d      	beq.n	8003da6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d58:	605a      	str	r2, [r3, #4]
}
 8003d5a:	e024      	b.n	8003da6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10e      	bne.n	8003d82 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	11db      	asrs	r3, r3, #7
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 0306 	and.w	r3, r3, #6
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f063 030f 	orn	r3, r3, #15
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	611a      	str	r2, [r3, #16]
}
 8003d80:	e011      	b.n	8003da6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d10d      	bne.n	8003da6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	11db      	asrs	r3, r3, #7
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 0306 	and.w	r3, r3, #6
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f063 030e 	orn	r3, r3, #14
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	611a      	str	r2, [r3, #16]
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <I2C_Master_ADD10+0x26>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00c      	beq.n	8003dfa <I2C_Master_ADD10+0x48>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	605a      	str	r2, [r3, #4]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b091      	sub	sp, #68	; 0x44
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b22      	cmp	r3, #34	; 0x22
 8003e2e:	f040 8169 	bne.w	8004104 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10f      	bne.n	8003e5a <I2C_Master_ADDR+0x54>
 8003e3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d10b      	bne.n	8003e5a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	e160      	b.n	800411c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11d      	bne.n	8003e9e <I2C_Master_ADDR+0x98>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e6a:	d118      	bne.n	8003e9e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e9c:	e13e      	b.n	800411c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d113      	bne.n	8003ed0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e115      	b.n	80040fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	f040 808a 	bne.w	8003ff0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee2:	d137      	bne.n	8003f54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f02:	d113      	bne.n	8003f2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	e0e7      	b.n	80040fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e0d3      	b.n	80040fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d02e      	beq.n	8003fb8 <I2C_Master_ADDR+0x1b2>
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d02b      	beq.n	8003fb8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	2b12      	cmp	r3, #18
 8003f64:	d102      	bne.n	8003f6c <I2C_Master_ADDR+0x166>
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d125      	bne.n	8003fb8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d00e      	beq.n	8003f90 <I2C_Master_ADDR+0x18a>
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d00b      	beq.n	8003f90 <I2C_Master_ADDR+0x18a>
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	2b10      	cmp	r3, #16
 8003f7c:	d008      	beq.n	8003f90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e007      	b.n	8003fa0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	e0a1      	b.n	80040fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e085      	b.n	80040fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d14d      	bne.n	8004096 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d016      	beq.n	800402e <I2C_Master_ADDR+0x228>
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	2b02      	cmp	r3, #2
 8004004:	d013      	beq.n	800402e <I2C_Master_ADDR+0x228>
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b10      	cmp	r3, #16
 800400a:	d010      	beq.n	800402e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	e007      	b.n	800403e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800403c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404c:	d117      	bne.n	800407e <I2C_Master_ADDR+0x278>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004054:	d00b      	beq.n	800406e <I2C_Master_ADDR+0x268>
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2b01      	cmp	r3, #1
 800405a:	d008      	beq.n	800406e <I2C_Master_ADDR+0x268>
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	2b08      	cmp	r3, #8
 8004060:	d005      	beq.n	800406e <I2C_Master_ADDR+0x268>
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2b10      	cmp	r3, #16
 8004066:	d002      	beq.n	800406e <I2C_Master_ADDR+0x268>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	2b20      	cmp	r3, #32
 800406c:	d107      	bne.n	800407e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800407c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	e032      	b.n	80040fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b4:	d117      	bne.n	80040e6 <I2C_Master_ADDR+0x2e0>
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040bc:	d00b      	beq.n	80040d6 <I2C_Master_ADDR+0x2d0>
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d008      	beq.n	80040d6 <I2C_Master_ADDR+0x2d0>
 80040c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d005      	beq.n	80040d6 <I2C_Master_ADDR+0x2d0>
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d002      	beq.n	80040d6 <I2C_Master_ADDR+0x2d0>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d107      	bne.n	80040e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004102:	e00b      	b.n	800411c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
}
 800411a:	e7ff      	b.n	800411c <I2C_Master_ADDR+0x316>
 800411c:	bf00      	nop
 800411e:	3744      	adds	r7, #68	; 0x44
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d02b      	beq.n	800419a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d114      	bne.n	800419a <I2C_SlaveTransmit_TXE+0x72>
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b29      	cmp	r3, #41	; 0x29
 8004174:	d111      	bne.n	800419a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2221      	movs	r2, #33	; 0x21
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2228      	movs	r2, #40	; 0x28
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff f9e7 	bl	8003568 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d011      	beq.n	80041d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d02c      	beq.n	8004258 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d114      	bne.n	8004258 <I2C_SlaveReceive_RXNE+0x74>
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b2a      	cmp	r3, #42	; 0x2a
 8004232:	d111      	bne.n	8004258 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2222      	movs	r2, #34	; 0x22
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2228      	movs	r2, #40	; 0x28
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff f992 	bl	800357c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d012      	beq.n	8004298 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042be:	2b28      	cmp	r3, #40	; 0x28
 80042c0:	d125      	bne.n	800430e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	81bb      	strh	r3, [r7, #12]
 80042f0:	e002      	b.n	80042f8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004300:	89ba      	ldrh	r2, [r7, #12]
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff f942 	bl	8003590 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800430c:	e00e      	b.n	800432c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004352:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004354:	2300      	movs	r3, #0
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004380:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004390:	d172      	bne.n	8004478 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b22      	cmp	r3, #34	; 0x22
 8004396:	d002      	beq.n	800439e <I2C_Slave_STOPF+0x6a>
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b2a      	cmp	r3, #42	; 0x2a
 800439c:	d135      	bne.n	800440a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe f8ab 	bl	8002532 <HAL_DMA_GetState>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d049      	beq.n	8004476 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	4a69      	ldr	r2, [pc, #420]	; (800458c <I2C_Slave_STOPF+0x258>)
 80043e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f87d 	bl	80024ee <HAL_DMA_Abort_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d03d      	beq.n	8004476 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004408:	e035      	b.n	8004476 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f875 	bl	8002532 <HAL_DMA_GetState>
 8004448:	4603      	mov	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d014      	beq.n	8004478 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	4a4e      	ldr	r2, [pc, #312]	; (800458c <I2C_Slave_STOPF+0x258>)
 8004454:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe f847 	bl	80024ee <HAL_DMA_Abort_IT>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
 8004474:	e000      	b.n	8004478 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004476:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03e      	beq.n	8004500 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d112      	bne.n	80044b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d112      	bne.n	80044ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691a      	ldr	r2, [r3, #16]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f043 0204 	orr.w	r2, r3, #4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f8b3 	bl	8004674 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800450e:	e039      	b.n	8004584 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b2a      	cmp	r3, #42	; 0x2a
 8004514:	d109      	bne.n	800452a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2228      	movs	r2, #40	; 0x28
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff f829 	bl	800357c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b28      	cmp	r3, #40	; 0x28
 8004534:	d111      	bne.n	800455a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <I2C_Slave_STOPF+0x25c>)
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff f82a 	bl	80035ac <HAL_I2C_ListenCpltCallback>
}
 8004558:	e014      	b.n	8004584 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	2b22      	cmp	r3, #34	; 0x22
 8004560:	d002      	beq.n	8004568 <I2C_Slave_STOPF+0x234>
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b22      	cmp	r3, #34	; 0x22
 8004566:	d10d      	bne.n	8004584 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fe fffc 	bl	800357c <HAL_I2C_SlaveRxCpltCallback>
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	08004b79 	.word	0x08004b79
 8004590:	ffff0000 	.word	0xffff0000

08004594 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d002      	beq.n	80045b6 <I2C_Slave_AF+0x22>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d129      	bne.n	800460a <I2C_Slave_AF+0x76>
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b28      	cmp	r3, #40	; 0x28
 80045ba:	d126      	bne.n	800460a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <I2C_Slave_AF+0xdc>)
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fe ffd2 	bl	80035ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004608:	e02e      	b.n	8004668 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b21      	cmp	r3, #33	; 0x21
 800460e:	d126      	bne.n	800465e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a17      	ldr	r2, [pc, #92]	; (8004670 <I2C_Slave_AF+0xdc>)
 8004614:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2221      	movs	r2, #33	; 0x21
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800463a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004644:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004654:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fe ff86 	bl	8003568 <HAL_I2C_SlaveTxCpltCallback>
}
 800465c:	e004      	b.n	8004668 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004666:	615a      	str	r2, [r3, #20]
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	ffff0000 	.word	0xffff0000

08004674 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004682:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800468c:	7bbb      	ldrb	r3, [r7, #14]
 800468e:	2b10      	cmp	r3, #16
 8004690:	d002      	beq.n	8004698 <I2C_ITError+0x24>
 8004692:	7bbb      	ldrb	r3, [r7, #14]
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d10a      	bne.n	80046ae <I2C_ITError+0x3a>
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b22      	cmp	r3, #34	; 0x22
 800469c:	d107      	bne.n	80046ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046b4:	2b28      	cmp	r3, #40	; 0x28
 80046b6:	d107      	bne.n	80046c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2228      	movs	r2, #40	; 0x28
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046c6:	e015      	b.n	80046f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d6:	d00a      	beq.n	80046ee <I2C_ITError+0x7a>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b60      	cmp	r3, #96	; 0x60
 80046dc:	d007      	beq.n	80046ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004702:	d162      	bne.n	80047ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004712:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d020      	beq.n	8004764 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <I2C_ITError+0x25c>)
 8004728:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fedd 	bl	80024ee <HAL_DMA_Abort_IT>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8089 	beq.w	800484e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800475e:	4610      	mov	r0, r2
 8004760:	4798      	blx	r3
 8004762:	e074      	b.n	800484e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	4a59      	ldr	r2, [pc, #356]	; (80048d0 <I2C_ITError+0x25c>)
 800476a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	4618      	mov	r0, r3
 8004772:	f7fd febc 	bl	80024ee <HAL_DMA_Abort_IT>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d068      	beq.n	800484e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d10b      	bne.n	80047a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047c4:	4610      	mov	r0, r2
 80047c6:	4798      	blx	r3
 80047c8:	e041      	b.n	800484e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b60      	cmp	r3, #96	; 0x60
 80047d4:	d125      	bne.n	8004822 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d10b      	bne.n	800480a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe feee 	bl	80035fc <HAL_I2C_AbortCpltCallback>
 8004820:	e015      	b.n	800484e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d10b      	bne.n	8004848 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fe fecd 	bl	80035e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10e      	bne.n	800487c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d113      	bne.n	80048c8 <I2C_ITError+0x254>
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b28      	cmp	r3, #40	; 0x28
 80048a4:	d110      	bne.n	80048c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <I2C_ITError+0x260>)
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fe fe72 	bl	80035ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	08004b79 	.word	0x08004b79
 80048d4:	ffff0000 	.word	0xffff0000

080048d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	460b      	mov	r3, r1
 80048e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d006      	beq.n	8004902 <I2C_MasterRequestWrite+0x2a>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d003      	beq.n	8004902 <I2C_MasterRequestWrite+0x2a>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004900:	d108      	bne.n	8004914 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e00b      	b.n	800492c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b12      	cmp	r3, #18
 800491a:	d107      	bne.n	800492c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f9c5 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	d103      	bne.n	800495c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e035      	b.n	80049cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004968:	d108      	bne.n	800497c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004978:	611a      	str	r2, [r3, #16]
 800497a:	e01b      	b.n	80049b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800497c:	897b      	ldrh	r3, [r7, #10]
 800497e:	11db      	asrs	r3, r3, #7
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 0306 	and.w	r3, r3, #6
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f063 030f 	orn	r3, r3, #15
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	490e      	ldr	r1, [pc, #56]	; (80049d4 <I2C_MasterRequestWrite+0xfc>)
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f9eb 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e010      	b.n	80049cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049aa:	897b      	ldrh	r3, [r7, #10]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	4907      	ldr	r1, [pc, #28]	; (80049d8 <I2C_MasterRequestWrite+0x100>)
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f9db 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	00010008 	.word	0x00010008
 80049d8:	00010002 	.word	0x00010002

080049dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	460b      	mov	r3, r1
 80049ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a00:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d006      	beq.n	8004a16 <I2C_MasterRequestRead+0x3a>
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d003      	beq.n	8004a16 <I2C_MasterRequestRead+0x3a>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a14:	d108      	bne.n	8004a28 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	e00b      	b.n	8004a40 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	2b11      	cmp	r3, #17
 8004a2e:	d107      	bne.n	8004a40 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f93b 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00d      	beq.n	8004a74 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a66:	d103      	bne.n	8004a70 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e079      	b.n	8004b68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a7c:	d108      	bne.n	8004a90 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	611a      	str	r2, [r3, #16]
 8004a8e:	e05f      	b.n	8004b50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a90:	897b      	ldrh	r3, [r7, #10]
 8004a92:	11db      	asrs	r3, r3, #7
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0306 	and.w	r3, r3, #6
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f063 030f 	orn	r3, r3, #15
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4930      	ldr	r1, [pc, #192]	; (8004b70 <I2C_MasterRequestRead+0x194>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f961 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e054      	b.n	8004b68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004abe:	897b      	ldrh	r3, [r7, #10]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4929      	ldr	r1, [pc, #164]	; (8004b74 <I2C_MasterRequestRead+0x198>)
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f951 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e044      	b.n	8004b68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f8d9 	bl	8004cc8 <I2C_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00d      	beq.n	8004b38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2a:	d103      	bne.n	8004b34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e017      	b.n	8004b68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b38:	897b      	ldrh	r3, [r7, #10]
 8004b3a:	11db      	asrs	r3, r3, #7
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0306 	and.w	r3, r3, #6
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f063 030e 	orn	r3, r3, #14
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	4907      	ldr	r1, [pc, #28]	; (8004b74 <I2C_MasterRequestRead+0x198>)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f90d 	bl	8004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	00010008 	.word	0x00010008
 8004b74:	00010002 	.word	0x00010002

08004b78 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b92:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <I2C_DMAAbort+0x148>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	08db      	lsrs	r3, r3, #3
 8004b98:	4a4a      	ldr	r2, [pc, #296]	; (8004cc4 <I2C_DMAAbort+0x14c>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	0a1a      	lsrs	r2, r3, #8
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	00da      	lsls	r2, r3, #3
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004bbe:	e00a      	b.n	8004bd6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d0ea      	beq.n	8004bac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be2:	2200      	movs	r2, #0
 8004be4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	2200      	movs	r2, #0
 8004c1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	2200      	movs	r2, #0
 8004c2a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b60      	cmp	r3, #96	; 0x60
 8004c46:	d10e      	bne.n	8004c66 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c5e:	6978      	ldr	r0, [r7, #20]
 8004c60:	f7fe fccc 	bl	80035fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c64:	e027      	b.n	8004cb6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c6c:	2b28      	cmp	r3, #40	; 0x28
 8004c6e:	d117      	bne.n	8004ca0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c8e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2228      	movs	r2, #40	; 0x28
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c9e:	e007      	b.n	8004cb0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004cb0:	6978      	ldr	r0, [r7, #20]
 8004cb2:	f7fe fc99 	bl	80035e8 <HAL_I2C_ErrorCallback>
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000e14 	.word	0x20000e14
 8004cc4:	14f8b589 	.word	0x14f8b589

08004cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd8:	e025      	b.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d021      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce2:	f7fd fa77 	bl	80021d4 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d302      	bcc.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d116      	bne.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e023      	b.n	8004d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10d      	bne.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	43da      	mvns	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	e00c      	b.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf0c      	ite	eq
 8004d5e:	2301      	moveq	r3, #1
 8004d60:	2300      	movne	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	461a      	mov	r2, r3
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d0b6      	beq.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d84:	e051      	b.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d123      	bne.n	8004dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f043 0204 	orr.w	r2, r3, #4
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e046      	b.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d021      	beq.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fd f9f5 	bl	80021d4 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d116      	bne.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e020      	b.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d10c      	bne.n	8004e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	43da      	mvns	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf14      	ite	ne
 8004e46:	2301      	movne	r3, #1
 8004e48:	2300      	moveq	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	e00b      	b.n	8004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	43da      	mvns	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d18d      	bne.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e80:	e02d      	b.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f900 	bl	8005088 <I2C_IsAcknowledgeFailed>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e02d      	b.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d021      	beq.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fd f99b 	bl	80021d4 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d116      	bne.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e007      	b.n	8004eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d1ca      	bne.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f02:	e02d      	b.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f8bf 	bl	8005088 <I2C_IsAcknowledgeFailed>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e02d      	b.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1a:	d021      	beq.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f1c:	f7fd f95a 	bl	80021d4 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d302      	bcc.n	8004f32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d116      	bne.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e007      	b.n	8004f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d1ca      	bne.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	08db      	lsrs	r3, r3, #3
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	0a1a      	lsrs	r2, r3, #8
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d107      	bne.n	8004fb6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f043 0220 	orr.w	r2, r3, #32
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e008      	b.n	8004fc8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc4:	d0e9      	beq.n	8004f9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20000e14 	.word	0x20000e14
 8004fd8:	14f8b589 	.word	0x14f8b589

08004fdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe8:	e042      	b.n	8005070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d119      	bne.n	800502c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0210 	mvn.w	r2, #16
 8005000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e029      	b.n	8005080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502c:	f7fd f8d2 	bl	80021d4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	d302      	bcc.n	8005042 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d116      	bne.n	8005070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e007      	b.n	8005080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d1b5      	bne.n	8004fea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509e:	d11b      	bne.n	80050d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f043 0204 	orr.w	r2, r3, #4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80050f6:	d103      	bne.n	8005100 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050fe:	e007      	b.n	8005110 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005108:	d102      	bne.n	8005110 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2208      	movs	r2, #8
 800510e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e267      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d075      	beq.n	8005226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800513a:	4b88      	ldr	r3, [pc, #544]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 030c 	and.w	r3, r3, #12
 8005142:	2b04      	cmp	r3, #4
 8005144:	d00c      	beq.n	8005160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005146:	4b85      	ldr	r3, [pc, #532]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800514e:	2b08      	cmp	r3, #8
 8005150:	d112      	bne.n	8005178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005152:	4b82      	ldr	r3, [pc, #520]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800515a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800515e:	d10b      	bne.n	8005178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005160:	4b7e      	ldr	r3, [pc, #504]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d05b      	beq.n	8005224 <HAL_RCC_OscConfig+0x108>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d157      	bne.n	8005224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e242      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d106      	bne.n	8005190 <HAL_RCC_OscConfig+0x74>
 8005182:	4b76      	ldr	r3, [pc, #472]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a75      	ldr	r2, [pc, #468]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e01d      	b.n	80051cc <HAL_RCC_OscConfig+0xb0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x98>
 800519a:	4b70      	ldr	r3, [pc, #448]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a6f      	ldr	r2, [pc, #444]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	4b6d      	ldr	r3, [pc, #436]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a6c      	ldr	r2, [pc, #432]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0xb0>
 80051b4:	4b69      	ldr	r3, [pc, #420]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a68      	ldr	r2, [pc, #416]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a65      	ldr	r2, [pc, #404]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d013      	beq.n	80051fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d4:	f7fc fffe 	bl	80021d4 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051dc:	f7fc fffa 	bl	80021d4 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b64      	cmp	r3, #100	; 0x64
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e207      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b5b      	ldr	r3, [pc, #364]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_RCC_OscConfig+0xc0>
 80051fa:	e014      	b.n	8005226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fc ffea 	bl	80021d4 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005204:	f7fc ffe6 	bl	80021d4 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b64      	cmp	r3, #100	; 0x64
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e1f3      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005216:	4b51      	ldr	r3, [pc, #324]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0xe8>
 8005222:	e000      	b.n	8005226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d063      	beq.n	80052fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005232:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00b      	beq.n	8005256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005246:	2b08      	cmp	r3, #8
 8005248:	d11c      	bne.n	8005284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800524a:	4b44      	ldr	r3, [pc, #272]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d116      	bne.n	8005284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005256:	4b41      	ldr	r3, [pc, #260]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_RCC_OscConfig+0x152>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e1c7      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526e:	4b3b      	ldr	r3, [pc, #236]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4937      	ldr	r1, [pc, #220]	; (800535c <HAL_RCC_OscConfig+0x240>)
 800527e:	4313      	orrs	r3, r2
 8005280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005282:	e03a      	b.n	80052fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d020      	beq.n	80052ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800528c:	4b34      	ldr	r3, [pc, #208]	; (8005360 <HAL_RCC_OscConfig+0x244>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fc ff9f 	bl	80021d4 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800529a:	f7fc ff9b 	bl	80021d4 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e1a8      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ac:	4b2b      	ldr	r3, [pc, #172]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b8:	4b28      	ldr	r3, [pc, #160]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4925      	ldr	r1, [pc, #148]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
 80052cc:	e015      	b.n	80052fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCC_OscConfig+0x244>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d4:	f7fc ff7e 	bl	80021d4 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052dc:	f7fc ff7a 	bl	80021d4 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e187      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d036      	beq.n	8005374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800530e:	4b15      	ldr	r3, [pc, #84]	; (8005364 <HAL_RCC_OscConfig+0x248>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005314:	f7fc ff5e 	bl	80021d4 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531c:	f7fc ff5a 	bl	80021d4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e167      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_RCC_OscConfig+0x240>)
 8005330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0x200>
 800533a:	e01b      	b.n	8005374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_OscConfig+0x248>)
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005342:	f7fc ff47 	bl	80021d4 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005348:	e00e      	b.n	8005368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800534a:	f7fc ff43 	bl	80021d4 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d907      	bls.n	8005368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e150      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
 800535c:	40023800 	.word	0x40023800
 8005360:	42470000 	.word	0x42470000
 8005364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005368:	4b88      	ldr	r3, [pc, #544]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800536a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ea      	bne.n	800534a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 8097 	beq.w	80054b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005386:	4b81      	ldr	r3, [pc, #516]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10f      	bne.n	80053b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	4b7d      	ldr	r3, [pc, #500]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	4a7c      	ldr	r2, [pc, #496]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6413      	str	r3, [r2, #64]	; 0x40
 80053a2:	4b7a      	ldr	r3, [pc, #488]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ae:	2301      	movs	r3, #1
 80053b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b2:	4b77      	ldr	r3, [pc, #476]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d118      	bne.n	80053f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053be:	4b74      	ldr	r3, [pc, #464]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a73      	ldr	r2, [pc, #460]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ca:	f7fc ff03 	bl	80021d4 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d2:	f7fc feff 	bl	80021d4 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e10c      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e4:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <HAL_RCC_OscConfig+0x474>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <HAL_RCC_OscConfig+0x2ea>
 80053f8:	4b64      	ldr	r3, [pc, #400]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	4a63      	ldr	r2, [pc, #396]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	6713      	str	r3, [r2, #112]	; 0x70
 8005404:	e01c      	b.n	8005440 <HAL_RCC_OscConfig+0x324>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b05      	cmp	r3, #5
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x30c>
 800540e:	4b5f      	ldr	r3, [pc, #380]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a5e      	ldr	r2, [pc, #376]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005414:	f043 0304 	orr.w	r3, r3, #4
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	4b5c      	ldr	r3, [pc, #368]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a5b      	ldr	r2, [pc, #364]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
 8005426:	e00b      	b.n	8005440 <HAL_RCC_OscConfig+0x324>
 8005428:	4b58      	ldr	r3, [pc, #352]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800542a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542c:	4a57      	ldr	r2, [pc, #348]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800542e:	f023 0301 	bic.w	r3, r3, #1
 8005432:	6713      	str	r3, [r2, #112]	; 0x70
 8005434:	4b55      	ldr	r3, [pc, #340]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	4a54      	ldr	r2, [pc, #336]	; (800558c <HAL_RCC_OscConfig+0x470>)
 800543a:	f023 0304 	bic.w	r3, r3, #4
 800543e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d015      	beq.n	8005474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fc fec4 	bl	80021d4 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005450:	f7fc fec0 	bl	80021d4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e0cb      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005466:	4b49      	ldr	r3, [pc, #292]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0ee      	beq.n	8005450 <HAL_RCC_OscConfig+0x334>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005474:	f7fc feae 	bl	80021d4 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800547a:	e00a      	b.n	8005492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800547c:	f7fc feaa 	bl	80021d4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0b5      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005492:	4b3e      	ldr	r3, [pc, #248]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1ee      	bne.n	800547c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d105      	bne.n	80054b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054a4:	4b39      	ldr	r3, [pc, #228]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	4a38      	ldr	r2, [pc, #224]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80a1 	beq.w	80055fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054ba:	4b34      	ldr	r3, [pc, #208]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d05c      	beq.n	8005580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d141      	bne.n	8005552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ce:	4b31      	ldr	r3, [pc, #196]	; (8005594 <HAL_RCC_OscConfig+0x478>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fc fe7e 	bl	80021d4 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054dc:	f7fc fe7a 	bl	80021d4 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e087      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ee:	4b27      	ldr	r3, [pc, #156]	; (800558c <HAL_RCC_OscConfig+0x470>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	3b01      	subs	r3, #1
 8005514:	041b      	lsls	r3, r3, #16
 8005516:	431a      	orrs	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	061b      	lsls	r3, r3, #24
 800551e:	491b      	ldr	r1, [pc, #108]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005520:	4313      	orrs	r3, r2
 8005522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x478>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552a:	f7fc fe53 	bl	80021d4 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005532:	f7fc fe4f 	bl	80021d4 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e05c      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005544:	4b11      	ldr	r3, [pc, #68]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x416>
 8005550:	e054      	b.n	80055fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <HAL_RCC_OscConfig+0x478>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005558:	f7fc fe3c 	bl	80021d4 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005560:	f7fc fe38 	bl	80021d4 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e045      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005572:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_OscConfig+0x470>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x444>
 800557e:	e03d      	b.n	80055fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d107      	bne.n	8005598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e038      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
 800558c:	40023800 	.word	0x40023800
 8005590:	40007000 	.word	0x40007000
 8005594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCC_OscConfig+0x4ec>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d028      	beq.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d121      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055be:	429a      	cmp	r2, r3
 80055c0:	d11a      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055c8:	4013      	ands	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d111      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	3b01      	subs	r3, #1
 80055e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d107      	bne.n	80055f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800

0800560c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0cc      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005620:	4b68      	ldr	r3, [pc, #416]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d90c      	bls.n	8005648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562e:	4b65      	ldr	r3, [pc, #404]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b63      	ldr	r3, [pc, #396]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e0b8      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d020      	beq.n	8005696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005660:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4a58      	ldr	r2, [pc, #352]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800566a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005678:	4b53      	ldr	r3, [pc, #332]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a52      	ldr	r2, [pc, #328]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005684:	4b50      	ldr	r3, [pc, #320]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	494d      	ldr	r1, [pc, #308]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005692:	4313      	orrs	r3, r2
 8005694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d044      	beq.n	800572c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d107      	bne.n	80056ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056aa:	4b47      	ldr	r3, [pc, #284]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d119      	bne.n	80056ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e07f      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d003      	beq.n	80056ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d107      	bne.n	80056da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ca:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e06f      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056da:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e067      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ea:	4b37      	ldr	r3, [pc, #220]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 0203 	bic.w	r2, r3, #3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4934      	ldr	r1, [pc, #208]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056fc:	f7fc fd6a 	bl	80021d4 <HAL_GetTick>
 8005700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005702:	e00a      	b.n	800571a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005704:	f7fc fd66 	bl	80021d4 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e04f      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 020c 	and.w	r2, r3, #12
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	429a      	cmp	r2, r3
 800572a:	d1eb      	bne.n	8005704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800572c:	4b25      	ldr	r3, [pc, #148]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d20c      	bcs.n	8005754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573a:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e032      	b.n	80057ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005760:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4916      	ldr	r1, [pc, #88]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	490e      	ldr	r1, [pc, #56]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005792:	f000 f821 	bl	80057d8 <HAL_RCC_GetSysClockFreq>
 8005796:	4602      	mov	r2, r0
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	490a      	ldr	r1, [pc, #40]	; (80057cc <HAL_RCC_ClockConfig+0x1c0>)
 80057a4:	5ccb      	ldrb	r3, [r1, r3]
 80057a6:	fa22 f303 	lsr.w	r3, r2, r3
 80057aa:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <HAL_RCC_ClockConfig+0x1c4>)
 80057ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_RCC_ClockConfig+0x1c8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fc fcca 	bl	800214c <HAL_InitTick>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40023c00 	.word	0x40023c00
 80057c8:	40023800 	.word	0x40023800
 80057cc:	08008594 	.word	0x08008594
 80057d0:	20000e14 	.word	0x20000e14
 80057d4:	20000e18 	.word	0x20000e18

080057d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057dc:	b094      	sub	sp, #80	; 0x50
 80057de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	647b      	str	r3, [r7, #68]	; 0x44
 80057e4:	2300      	movs	r3, #0
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e8:	2300      	movs	r3, #0
 80057ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057f0:	4b79      	ldr	r3, [pc, #484]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d00d      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0x40>
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	f200 80e1 	bhi.w	80059c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_RCC_GetSysClockFreq+0x34>
 8005806:	2b04      	cmp	r3, #4
 8005808:	d003      	beq.n	8005812 <HAL_RCC_GetSysClockFreq+0x3a>
 800580a:	e0db      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4b73      	ldr	r3, [pc, #460]	; (80059dc <HAL_RCC_GetSysClockFreq+0x204>)
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005810:	e0db      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005812:	4b73      	ldr	r3, [pc, #460]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005816:	e0d8      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005818:	4b6f      	ldr	r3, [pc, #444]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005822:	4b6d      	ldr	r3, [pc, #436]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d063      	beq.n	80058f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582e:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	099b      	lsrs	r3, r3, #6
 8005834:	2200      	movs	r2, #0
 8005836:	63bb      	str	r3, [r7, #56]	; 0x38
 8005838:	63fa      	str	r2, [r7, #60]	; 0x3c
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005840:	633b      	str	r3, [r7, #48]	; 0x30
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800584a:	4622      	mov	r2, r4
 800584c:	462b      	mov	r3, r5
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	0159      	lsls	r1, r3, #5
 8005858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800585c:	0150      	lsls	r0, r2, #5
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4621      	mov	r1, r4
 8005864:	1a51      	subs	r1, r2, r1
 8005866:	6139      	str	r1, [r7, #16]
 8005868:	4629      	mov	r1, r5
 800586a:	eb63 0301 	sbc.w	r3, r3, r1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800587c:	4659      	mov	r1, fp
 800587e:	018b      	lsls	r3, r1, #6
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005886:	4651      	mov	r1, sl
 8005888:	018a      	lsls	r2, r1, #6
 800588a:	4651      	mov	r1, sl
 800588c:	ebb2 0801 	subs.w	r8, r2, r1
 8005890:	4659      	mov	r1, fp
 8005892:	eb63 0901 	sbc.w	r9, r3, r1
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	f04f 0300 	mov.w	r3, #0
 800589e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058aa:	4690      	mov	r8, r2
 80058ac:	4699      	mov	r9, r3
 80058ae:	4623      	mov	r3, r4
 80058b0:	eb18 0303 	adds.w	r3, r8, r3
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	462b      	mov	r3, r5
 80058b8:	eb49 0303 	adc.w	r3, r9, r3
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058ca:	4629      	mov	r1, r5
 80058cc:	024b      	lsls	r3, r1, #9
 80058ce:	4621      	mov	r1, r4
 80058d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058d4:	4621      	mov	r1, r4
 80058d6:	024a      	lsls	r2, r1, #9
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058de:	2200      	movs	r2, #0
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058e8:	f7fb f986 	bl	8000bf8 <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4613      	mov	r3, r2
 80058f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f4:	e058      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f6:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	099b      	lsrs	r3, r3, #6
 80058fc:	2200      	movs	r2, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	4611      	mov	r1, r2
 8005902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
 800590c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f04f 0100 	mov.w	r1, #0
 800591c:	0159      	lsls	r1, r3, #5
 800591e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005922:	0150      	lsls	r0, r2, #5
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4641      	mov	r1, r8
 800592a:	ebb2 0a01 	subs.w	sl, r2, r1
 800592e:	4649      	mov	r1, r9
 8005930:	eb63 0b01 	sbc.w	fp, r3, r1
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005948:	ebb2 040a 	subs.w	r4, r2, sl
 800594c:	eb63 050b 	sbc.w	r5, r3, fp
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	00eb      	lsls	r3, r5, #3
 800595a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800595e:	00e2      	lsls	r2, r4, #3
 8005960:	4614      	mov	r4, r2
 8005962:	461d      	mov	r5, r3
 8005964:	4643      	mov	r3, r8
 8005966:	18e3      	adds	r3, r4, r3
 8005968:	603b      	str	r3, [r7, #0]
 800596a:	464b      	mov	r3, r9
 800596c:	eb45 0303 	adc.w	r3, r5, r3
 8005970:	607b      	str	r3, [r7, #4]
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	f04f 0300 	mov.w	r3, #0
 800597a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800597e:	4629      	mov	r1, r5
 8005980:	028b      	lsls	r3, r1, #10
 8005982:	4621      	mov	r1, r4
 8005984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005988:	4621      	mov	r1, r4
 800598a:	028a      	lsls	r2, r1, #10
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005992:	2200      	movs	r2, #0
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	61fa      	str	r2, [r7, #28]
 8005998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800599c:	f7fb f92c 	bl	8000bf8 <__aeabi_uldivmod>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4613      	mov	r3, r2
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	3301      	adds	r3, #1
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059c2:	e002      	b.n	80059ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <HAL_RCC_GetSysClockFreq+0x204>)
 80059c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3750      	adds	r7, #80	; 0x50
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	007a1200 	.word	0x007a1200

080059e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	20000e14 	.word	0x20000e14

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a00:	f7ff fff0 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0a9b      	lsrs	r3, r3, #10
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	4903      	ldr	r1, [pc, #12]	; (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a12:	5ccb      	ldrb	r3, [r1, r3]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	080085a4 	.word	0x080085a4

08005a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a28:	f7ff ffdc 	bl	80059e4 <HAL_RCC_GetHCLKFreq>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	0b5b      	lsrs	r3, r3, #13
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	4903      	ldr	r1, [pc, #12]	; (8005a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a3a:	5ccb      	ldrb	r3, [r1, r3]
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	080085a4 	.word	0x080085a4

08005a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e03f      	b.n	8005ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fc f9ae 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fd19 	bl	80064c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	4613      	mov	r3, r2
 8005af2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d130      	bne.n	8005b62 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_UART_Transmit_IT+0x26>
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e029      	b.n	8005b64 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <HAL_UART_Transmit_IT+0x38>
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e022      	b.n	8005b64 <HAL_UART_Transmit_IT+0x7e>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	88fa      	ldrh	r2, [r7, #6]
 8005b36:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2221      	movs	r2, #33	; 0x21
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b5c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	e000      	b.n	8005b64 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
  }
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d11d      	bne.n	8005bc6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_UART_Receive_IT+0x26>
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e016      	b.n	8005bc8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_UART_Receive_IT+0x38>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e00f      	b.n	8005bc8 <HAL_UART_Receive_IT+0x58>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 faab 	bl	8006118 <UART_Start_Receive_IT>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	e000      	b.n	8005bc8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bc6:	2302      	movs	r3, #2
  }
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b0ba      	sub	sp, #232	; 0xe8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10f      	bne.n	8005c36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <HAL_UART_IRQHandler+0x66>
 8005c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fb8f 	bl	8006352 <UART_Receive_IT>
      return;
 8005c34:	e256      	b.n	80060e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80de 	beq.w	8005dfc <HAL_UART_IRQHandler+0x22c>
 8005c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80d1 	beq.w	8005dfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <HAL_UART_IRQHandler+0xae>
 8005c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d005      	beq.n	8005c7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	f043 0201 	orr.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <HAL_UART_IRQHandler+0xd2>
 8005c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f043 0202 	orr.w	r2, r3, #2
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <HAL_UART_IRQHandler+0xf6>
 8005cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f043 0204 	orr.w	r2, r3, #4
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d011      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x126>
 8005cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d105      	bne.n	8005cea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	f043 0208 	orr.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 81ed 	beq.w	80060da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_UART_IRQHandler+0x14e>
 8005d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fb1a 	bl	8006352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <HAL_UART_IRQHandler+0x17a>
 8005d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d04f      	beq.n	8005dea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fa22 	bl	8006194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b40      	cmp	r3, #64	; 0x40
 8005d5c:	d141      	bne.n	8005de2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3314      	adds	r3, #20
 8005d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1d9      	bne.n	8005d5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d013      	beq.n	8005dda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	4a7d      	ldr	r2, [pc, #500]	; (8005fac <HAL_UART_IRQHandler+0x3dc>)
 8005db8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fc fb95 	bl	80024ee <HAL_DMA_Abort_IT>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d016      	beq.n	8005df8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd8:	e00e      	b.n	8005df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f986 	bl	80060ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de0:	e00a      	b.n	8005df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f982 	bl	80060ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	e006      	b.n	8005df8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f97e 	bl	80060ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005df6:	e170      	b.n	80060da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	bf00      	nop
    return;
 8005dfa:	e16e      	b.n	80060da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f040 814a 	bne.w	800609a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 8143 	beq.w	800609a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 813c 	beq.w	800609a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e22:	2300      	movs	r3, #0
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	f040 80b4 	bne.w	8005fb0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8140 	beq.w	80060de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e66:	429a      	cmp	r2, r3
 8005e68:	f080 8139 	bcs.w	80060de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7e:	f000 8088 	beq.w	8005f92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	330c      	adds	r3, #12
 8005e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1d9      	bne.n	8005e82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3314      	adds	r3, #20
 8005ed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ef2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e1      	bne.n	8005ece <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3314      	adds	r3, #20
 8005f10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3314      	adds	r3, #20
 8005f2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e3      	bne.n	8005f0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f74:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e3      	bne.n	8005f50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fc fa3e 	bl	800240e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f8ac 	bl	8006100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fa8:	e099      	b.n	80060de <HAL_UART_IRQHandler+0x50e>
 8005faa:	bf00      	nop
 8005fac:	0800625b 	.word	0x0800625b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 808b 	beq.w	80060e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8086 	beq.w	80060e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ffa:	647a      	str	r2, [r7, #68]	; 0x44
 8005ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e3      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3314      	adds	r3, #20
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	623b      	str	r3, [r7, #32]
   return(result);
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006032:	633a      	str	r2, [r7, #48]	; 0x30
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e3      	bne.n	800600e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	60fb      	str	r3, [r7, #12]
   return(result);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0310 	bic.w	r3, r3, #16
 800606a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	617b      	str	r3, [r7, #20]
   return(result);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e3      	bne.n	8006054 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800608c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f834 	bl	8006100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006098:	e023      	b.n	80060e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <HAL_UART_IRQHandler+0x4ea>
 80060a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f8e5 	bl	8006282 <UART_Transmit_IT>
    return;
 80060b8:	e014      	b.n	80060e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00e      	beq.n	80060e4 <HAL_UART_IRQHandler+0x514>
 80060c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f925 	bl	8006322 <UART_EndTransmit_IT>
    return;
 80060d8:	e004      	b.n	80060e4 <HAL_UART_IRQHandler+0x514>
    return;
 80060da:	bf00      	nop
 80060dc:	e002      	b.n	80060e4 <HAL_UART_IRQHandler+0x514>
      return;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_UART_IRQHandler+0x514>
      return;
 80060e2:	bf00      	nop
  }
}
 80060e4:	37e8      	adds	r7, #232	; 0xe8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop

080060ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	4613      	mov	r3, r2
 8006124:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	88fa      	ldrh	r2, [r7, #6]
 8006130:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2222      	movs	r2, #34	; 0x22
 8006142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006164:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695a      	ldr	r2, [r3, #20]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0220 	orr.w	r2, r2, #32
 8006184:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b095      	sub	sp, #84	; 0x54
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061bc:	643a      	str	r2, [r7, #64]	; 0x40
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e5      	bne.n	800619c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3314      	adds	r3, #20
 80061d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	61fb      	str	r3, [r7, #28]
   return(result);
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3314      	adds	r3, #20
 80061ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e5      	bne.n	80061d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	2b01      	cmp	r3, #1
 800620a:	d119      	bne.n	8006240 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	60bb      	str	r3, [r7, #8]
   return(result);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f023 0310 	bic.w	r3, r3, #16
 8006222:	647b      	str	r3, [r7, #68]	; 0x44
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800622c:	61ba      	str	r2, [r7, #24]
 800622e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6979      	ldr	r1, [r7, #20]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	613b      	str	r3, [r7, #16]
   return(result);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e5      	bne.n	800620c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800624e:	bf00      	nop
 8006250:	3754      	adds	r7, #84	; 0x54
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff ff39 	bl	80060ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b21      	cmp	r3, #33	; 0x21
 8006294:	d13e      	bne.n	8006314 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629e:	d114      	bne.n	80062ca <UART_Transmit_IT+0x48>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d110      	bne.n	80062ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	1c9a      	adds	r2, r3, #2
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]
 80062c8:	e008      	b.n	80062dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6211      	str	r1, [r2, #32]
 80062d4:	781a      	ldrb	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4619      	mov	r1, r3
 80062ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10f      	bne.n	8006310 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800630e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e000      	b.n	8006316 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006314:	2302      	movs	r3, #2
  }
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006338:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fa12 	bl	800176c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b08c      	sub	sp, #48	; 0x30
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b22      	cmp	r3, #34	; 0x22
 8006364:	f040 80ab 	bne.w	80064be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d117      	bne.n	80063a2 <UART_Receive_IT+0x50>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d113      	bne.n	80063a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006390:	b29a      	uxth	r2, r3
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	1c9a      	adds	r2, r3, #2
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
 80063a0:	e026      	b.n	80063f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d007      	beq.n	80063c6 <UART_Receive_IT+0x74>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <UART_Receive_IT+0x82>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e008      	b.n	80063e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	4619      	mov	r1, r3
 80063fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006400:	2b00      	cmp	r3, #0
 8006402:	d15a      	bne.n	80064ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0220 	bic.w	r2, r2, #32
 8006412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	2b01      	cmp	r3, #1
 8006442:	d135      	bne.n	80064b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f023 0310 	bic.w	r3, r3, #16
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	623a      	str	r2, [r7, #32]
 800646c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	69f9      	ldr	r1, [r7, #28]
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	61bb      	str	r3, [r7, #24]
   return(result);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b10      	cmp	r3, #16
 800648a:	d10a      	bne.n	80064a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff fe29 	bl	8006100 <HAL_UARTEx_RxEventCallback>
 80064ae:	e002      	b.n	80064b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fb f98f 	bl	80017d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e002      	b.n	80064c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3730      	adds	r7, #48	; 0x30
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064cc:	b0c0      	sub	sp, #256	; 0x100
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	68d9      	ldr	r1, [r3, #12]
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	ea40 0301 	orr.w	r3, r0, r1
 80064f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	431a      	orrs	r2, r3
 8006500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	431a      	orrs	r2, r3
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006520:	f021 010c 	bic.w	r1, r1, #12
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800652e:	430b      	orrs	r3, r1
 8006530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	6999      	ldr	r1, [r3, #24]
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	ea40 0301 	orr.w	r3, r0, r1
 800654e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b8f      	ldr	r3, [pc, #572]	; (8006794 <UART_SetConfig+0x2cc>)
 8006558:	429a      	cmp	r2, r3
 800655a:	d005      	beq.n	8006568 <UART_SetConfig+0xa0>
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b8d      	ldr	r3, [pc, #564]	; (8006798 <UART_SetConfig+0x2d0>)
 8006564:	429a      	cmp	r2, r3
 8006566:	d104      	bne.n	8006572 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006568:	f7ff fa5c 	bl	8005a24 <HAL_RCC_GetPCLK2Freq>
 800656c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006570:	e003      	b.n	800657a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006572:	f7ff fa43 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 8006576:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006584:	f040 810c 	bne.w	80067a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800658c:	2200      	movs	r2, #0
 800658e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006592:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006596:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800659a:	4622      	mov	r2, r4
 800659c:	462b      	mov	r3, r5
 800659e:	1891      	adds	r1, r2, r2
 80065a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80065a2:	415b      	adcs	r3, r3
 80065a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065aa:	4621      	mov	r1, r4
 80065ac:	eb12 0801 	adds.w	r8, r2, r1
 80065b0:	4629      	mov	r1, r5
 80065b2:	eb43 0901 	adc.w	r9, r3, r1
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ca:	4690      	mov	r8, r2
 80065cc:	4699      	mov	r9, r3
 80065ce:	4623      	mov	r3, r4
 80065d0:	eb18 0303 	adds.w	r3, r8, r3
 80065d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065d8:	462b      	mov	r3, r5
 80065da:	eb49 0303 	adc.w	r3, r9, r3
 80065de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065f6:	460b      	mov	r3, r1
 80065f8:	18db      	adds	r3, r3, r3
 80065fa:	653b      	str	r3, [r7, #80]	; 0x50
 80065fc:	4613      	mov	r3, r2
 80065fe:	eb42 0303 	adc.w	r3, r2, r3
 8006602:	657b      	str	r3, [r7, #84]	; 0x54
 8006604:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006608:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800660c:	f7fa faf4 	bl	8000bf8 <__aeabi_uldivmod>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4b61      	ldr	r3, [pc, #388]	; (800679c <UART_SetConfig+0x2d4>)
 8006616:	fba3 2302 	umull	r2, r3, r3, r2
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	011c      	lsls	r4, r3, #4
 800661e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006622:	2200      	movs	r2, #0
 8006624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006628:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800662c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	1891      	adds	r1, r2, r2
 8006636:	64b9      	str	r1, [r7, #72]	; 0x48
 8006638:	415b      	adcs	r3, r3
 800663a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800663c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006640:	4641      	mov	r1, r8
 8006642:	eb12 0a01 	adds.w	sl, r2, r1
 8006646:	4649      	mov	r1, r9
 8006648:	eb43 0b01 	adc.w	fp, r3, r1
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006658:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800665c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006660:	4692      	mov	sl, r2
 8006662:	469b      	mov	fp, r3
 8006664:	4643      	mov	r3, r8
 8006666:	eb1a 0303 	adds.w	r3, sl, r3
 800666a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800666e:	464b      	mov	r3, r9
 8006670:	eb4b 0303 	adc.w	r3, fp, r3
 8006674:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006684:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006688:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800668c:	460b      	mov	r3, r1
 800668e:	18db      	adds	r3, r3, r3
 8006690:	643b      	str	r3, [r7, #64]	; 0x40
 8006692:	4613      	mov	r3, r2
 8006694:	eb42 0303 	adc.w	r3, r2, r3
 8006698:	647b      	str	r3, [r7, #68]	; 0x44
 800669a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800669e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066a2:	f7fa faa9 	bl	8000bf8 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	4b3b      	ldr	r3, [pc, #236]	; (800679c <UART_SetConfig+0x2d4>)
 80066ae:	fba3 2301 	umull	r2, r3, r3, r1
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2264      	movs	r2, #100	; 0x64
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	1acb      	subs	r3, r1, r3
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066c2:	4b36      	ldr	r3, [pc, #216]	; (800679c <UART_SetConfig+0x2d4>)
 80066c4:	fba3 2302 	umull	r2, r3, r3, r2
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066d0:	441c      	add	r4, r3
 80066d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066e4:	4642      	mov	r2, r8
 80066e6:	464b      	mov	r3, r9
 80066e8:	1891      	adds	r1, r2, r2
 80066ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80066ec:	415b      	adcs	r3, r3
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066f4:	4641      	mov	r1, r8
 80066f6:	1851      	adds	r1, r2, r1
 80066f8:	6339      	str	r1, [r7, #48]	; 0x30
 80066fa:	4649      	mov	r1, r9
 80066fc:	414b      	adcs	r3, r1
 80066fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800670c:	4659      	mov	r1, fp
 800670e:	00cb      	lsls	r3, r1, #3
 8006710:	4651      	mov	r1, sl
 8006712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006716:	4651      	mov	r1, sl
 8006718:	00ca      	lsls	r2, r1, #3
 800671a:	4610      	mov	r0, r2
 800671c:	4619      	mov	r1, r3
 800671e:	4603      	mov	r3, r0
 8006720:	4642      	mov	r2, r8
 8006722:	189b      	adds	r3, r3, r2
 8006724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006728:	464b      	mov	r3, r9
 800672a:	460a      	mov	r2, r1
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006740:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006744:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006748:	460b      	mov	r3, r1
 800674a:	18db      	adds	r3, r3, r3
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
 800674e:	4613      	mov	r3, r2
 8006750:	eb42 0303 	adc.w	r3, r2, r3
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800675a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800675e:	f7fa fa4b 	bl	8000bf8 <__aeabi_uldivmod>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <UART_SetConfig+0x2d4>)
 8006768:	fba3 1302 	umull	r1, r3, r3, r2
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	2164      	movs	r1, #100	; 0x64
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	3332      	adds	r3, #50	; 0x32
 800677a:	4a08      	ldr	r2, [pc, #32]	; (800679c <UART_SetConfig+0x2d4>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	f003 0207 	and.w	r2, r3, #7
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4422      	add	r2, r4
 800678e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006790:	e106      	b.n	80069a0 <UART_SetConfig+0x4d8>
 8006792:	bf00      	nop
 8006794:	40011000 	.word	0x40011000
 8006798:	40011400 	.word	0x40011400
 800679c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067b2:	4642      	mov	r2, r8
 80067b4:	464b      	mov	r3, r9
 80067b6:	1891      	adds	r1, r2, r2
 80067b8:	6239      	str	r1, [r7, #32]
 80067ba:	415b      	adcs	r3, r3
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
 80067be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067c2:	4641      	mov	r1, r8
 80067c4:	1854      	adds	r4, r2, r1
 80067c6:	4649      	mov	r1, r9
 80067c8:	eb43 0501 	adc.w	r5, r3, r1
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	00eb      	lsls	r3, r5, #3
 80067d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067da:	00e2      	lsls	r2, r4, #3
 80067dc:	4614      	mov	r4, r2
 80067de:	461d      	mov	r5, r3
 80067e0:	4643      	mov	r3, r8
 80067e2:	18e3      	adds	r3, r4, r3
 80067e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067e8:	464b      	mov	r3, r9
 80067ea:	eb45 0303 	adc.w	r3, r5, r3
 80067ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800680e:	4629      	mov	r1, r5
 8006810:	008b      	lsls	r3, r1, #2
 8006812:	4621      	mov	r1, r4
 8006814:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006818:	4621      	mov	r1, r4
 800681a:	008a      	lsls	r2, r1, #2
 800681c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006820:	f7fa f9ea 	bl	8000bf8 <__aeabi_uldivmod>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4b60      	ldr	r3, [pc, #384]	; (80069ac <UART_SetConfig+0x4e4>)
 800682a:	fba3 2302 	umull	r2, r3, r3, r2
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	011c      	lsls	r4, r3, #4
 8006832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006836:	2200      	movs	r2, #0
 8006838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800683c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006840:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006844:	4642      	mov	r2, r8
 8006846:	464b      	mov	r3, r9
 8006848:	1891      	adds	r1, r2, r2
 800684a:	61b9      	str	r1, [r7, #24]
 800684c:	415b      	adcs	r3, r3
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006854:	4641      	mov	r1, r8
 8006856:	1851      	adds	r1, r2, r1
 8006858:	6139      	str	r1, [r7, #16]
 800685a:	4649      	mov	r1, r9
 800685c:	414b      	adcs	r3, r1
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800686c:	4659      	mov	r1, fp
 800686e:	00cb      	lsls	r3, r1, #3
 8006870:	4651      	mov	r1, sl
 8006872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006876:	4651      	mov	r1, sl
 8006878:	00ca      	lsls	r2, r1, #3
 800687a:	4610      	mov	r0, r2
 800687c:	4619      	mov	r1, r3
 800687e:	4603      	mov	r3, r0
 8006880:	4642      	mov	r2, r8
 8006882:	189b      	adds	r3, r3, r2
 8006884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006888:	464b      	mov	r3, r9
 800688a:	460a      	mov	r2, r1
 800688c:	eb42 0303 	adc.w	r3, r2, r3
 8006890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	67bb      	str	r3, [r7, #120]	; 0x78
 800689e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068ac:	4649      	mov	r1, r9
 80068ae:	008b      	lsls	r3, r1, #2
 80068b0:	4641      	mov	r1, r8
 80068b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b6:	4641      	mov	r1, r8
 80068b8:	008a      	lsls	r2, r1, #2
 80068ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068be:	f7fa f99b 	bl	8000bf8 <__aeabi_uldivmod>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4611      	mov	r1, r2
 80068c8:	4b38      	ldr	r3, [pc, #224]	; (80069ac <UART_SetConfig+0x4e4>)
 80068ca:	fba3 2301 	umull	r2, r3, r3, r1
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	2264      	movs	r2, #100	; 0x64
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
 80068d6:	1acb      	subs	r3, r1, r3
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	3332      	adds	r3, #50	; 0x32
 80068dc:	4a33      	ldr	r2, [pc, #204]	; (80069ac <UART_SetConfig+0x4e4>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068e8:	441c      	add	r4, r3
 80068ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ee:	2200      	movs	r2, #0
 80068f0:	673b      	str	r3, [r7, #112]	; 0x70
 80068f2:	677a      	str	r2, [r7, #116]	; 0x74
 80068f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	1891      	adds	r1, r2, r2
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	415b      	adcs	r3, r3
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006908:	4641      	mov	r1, r8
 800690a:	1851      	adds	r1, r2, r1
 800690c:	6039      	str	r1, [r7, #0]
 800690e:	4649      	mov	r1, r9
 8006910:	414b      	adcs	r3, r1
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006920:	4659      	mov	r1, fp
 8006922:	00cb      	lsls	r3, r1, #3
 8006924:	4651      	mov	r1, sl
 8006926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800692a:	4651      	mov	r1, sl
 800692c:	00ca      	lsls	r2, r1, #3
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	4603      	mov	r3, r0
 8006934:	4642      	mov	r2, r8
 8006936:	189b      	adds	r3, r3, r2
 8006938:	66bb      	str	r3, [r7, #104]	; 0x68
 800693a:	464b      	mov	r3, r9
 800693c:	460a      	mov	r2, r1
 800693e:	eb42 0303 	adc.w	r3, r2, r3
 8006942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	663b      	str	r3, [r7, #96]	; 0x60
 800694e:	667a      	str	r2, [r7, #100]	; 0x64
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800695c:	4649      	mov	r1, r9
 800695e:	008b      	lsls	r3, r1, #2
 8006960:	4641      	mov	r1, r8
 8006962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006966:	4641      	mov	r1, r8
 8006968:	008a      	lsls	r2, r1, #2
 800696a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800696e:	f7fa f943 	bl	8000bf8 <__aeabi_uldivmod>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <UART_SetConfig+0x4e4>)
 8006978:	fba3 1302 	umull	r1, r3, r3, r2
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	2164      	movs	r1, #100	; 0x64
 8006980:	fb01 f303 	mul.w	r3, r1, r3
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	3332      	adds	r3, #50	; 0x32
 800698a:	4a08      	ldr	r2, [pc, #32]	; (80069ac <UART_SetConfig+0x4e4>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	f003 020f 	and.w	r2, r3, #15
 8006996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4422      	add	r2, r4
 800699e:	609a      	str	r2, [r3, #8]
}
 80069a0:	bf00      	nop
 80069a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069a6:	46bd      	mov	sp, r7
 80069a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ac:	51eb851f 	.word	0x51eb851f

080069b0 <atoi>:
 80069b0:	220a      	movs	r2, #10
 80069b2:	2100      	movs	r1, #0
 80069b4:	f000 b882 	b.w	8006abc <strtol>

080069b8 <_strtol_l.constprop.0>:
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069be:	d001      	beq.n	80069c4 <_strtol_l.constprop.0+0xc>
 80069c0:	2b24      	cmp	r3, #36	; 0x24
 80069c2:	d906      	bls.n	80069d2 <_strtol_l.constprop.0+0x1a>
 80069c4:	f000 fa9a 	bl	8006efc <__errno>
 80069c8:	2316      	movs	r3, #22
 80069ca:	6003      	str	r3, [r0, #0]
 80069cc:	2000      	movs	r0, #0
 80069ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006ab8 <_strtol_l.constprop.0+0x100>
 80069d6:	460d      	mov	r5, r1
 80069d8:	462e      	mov	r6, r5
 80069da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80069e2:	f017 0708 	ands.w	r7, r7, #8
 80069e6:	d1f7      	bne.n	80069d8 <_strtol_l.constprop.0+0x20>
 80069e8:	2c2d      	cmp	r4, #45	; 0x2d
 80069ea:	d132      	bne.n	8006a52 <_strtol_l.constprop.0+0x9a>
 80069ec:	782c      	ldrb	r4, [r5, #0]
 80069ee:	2701      	movs	r7, #1
 80069f0:	1cb5      	adds	r5, r6, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d05b      	beq.n	8006aae <_strtol_l.constprop.0+0xf6>
 80069f6:	2b10      	cmp	r3, #16
 80069f8:	d109      	bne.n	8006a0e <_strtol_l.constprop.0+0x56>
 80069fa:	2c30      	cmp	r4, #48	; 0x30
 80069fc:	d107      	bne.n	8006a0e <_strtol_l.constprop.0+0x56>
 80069fe:	782c      	ldrb	r4, [r5, #0]
 8006a00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006a04:	2c58      	cmp	r4, #88	; 0x58
 8006a06:	d14d      	bne.n	8006aa4 <_strtol_l.constprop.0+0xec>
 8006a08:	786c      	ldrb	r4, [r5, #1]
 8006a0a:	2310      	movs	r3, #16
 8006a0c:	3502      	adds	r5, #2
 8006a0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006a12:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a16:	f04f 0e00 	mov.w	lr, #0
 8006a1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8006a1e:	4676      	mov	r6, lr
 8006a20:	fb03 8a19 	mls	sl, r3, r9, r8
 8006a24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006a28:	f1bc 0f09 	cmp.w	ip, #9
 8006a2c:	d816      	bhi.n	8006a5c <_strtol_l.constprop.0+0xa4>
 8006a2e:	4664      	mov	r4, ip
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	dd24      	ble.n	8006a7e <_strtol_l.constprop.0+0xc6>
 8006a34:	f1be 3fff 	cmp.w	lr, #4294967295
 8006a38:	d008      	beq.n	8006a4c <_strtol_l.constprop.0+0x94>
 8006a3a:	45b1      	cmp	r9, r6
 8006a3c:	d31c      	bcc.n	8006a78 <_strtol_l.constprop.0+0xc0>
 8006a3e:	d101      	bne.n	8006a44 <_strtol_l.constprop.0+0x8c>
 8006a40:	45a2      	cmp	sl, r4
 8006a42:	db19      	blt.n	8006a78 <_strtol_l.constprop.0+0xc0>
 8006a44:	fb06 4603 	mla	r6, r6, r3, r4
 8006a48:	f04f 0e01 	mov.w	lr, #1
 8006a4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a50:	e7e8      	b.n	8006a24 <_strtol_l.constprop.0+0x6c>
 8006a52:	2c2b      	cmp	r4, #43	; 0x2b
 8006a54:	bf04      	itt	eq
 8006a56:	782c      	ldrbeq	r4, [r5, #0]
 8006a58:	1cb5      	addeq	r5, r6, #2
 8006a5a:	e7ca      	b.n	80069f2 <_strtol_l.constprop.0+0x3a>
 8006a5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006a60:	f1bc 0f19 	cmp.w	ip, #25
 8006a64:	d801      	bhi.n	8006a6a <_strtol_l.constprop.0+0xb2>
 8006a66:	3c37      	subs	r4, #55	; 0x37
 8006a68:	e7e2      	b.n	8006a30 <_strtol_l.constprop.0+0x78>
 8006a6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a6e:	f1bc 0f19 	cmp.w	ip, #25
 8006a72:	d804      	bhi.n	8006a7e <_strtol_l.constprop.0+0xc6>
 8006a74:	3c57      	subs	r4, #87	; 0x57
 8006a76:	e7db      	b.n	8006a30 <_strtol_l.constprop.0+0x78>
 8006a78:	f04f 3eff 	mov.w	lr, #4294967295
 8006a7c:	e7e6      	b.n	8006a4c <_strtol_l.constprop.0+0x94>
 8006a7e:	f1be 3fff 	cmp.w	lr, #4294967295
 8006a82:	d105      	bne.n	8006a90 <_strtol_l.constprop.0+0xd8>
 8006a84:	2322      	movs	r3, #34	; 0x22
 8006a86:	6003      	str	r3, [r0, #0]
 8006a88:	4646      	mov	r6, r8
 8006a8a:	b942      	cbnz	r2, 8006a9e <_strtol_l.constprop.0+0xe6>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	e79e      	b.n	80069ce <_strtol_l.constprop.0+0x16>
 8006a90:	b107      	cbz	r7, 8006a94 <_strtol_l.constprop.0+0xdc>
 8006a92:	4276      	negs	r6, r6
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	d0f9      	beq.n	8006a8c <_strtol_l.constprop.0+0xd4>
 8006a98:	f1be 0f00 	cmp.w	lr, #0
 8006a9c:	d000      	beq.n	8006aa0 <_strtol_l.constprop.0+0xe8>
 8006a9e:	1e69      	subs	r1, r5, #1
 8006aa0:	6011      	str	r1, [r2, #0]
 8006aa2:	e7f3      	b.n	8006a8c <_strtol_l.constprop.0+0xd4>
 8006aa4:	2430      	movs	r4, #48	; 0x30
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1b1      	bne.n	8006a0e <_strtol_l.constprop.0+0x56>
 8006aaa:	2308      	movs	r3, #8
 8006aac:	e7af      	b.n	8006a0e <_strtol_l.constprop.0+0x56>
 8006aae:	2c30      	cmp	r4, #48	; 0x30
 8006ab0:	d0a5      	beq.n	80069fe <_strtol_l.constprop.0+0x46>
 8006ab2:	230a      	movs	r3, #10
 8006ab4:	e7ab      	b.n	8006a0e <_strtol_l.constprop.0+0x56>
 8006ab6:	bf00      	nop
 8006ab8:	080085ad 	.word	0x080085ad

08006abc <strtol>:
 8006abc:	4613      	mov	r3, r2
 8006abe:	460a      	mov	r2, r1
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	4802      	ldr	r0, [pc, #8]	; (8006acc <strtol+0x10>)
 8006ac4:	6800      	ldr	r0, [r0, #0]
 8006ac6:	f7ff bf77 	b.w	80069b8 <_strtol_l.constprop.0>
 8006aca:	bf00      	nop
 8006acc:	20000e78 	.word	0x20000e78

08006ad0 <std>:
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8006ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ade:	6083      	str	r3, [r0, #8]
 8006ae0:	8181      	strh	r1, [r0, #12]
 8006ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae4:	81c2      	strh	r2, [r0, #14]
 8006ae6:	6183      	str	r3, [r0, #24]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	2208      	movs	r2, #8
 8006aec:	305c      	adds	r0, #92	; 0x5c
 8006aee:	f000 f935 	bl	8006d5c <memset>
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <std+0x58>)
 8006af4:	6263      	str	r3, [r4, #36]	; 0x24
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <std+0x5c>)
 8006af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <std+0x60>)
 8006afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <std+0x64>)
 8006b00:	6323      	str	r3, [r4, #48]	; 0x30
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <std+0x68>)
 8006b04:	6224      	str	r4, [r4, #32]
 8006b06:	429c      	cmp	r4, r3
 8006b08:	d006      	beq.n	8006b18 <std+0x48>
 8006b0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b0e:	4294      	cmp	r4, r2
 8006b10:	d002      	beq.n	8006b18 <std+0x48>
 8006b12:	33d0      	adds	r3, #208	; 0xd0
 8006b14:	429c      	cmp	r4, r3
 8006b16:	d105      	bne.n	8006b24 <std+0x54>
 8006b18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b20:	f000 ba16 	b.w	8006f50 <__retarget_lock_init_recursive>
 8006b24:	bd10      	pop	{r4, pc}
 8006b26:	bf00      	nop
 8006b28:	08006c95 	.word	0x08006c95
 8006b2c:	08006cb7 	.word	0x08006cb7
 8006b30:	08006cef 	.word	0x08006cef
 8006b34:	08006d13 	.word	0x08006d13
 8006b38:	2000174c 	.word	0x2000174c

08006b3c <stdio_exit_handler>:
 8006b3c:	4a02      	ldr	r2, [pc, #8]	; (8006b48 <stdio_exit_handler+0xc>)
 8006b3e:	4903      	ldr	r1, [pc, #12]	; (8006b4c <stdio_exit_handler+0x10>)
 8006b40:	4803      	ldr	r0, [pc, #12]	; (8006b50 <stdio_exit_handler+0x14>)
 8006b42:	f000 b869 	b.w	8006c18 <_fwalk_sglue>
 8006b46:	bf00      	nop
 8006b48:	20000e20 	.word	0x20000e20
 8006b4c:	08007871 	.word	0x08007871
 8006b50:	20000e2c 	.word	0x20000e2c

08006b54 <cleanup_stdio>:
 8006b54:	6841      	ldr	r1, [r0, #4]
 8006b56:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <cleanup_stdio+0x34>)
 8006b58:	4299      	cmp	r1, r3
 8006b5a:	b510      	push	{r4, lr}
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	d001      	beq.n	8006b64 <cleanup_stdio+0x10>
 8006b60:	f000 fe86 	bl	8007870 <_fflush_r>
 8006b64:	68a1      	ldr	r1, [r4, #8]
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <cleanup_stdio+0x38>)
 8006b68:	4299      	cmp	r1, r3
 8006b6a:	d002      	beq.n	8006b72 <cleanup_stdio+0x1e>
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fe7f 	bl	8007870 <_fflush_r>
 8006b72:	68e1      	ldr	r1, [r4, #12]
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <cleanup_stdio+0x3c>)
 8006b76:	4299      	cmp	r1, r3
 8006b78:	d004      	beq.n	8006b84 <cleanup_stdio+0x30>
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b80:	f000 be76 	b.w	8007870 <_fflush_r>
 8006b84:	bd10      	pop	{r4, pc}
 8006b86:	bf00      	nop
 8006b88:	2000174c 	.word	0x2000174c
 8006b8c:	200017b4 	.word	0x200017b4
 8006b90:	2000181c 	.word	0x2000181c

08006b94 <global_stdio_init.part.0>:
 8006b94:	b510      	push	{r4, lr}
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <global_stdio_init.part.0+0x30>)
 8006b98:	4c0b      	ldr	r4, [pc, #44]	; (8006bc8 <global_stdio_init.part.0+0x34>)
 8006b9a:	4a0c      	ldr	r2, [pc, #48]	; (8006bcc <global_stdio_init.part.0+0x38>)
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2104      	movs	r1, #4
 8006ba4:	f7ff ff94 	bl	8006ad0 <std>
 8006ba8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bac:	2201      	movs	r2, #1
 8006bae:	2109      	movs	r1, #9
 8006bb0:	f7ff ff8e 	bl	8006ad0 <std>
 8006bb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006bb8:	2202      	movs	r2, #2
 8006bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bbe:	2112      	movs	r1, #18
 8006bc0:	f7ff bf86 	b.w	8006ad0 <std>
 8006bc4:	20001884 	.word	0x20001884
 8006bc8:	2000174c 	.word	0x2000174c
 8006bcc:	08006b3d 	.word	0x08006b3d

08006bd0 <__sfp_lock_acquire>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sfp_lock_acquire+0x8>)
 8006bd2:	f000 b9be 	b.w	8006f52 <__retarget_lock_acquire_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	2000188d 	.word	0x2000188d

08006bdc <__sfp_lock_release>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	; (8006be4 <__sfp_lock_release+0x8>)
 8006bde:	f000 b9b9 	b.w	8006f54 <__retarget_lock_release_recursive>
 8006be2:	bf00      	nop
 8006be4:	2000188d 	.word	0x2000188d

08006be8 <__sinit>:
 8006be8:	b510      	push	{r4, lr}
 8006bea:	4604      	mov	r4, r0
 8006bec:	f7ff fff0 	bl	8006bd0 <__sfp_lock_acquire>
 8006bf0:	6a23      	ldr	r3, [r4, #32]
 8006bf2:	b11b      	cbz	r3, 8006bfc <__sinit+0x14>
 8006bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf8:	f7ff bff0 	b.w	8006bdc <__sfp_lock_release>
 8006bfc:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <__sinit+0x28>)
 8006bfe:	6223      	str	r3, [r4, #32]
 8006c00:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <__sinit+0x2c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1f5      	bne.n	8006bf4 <__sinit+0xc>
 8006c08:	f7ff ffc4 	bl	8006b94 <global_stdio_init.part.0>
 8006c0c:	e7f2      	b.n	8006bf4 <__sinit+0xc>
 8006c0e:	bf00      	nop
 8006c10:	08006b55 	.word	0x08006b55
 8006c14:	20001884 	.word	0x20001884

08006c18 <_fwalk_sglue>:
 8006c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	4688      	mov	r8, r1
 8006c20:	4614      	mov	r4, r2
 8006c22:	2600      	movs	r6, #0
 8006c24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c28:	f1b9 0901 	subs.w	r9, r9, #1
 8006c2c:	d505      	bpl.n	8006c3a <_fwalk_sglue+0x22>
 8006c2e:	6824      	ldr	r4, [r4, #0]
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	d1f7      	bne.n	8006c24 <_fwalk_sglue+0xc>
 8006c34:	4630      	mov	r0, r6
 8006c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c3a:	89ab      	ldrh	r3, [r5, #12]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d907      	bls.n	8006c50 <_fwalk_sglue+0x38>
 8006c40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c44:	3301      	adds	r3, #1
 8006c46:	d003      	beq.n	8006c50 <_fwalk_sglue+0x38>
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	47c0      	blx	r8
 8006c4e:	4306      	orrs	r6, r0
 8006c50:	3568      	adds	r5, #104	; 0x68
 8006c52:	e7e9      	b.n	8006c28 <_fwalk_sglue+0x10>

08006c54 <siprintf>:
 8006c54:	b40e      	push	{r1, r2, r3}
 8006c56:	b500      	push	{lr}
 8006c58:	b09c      	sub	sp, #112	; 0x70
 8006c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	9006      	str	r0, [sp, #24]
 8006c60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c64:	4809      	ldr	r0, [pc, #36]	; (8006c8c <siprintf+0x38>)
 8006c66:	9107      	str	r1, [sp, #28]
 8006c68:	9104      	str	r1, [sp, #16]
 8006c6a:	4909      	ldr	r1, [pc, #36]	; (8006c90 <siprintf+0x3c>)
 8006c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c70:	9105      	str	r1, [sp, #20]
 8006c72:	6800      	ldr	r0, [r0, #0]
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	a902      	add	r1, sp, #8
 8006c78:	f000 fae6 	bl	8007248 <_svfiprintf_r>
 8006c7c:	9b02      	ldr	r3, [sp, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	b01c      	add	sp, #112	; 0x70
 8006c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c88:	b003      	add	sp, #12
 8006c8a:	4770      	bx	lr
 8006c8c:	20000e78 	.word	0x20000e78
 8006c90:	ffff0208 	.word	0xffff0208

08006c94 <__sread>:
 8006c94:	b510      	push	{r4, lr}
 8006c96:	460c      	mov	r4, r1
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	f000 f90a 	bl	8006eb4 <_read_r>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	bfab      	itete	ge
 8006ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ca8:	181b      	addge	r3, r3, r0
 8006caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cae:	bfac      	ite	ge
 8006cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cb2:	81a3      	strhlt	r3, [r4, #12]
 8006cb4:	bd10      	pop	{r4, pc}

08006cb6 <__swrite>:
 8006cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cba:	461f      	mov	r7, r3
 8006cbc:	898b      	ldrh	r3, [r1, #12]
 8006cbe:	05db      	lsls	r3, r3, #23
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	d505      	bpl.n	8006cd4 <__swrite+0x1e>
 8006cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ccc:	2302      	movs	r3, #2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f000 f8de 	bl	8006e90 <_lseek_r>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cea:	f000 b8f5 	b.w	8006ed8 <_write_r>

08006cee <__sseek>:
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf6:	f000 f8cb 	bl	8006e90 <_lseek_r>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	89a3      	ldrh	r3, [r4, #12]
 8006cfe:	bf15      	itete	ne
 8006d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d0a:	81a3      	strheq	r3, [r4, #12]
 8006d0c:	bf18      	it	ne
 8006d0e:	81a3      	strhne	r3, [r4, #12]
 8006d10:	bd10      	pop	{r4, pc}

08006d12 <__sclose>:
 8006d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d16:	f000 b8ab 	b.w	8006e70 <_close_r>
	...

08006d1c <_vsiprintf_r>:
 8006d1c:	b500      	push	{lr}
 8006d1e:	b09b      	sub	sp, #108	; 0x6c
 8006d20:	9100      	str	r1, [sp, #0]
 8006d22:	9104      	str	r1, [sp, #16]
 8006d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d28:	9105      	str	r1, [sp, #20]
 8006d2a:	9102      	str	r1, [sp, #8]
 8006d2c:	4905      	ldr	r1, [pc, #20]	; (8006d44 <_vsiprintf_r+0x28>)
 8006d2e:	9103      	str	r1, [sp, #12]
 8006d30:	4669      	mov	r1, sp
 8006d32:	f000 fa89 	bl	8007248 <_svfiprintf_r>
 8006d36:	9b00      	ldr	r3, [sp, #0]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	b01b      	add	sp, #108	; 0x6c
 8006d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d42:	bf00      	nop
 8006d44:	ffff0208 	.word	0xffff0208

08006d48 <vsiprintf>:
 8006d48:	4613      	mov	r3, r2
 8006d4a:	460a      	mov	r2, r1
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	4802      	ldr	r0, [pc, #8]	; (8006d58 <vsiprintf+0x10>)
 8006d50:	6800      	ldr	r0, [r0, #0]
 8006d52:	f7ff bfe3 	b.w	8006d1c <_vsiprintf_r>
 8006d56:	bf00      	nop
 8006d58:	20000e78 	.word	0x20000e78

08006d5c <memset>:
 8006d5c:	4402      	add	r2, r0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d100      	bne.n	8006d66 <memset+0xa>
 8006d64:	4770      	bx	lr
 8006d66:	f803 1b01 	strb.w	r1, [r3], #1
 8006d6a:	e7f9      	b.n	8006d60 <memset+0x4>

08006d6c <strncmp>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	b16a      	cbz	r2, 8006d8c <strncmp+0x20>
 8006d70:	3901      	subs	r1, #1
 8006d72:	1884      	adds	r4, r0, r2
 8006d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d103      	bne.n	8006d88 <strncmp+0x1c>
 8006d80:	42a0      	cmp	r0, r4
 8006d82:	d001      	beq.n	8006d88 <strncmp+0x1c>
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d1f5      	bne.n	8006d74 <strncmp+0x8>
 8006d88:	1ad0      	subs	r0, r2, r3
 8006d8a:	bd10      	pop	{r4, pc}
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	e7fc      	b.n	8006d8a <strncmp+0x1e>

08006d90 <strncpy>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	3901      	subs	r1, #1
 8006d94:	4603      	mov	r3, r0
 8006d96:	b132      	cbz	r2, 8006da6 <strncpy+0x16>
 8006d98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d9c:	f803 4b01 	strb.w	r4, [r3], #1
 8006da0:	3a01      	subs	r2, #1
 8006da2:	2c00      	cmp	r4, #0
 8006da4:	d1f7      	bne.n	8006d96 <strncpy+0x6>
 8006da6:	441a      	add	r2, r3
 8006da8:	2100      	movs	r1, #0
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d100      	bne.n	8006db0 <strncpy+0x20>
 8006dae:	bd10      	pop	{r4, pc}
 8006db0:	f803 1b01 	strb.w	r1, [r3], #1
 8006db4:	e7f9      	b.n	8006daa <strncpy+0x1a>
	...

08006db8 <strtok>:
 8006db8:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <strtok+0x5c>)
 8006dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dbc:	681e      	ldr	r6, [r3, #0]
 8006dbe:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	b9fc      	cbnz	r4, 8006e04 <strtok+0x4c>
 8006dc4:	2050      	movs	r0, #80	; 0x50
 8006dc6:	9101      	str	r1, [sp, #4]
 8006dc8:	f000 f930 	bl	800702c <malloc>
 8006dcc:	9901      	ldr	r1, [sp, #4]
 8006dce:	6470      	str	r0, [r6, #68]	; 0x44
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	b920      	cbnz	r0, 8006dde <strtok+0x26>
 8006dd4:	4b10      	ldr	r3, [pc, #64]	; (8006e18 <strtok+0x60>)
 8006dd6:	4811      	ldr	r0, [pc, #68]	; (8006e1c <strtok+0x64>)
 8006dd8:	215b      	movs	r1, #91	; 0x5b
 8006dda:	f000 f8bd 	bl	8006f58 <__assert_func>
 8006dde:	e9c0 4400 	strd	r4, r4, [r0]
 8006de2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006de6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006dea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006dee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006df2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006df6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006dfa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006dfe:	6184      	str	r4, [r0, #24]
 8006e00:	7704      	strb	r4, [r0, #28]
 8006e02:	6244      	str	r4, [r0, #36]	; 0x24
 8006e04:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006e06:	2301      	movs	r3, #1
 8006e08:	4628      	mov	r0, r5
 8006e0a:	b002      	add	sp, #8
 8006e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e10:	f000 b806 	b.w	8006e20 <__strtok_r>
 8006e14:	20000e78 	.word	0x20000e78
 8006e18:	080086ad 	.word	0x080086ad
 8006e1c:	080086c4 	.word	0x080086c4

08006e20 <__strtok_r>:
 8006e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e22:	b908      	cbnz	r0, 8006e28 <__strtok_r+0x8>
 8006e24:	6810      	ldr	r0, [r2, #0]
 8006e26:	b188      	cbz	r0, 8006e4c <__strtok_r+0x2c>
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006e30:	460f      	mov	r7, r1
 8006e32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006e36:	b91e      	cbnz	r6, 8006e40 <__strtok_r+0x20>
 8006e38:	b965      	cbnz	r5, 8006e54 <__strtok_r+0x34>
 8006e3a:	6015      	str	r5, [r2, #0]
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	e005      	b.n	8006e4c <__strtok_r+0x2c>
 8006e40:	42b5      	cmp	r5, r6
 8006e42:	d1f6      	bne.n	8006e32 <__strtok_r+0x12>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f0      	bne.n	8006e2a <__strtok_r+0xa>
 8006e48:	6014      	str	r4, [r2, #0]
 8006e4a:	7003      	strb	r3, [r0, #0]
 8006e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e4e:	461c      	mov	r4, r3
 8006e50:	e00c      	b.n	8006e6c <__strtok_r+0x4c>
 8006e52:	b915      	cbnz	r5, 8006e5a <__strtok_r+0x3a>
 8006e54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e58:	460e      	mov	r6, r1
 8006e5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006e5e:	42ab      	cmp	r3, r5
 8006e60:	d1f7      	bne.n	8006e52 <__strtok_r+0x32>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f3      	beq.n	8006e4e <__strtok_r+0x2e>
 8006e66:	2300      	movs	r3, #0
 8006e68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e6c:	6014      	str	r4, [r2, #0]
 8006e6e:	e7ed      	b.n	8006e4c <__strtok_r+0x2c>

08006e70 <_close_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d06      	ldr	r5, [pc, #24]	; (8006e8c <_close_r+0x1c>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	602b      	str	r3, [r5, #0]
 8006e7c:	f7fb f89d 	bl	8001fba <_close>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_close_r+0x1a>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_close_r+0x1a>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20001888 	.word	0x20001888

08006e90 <_lseek_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4d07      	ldr	r5, [pc, #28]	; (8006eb0 <_lseek_r+0x20>)
 8006e94:	4604      	mov	r4, r0
 8006e96:	4608      	mov	r0, r1
 8006e98:	4611      	mov	r1, r2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fb f8b2 	bl	8002008 <_lseek>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_lseek_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_lseek_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	20001888 	.word	0x20001888

08006eb4 <_read_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	; (8006ed4 <_read_r+0x20>)
 8006eb8:	4604      	mov	r4, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7fb f840 	bl	8001f48 <_read>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_read_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_read_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	20001888 	.word	0x20001888

08006ed8 <_write_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d07      	ldr	r5, [pc, #28]	; (8006ef8 <_write_r+0x20>)
 8006edc:	4604      	mov	r4, r0
 8006ede:	4608      	mov	r0, r1
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	602a      	str	r2, [r5, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f7fb f84b 	bl	8001f82 <_write>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_write_r+0x1e>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_write_r+0x1e>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20001888 	.word	0x20001888

08006efc <__errno>:
 8006efc:	4b01      	ldr	r3, [pc, #4]	; (8006f04 <__errno+0x8>)
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000e78 	.word	0x20000e78

08006f08 <__libc_init_array>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	4d0d      	ldr	r5, [pc, #52]	; (8006f40 <__libc_init_array+0x38>)
 8006f0c:	4c0d      	ldr	r4, [pc, #52]	; (8006f44 <__libc_init_array+0x3c>)
 8006f0e:	1b64      	subs	r4, r4, r5
 8006f10:	10a4      	asrs	r4, r4, #2
 8006f12:	2600      	movs	r6, #0
 8006f14:	42a6      	cmp	r6, r4
 8006f16:	d109      	bne.n	8006f2c <__libc_init_array+0x24>
 8006f18:	4d0b      	ldr	r5, [pc, #44]	; (8006f48 <__libc_init_array+0x40>)
 8006f1a:	4c0c      	ldr	r4, [pc, #48]	; (8006f4c <__libc_init_array+0x44>)
 8006f1c:	f001 fa8a 	bl	8008434 <_init>
 8006f20:	1b64      	subs	r4, r4, r5
 8006f22:	10a4      	asrs	r4, r4, #2
 8006f24:	2600      	movs	r6, #0
 8006f26:	42a6      	cmp	r6, r4
 8006f28:	d105      	bne.n	8006f36 <__libc_init_array+0x2e>
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f30:	4798      	blx	r3
 8006f32:	3601      	adds	r6, #1
 8006f34:	e7ee      	b.n	8006f14 <__libc_init_array+0xc>
 8006f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3a:	4798      	blx	r3
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	e7f2      	b.n	8006f26 <__libc_init_array+0x1e>
 8006f40:	08008798 	.word	0x08008798
 8006f44:	08008798 	.word	0x08008798
 8006f48:	08008798 	.word	0x08008798
 8006f4c:	0800879c 	.word	0x0800879c

08006f50 <__retarget_lock_init_recursive>:
 8006f50:	4770      	bx	lr

08006f52 <__retarget_lock_acquire_recursive>:
 8006f52:	4770      	bx	lr

08006f54 <__retarget_lock_release_recursive>:
 8006f54:	4770      	bx	lr
	...

08006f58 <__assert_func>:
 8006f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f5a:	4614      	mov	r4, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <__assert_func+0x2c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4605      	mov	r5, r0
 8006f64:	68d8      	ldr	r0, [r3, #12]
 8006f66:	b14c      	cbz	r4, 8006f7c <__assert_func+0x24>
 8006f68:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <__assert_func+0x30>)
 8006f6a:	9100      	str	r1, [sp, #0]
 8006f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f70:	4906      	ldr	r1, [pc, #24]	; (8006f8c <__assert_func+0x34>)
 8006f72:	462b      	mov	r3, r5
 8006f74:	f000 fca4 	bl	80078c0 <fiprintf>
 8006f78:	f000 fcec 	bl	8007954 <abort>
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <__assert_func+0x38>)
 8006f7e:	461c      	mov	r4, r3
 8006f80:	e7f3      	b.n	8006f6a <__assert_func+0x12>
 8006f82:	bf00      	nop
 8006f84:	20000e78 	.word	0x20000e78
 8006f88:	0800871e 	.word	0x0800871e
 8006f8c:	0800872b 	.word	0x0800872b
 8006f90:	08008759 	.word	0x08008759

08006f94 <_free_r>:
 8006f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f96:	2900      	cmp	r1, #0
 8006f98:	d044      	beq.n	8007024 <_free_r+0x90>
 8006f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9e:	9001      	str	r0, [sp, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fa6:	bfb8      	it	lt
 8006fa8:	18e4      	addlt	r4, r4, r3
 8006faa:	f000 f8e7 	bl	800717c <__malloc_lock>
 8006fae:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <_free_r+0x94>)
 8006fb0:	9801      	ldr	r0, [sp, #4]
 8006fb2:	6813      	ldr	r3, [r2, #0]
 8006fb4:	b933      	cbnz	r3, 8006fc4 <_free_r+0x30>
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	6014      	str	r4, [r2, #0]
 8006fba:	b003      	add	sp, #12
 8006fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc0:	f000 b8e2 	b.w	8007188 <__malloc_unlock>
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	d908      	bls.n	8006fda <_free_r+0x46>
 8006fc8:	6825      	ldr	r5, [r4, #0]
 8006fca:	1961      	adds	r1, r4, r5
 8006fcc:	428b      	cmp	r3, r1
 8006fce:	bf01      	itttt	eq
 8006fd0:	6819      	ldreq	r1, [r3, #0]
 8006fd2:	685b      	ldreq	r3, [r3, #4]
 8006fd4:	1949      	addeq	r1, r1, r5
 8006fd6:	6021      	streq	r1, [r4, #0]
 8006fd8:	e7ed      	b.n	8006fb6 <_free_r+0x22>
 8006fda:	461a      	mov	r2, r3
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b10b      	cbz	r3, 8006fe4 <_free_r+0x50>
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d9fa      	bls.n	8006fda <_free_r+0x46>
 8006fe4:	6811      	ldr	r1, [r2, #0]
 8006fe6:	1855      	adds	r5, r2, r1
 8006fe8:	42a5      	cmp	r5, r4
 8006fea:	d10b      	bne.n	8007004 <_free_r+0x70>
 8006fec:	6824      	ldr	r4, [r4, #0]
 8006fee:	4421      	add	r1, r4
 8006ff0:	1854      	adds	r4, r2, r1
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	6011      	str	r1, [r2, #0]
 8006ff6:	d1e0      	bne.n	8006fba <_free_r+0x26>
 8006ff8:	681c      	ldr	r4, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	6053      	str	r3, [r2, #4]
 8006ffe:	440c      	add	r4, r1
 8007000:	6014      	str	r4, [r2, #0]
 8007002:	e7da      	b.n	8006fba <_free_r+0x26>
 8007004:	d902      	bls.n	800700c <_free_r+0x78>
 8007006:	230c      	movs	r3, #12
 8007008:	6003      	str	r3, [r0, #0]
 800700a:	e7d6      	b.n	8006fba <_free_r+0x26>
 800700c:	6825      	ldr	r5, [r4, #0]
 800700e:	1961      	adds	r1, r4, r5
 8007010:	428b      	cmp	r3, r1
 8007012:	bf04      	itt	eq
 8007014:	6819      	ldreq	r1, [r3, #0]
 8007016:	685b      	ldreq	r3, [r3, #4]
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	bf04      	itt	eq
 800701c:	1949      	addeq	r1, r1, r5
 800701e:	6021      	streq	r1, [r4, #0]
 8007020:	6054      	str	r4, [r2, #4]
 8007022:	e7ca      	b.n	8006fba <_free_r+0x26>
 8007024:	b003      	add	sp, #12
 8007026:	bd30      	pop	{r4, r5, pc}
 8007028:	20001890 	.word	0x20001890

0800702c <malloc>:
 800702c:	4b02      	ldr	r3, [pc, #8]	; (8007038 <malloc+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f000 b823 	b.w	800707c <_malloc_r>
 8007036:	bf00      	nop
 8007038:	20000e78 	.word	0x20000e78

0800703c <sbrk_aligned>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	4e0e      	ldr	r6, [pc, #56]	; (8007078 <sbrk_aligned+0x3c>)
 8007040:	460c      	mov	r4, r1
 8007042:	6831      	ldr	r1, [r6, #0]
 8007044:	4605      	mov	r5, r0
 8007046:	b911      	cbnz	r1, 800704e <sbrk_aligned+0x12>
 8007048:	f000 fc66 	bl	8007918 <_sbrk_r>
 800704c:	6030      	str	r0, [r6, #0]
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f000 fc61 	bl	8007918 <_sbrk_r>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d00a      	beq.n	8007070 <sbrk_aligned+0x34>
 800705a:	1cc4      	adds	r4, r0, #3
 800705c:	f024 0403 	bic.w	r4, r4, #3
 8007060:	42a0      	cmp	r0, r4
 8007062:	d007      	beq.n	8007074 <sbrk_aligned+0x38>
 8007064:	1a21      	subs	r1, r4, r0
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fc56 	bl	8007918 <_sbrk_r>
 800706c:	3001      	adds	r0, #1
 800706e:	d101      	bne.n	8007074 <sbrk_aligned+0x38>
 8007070:	f04f 34ff 	mov.w	r4, #4294967295
 8007074:	4620      	mov	r0, r4
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	20001894 	.word	0x20001894

0800707c <_malloc_r>:
 800707c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007080:	1ccd      	adds	r5, r1, #3
 8007082:	f025 0503 	bic.w	r5, r5, #3
 8007086:	3508      	adds	r5, #8
 8007088:	2d0c      	cmp	r5, #12
 800708a:	bf38      	it	cc
 800708c:	250c      	movcc	r5, #12
 800708e:	2d00      	cmp	r5, #0
 8007090:	4607      	mov	r7, r0
 8007092:	db01      	blt.n	8007098 <_malloc_r+0x1c>
 8007094:	42a9      	cmp	r1, r5
 8007096:	d905      	bls.n	80070a4 <_malloc_r+0x28>
 8007098:	230c      	movs	r3, #12
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	2600      	movs	r6, #0
 800709e:	4630      	mov	r0, r6
 80070a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007178 <_malloc_r+0xfc>
 80070a8:	f000 f868 	bl	800717c <__malloc_lock>
 80070ac:	f8d8 3000 	ldr.w	r3, [r8]
 80070b0:	461c      	mov	r4, r3
 80070b2:	bb5c      	cbnz	r4, 800710c <_malloc_r+0x90>
 80070b4:	4629      	mov	r1, r5
 80070b6:	4638      	mov	r0, r7
 80070b8:	f7ff ffc0 	bl	800703c <sbrk_aligned>
 80070bc:	1c43      	adds	r3, r0, #1
 80070be:	4604      	mov	r4, r0
 80070c0:	d155      	bne.n	800716e <_malloc_r+0xf2>
 80070c2:	f8d8 4000 	ldr.w	r4, [r8]
 80070c6:	4626      	mov	r6, r4
 80070c8:	2e00      	cmp	r6, #0
 80070ca:	d145      	bne.n	8007158 <_malloc_r+0xdc>
 80070cc:	2c00      	cmp	r4, #0
 80070ce:	d048      	beq.n	8007162 <_malloc_r+0xe6>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	4631      	mov	r1, r6
 80070d4:	4638      	mov	r0, r7
 80070d6:	eb04 0903 	add.w	r9, r4, r3
 80070da:	f000 fc1d 	bl	8007918 <_sbrk_r>
 80070de:	4581      	cmp	r9, r0
 80070e0:	d13f      	bne.n	8007162 <_malloc_r+0xe6>
 80070e2:	6821      	ldr	r1, [r4, #0]
 80070e4:	1a6d      	subs	r5, r5, r1
 80070e6:	4629      	mov	r1, r5
 80070e8:	4638      	mov	r0, r7
 80070ea:	f7ff ffa7 	bl	800703c <sbrk_aligned>
 80070ee:	3001      	adds	r0, #1
 80070f0:	d037      	beq.n	8007162 <_malloc_r+0xe6>
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	442b      	add	r3, r5
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	f8d8 3000 	ldr.w	r3, [r8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d038      	beq.n	8007172 <_malloc_r+0xf6>
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	42a2      	cmp	r2, r4
 8007104:	d12b      	bne.n	800715e <_malloc_r+0xe2>
 8007106:	2200      	movs	r2, #0
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	e00f      	b.n	800712c <_malloc_r+0xb0>
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	1b52      	subs	r2, r2, r5
 8007110:	d41f      	bmi.n	8007152 <_malloc_r+0xd6>
 8007112:	2a0b      	cmp	r2, #11
 8007114:	d917      	bls.n	8007146 <_malloc_r+0xca>
 8007116:	1961      	adds	r1, r4, r5
 8007118:	42a3      	cmp	r3, r4
 800711a:	6025      	str	r5, [r4, #0]
 800711c:	bf18      	it	ne
 800711e:	6059      	strne	r1, [r3, #4]
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	bf08      	it	eq
 8007124:	f8c8 1000 	streq.w	r1, [r8]
 8007128:	5162      	str	r2, [r4, r5]
 800712a:	604b      	str	r3, [r1, #4]
 800712c:	4638      	mov	r0, r7
 800712e:	f104 060b 	add.w	r6, r4, #11
 8007132:	f000 f829 	bl	8007188 <__malloc_unlock>
 8007136:	f026 0607 	bic.w	r6, r6, #7
 800713a:	1d23      	adds	r3, r4, #4
 800713c:	1af2      	subs	r2, r6, r3
 800713e:	d0ae      	beq.n	800709e <_malloc_r+0x22>
 8007140:	1b9b      	subs	r3, r3, r6
 8007142:	50a3      	str	r3, [r4, r2]
 8007144:	e7ab      	b.n	800709e <_malloc_r+0x22>
 8007146:	42a3      	cmp	r3, r4
 8007148:	6862      	ldr	r2, [r4, #4]
 800714a:	d1dd      	bne.n	8007108 <_malloc_r+0x8c>
 800714c:	f8c8 2000 	str.w	r2, [r8]
 8007150:	e7ec      	b.n	800712c <_malloc_r+0xb0>
 8007152:	4623      	mov	r3, r4
 8007154:	6864      	ldr	r4, [r4, #4]
 8007156:	e7ac      	b.n	80070b2 <_malloc_r+0x36>
 8007158:	4634      	mov	r4, r6
 800715a:	6876      	ldr	r6, [r6, #4]
 800715c:	e7b4      	b.n	80070c8 <_malloc_r+0x4c>
 800715e:	4613      	mov	r3, r2
 8007160:	e7cc      	b.n	80070fc <_malloc_r+0x80>
 8007162:	230c      	movs	r3, #12
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	4638      	mov	r0, r7
 8007168:	f000 f80e 	bl	8007188 <__malloc_unlock>
 800716c:	e797      	b.n	800709e <_malloc_r+0x22>
 800716e:	6025      	str	r5, [r4, #0]
 8007170:	e7dc      	b.n	800712c <_malloc_r+0xb0>
 8007172:	605b      	str	r3, [r3, #4]
 8007174:	deff      	udf	#255	; 0xff
 8007176:	bf00      	nop
 8007178:	20001890 	.word	0x20001890

0800717c <__malloc_lock>:
 800717c:	4801      	ldr	r0, [pc, #4]	; (8007184 <__malloc_lock+0x8>)
 800717e:	f7ff bee8 	b.w	8006f52 <__retarget_lock_acquire_recursive>
 8007182:	bf00      	nop
 8007184:	2000188c 	.word	0x2000188c

08007188 <__malloc_unlock>:
 8007188:	4801      	ldr	r0, [pc, #4]	; (8007190 <__malloc_unlock+0x8>)
 800718a:	f7ff bee3 	b.w	8006f54 <__retarget_lock_release_recursive>
 800718e:	bf00      	nop
 8007190:	2000188c 	.word	0x2000188c

08007194 <__ssputs_r>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	688e      	ldr	r6, [r1, #8]
 800719a:	461f      	mov	r7, r3
 800719c:	42be      	cmp	r6, r7
 800719e:	680b      	ldr	r3, [r1, #0]
 80071a0:	4682      	mov	sl, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	4690      	mov	r8, r2
 80071a6:	d82c      	bhi.n	8007202 <__ssputs_r+0x6e>
 80071a8:	898a      	ldrh	r2, [r1, #12]
 80071aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071ae:	d026      	beq.n	80071fe <__ssputs_r+0x6a>
 80071b0:	6965      	ldr	r5, [r4, #20]
 80071b2:	6909      	ldr	r1, [r1, #16]
 80071b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071b8:	eba3 0901 	sub.w	r9, r3, r1
 80071bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071c0:	1c7b      	adds	r3, r7, #1
 80071c2:	444b      	add	r3, r9
 80071c4:	106d      	asrs	r5, r5, #1
 80071c6:	429d      	cmp	r5, r3
 80071c8:	bf38      	it	cc
 80071ca:	461d      	movcc	r5, r3
 80071cc:	0553      	lsls	r3, r2, #21
 80071ce:	d527      	bpl.n	8007220 <__ssputs_r+0x8c>
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7ff ff53 	bl	800707c <_malloc_r>
 80071d6:	4606      	mov	r6, r0
 80071d8:	b360      	cbz	r0, 8007234 <__ssputs_r+0xa0>
 80071da:	6921      	ldr	r1, [r4, #16]
 80071dc:	464a      	mov	r2, r9
 80071de:	f000 fbab 	bl	8007938 <memcpy>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	6126      	str	r6, [r4, #16]
 80071f0:	6165      	str	r5, [r4, #20]
 80071f2:	444e      	add	r6, r9
 80071f4:	eba5 0509 	sub.w	r5, r5, r9
 80071f8:	6026      	str	r6, [r4, #0]
 80071fa:	60a5      	str	r5, [r4, #8]
 80071fc:	463e      	mov	r6, r7
 80071fe:	42be      	cmp	r6, r7
 8007200:	d900      	bls.n	8007204 <__ssputs_r+0x70>
 8007202:	463e      	mov	r6, r7
 8007204:	6820      	ldr	r0, [r4, #0]
 8007206:	4632      	mov	r2, r6
 8007208:	4641      	mov	r1, r8
 800720a:	f000 fb6b 	bl	80078e4 <memmove>
 800720e:	68a3      	ldr	r3, [r4, #8]
 8007210:	1b9b      	subs	r3, r3, r6
 8007212:	60a3      	str	r3, [r4, #8]
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	4433      	add	r3, r6
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	2000      	movs	r0, #0
 800721c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007220:	462a      	mov	r2, r5
 8007222:	f000 fb9e 	bl	8007962 <_realloc_r>
 8007226:	4606      	mov	r6, r0
 8007228:	2800      	cmp	r0, #0
 800722a:	d1e0      	bne.n	80071ee <__ssputs_r+0x5a>
 800722c:	6921      	ldr	r1, [r4, #16]
 800722e:	4650      	mov	r0, sl
 8007230:	f7ff feb0 	bl	8006f94 <_free_r>
 8007234:	230c      	movs	r3, #12
 8007236:	f8ca 3000 	str.w	r3, [sl]
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	f04f 30ff 	mov.w	r0, #4294967295
 8007246:	e7e9      	b.n	800721c <__ssputs_r+0x88>

08007248 <_svfiprintf_r>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	4698      	mov	r8, r3
 800724e:	898b      	ldrh	r3, [r1, #12]
 8007250:	061b      	lsls	r3, r3, #24
 8007252:	b09d      	sub	sp, #116	; 0x74
 8007254:	4607      	mov	r7, r0
 8007256:	460d      	mov	r5, r1
 8007258:	4614      	mov	r4, r2
 800725a:	d50e      	bpl.n	800727a <_svfiprintf_r+0x32>
 800725c:	690b      	ldr	r3, [r1, #16]
 800725e:	b963      	cbnz	r3, 800727a <_svfiprintf_r+0x32>
 8007260:	2140      	movs	r1, #64	; 0x40
 8007262:	f7ff ff0b 	bl	800707c <_malloc_r>
 8007266:	6028      	str	r0, [r5, #0]
 8007268:	6128      	str	r0, [r5, #16]
 800726a:	b920      	cbnz	r0, 8007276 <_svfiprintf_r+0x2e>
 800726c:	230c      	movs	r3, #12
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	f04f 30ff 	mov.w	r0, #4294967295
 8007274:	e0d0      	b.n	8007418 <_svfiprintf_r+0x1d0>
 8007276:	2340      	movs	r3, #64	; 0x40
 8007278:	616b      	str	r3, [r5, #20]
 800727a:	2300      	movs	r3, #0
 800727c:	9309      	str	r3, [sp, #36]	; 0x24
 800727e:	2320      	movs	r3, #32
 8007280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007284:	f8cd 800c 	str.w	r8, [sp, #12]
 8007288:	2330      	movs	r3, #48	; 0x30
 800728a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007430 <_svfiprintf_r+0x1e8>
 800728e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007292:	f04f 0901 	mov.w	r9, #1
 8007296:	4623      	mov	r3, r4
 8007298:	469a      	mov	sl, r3
 800729a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800729e:	b10a      	cbz	r2, 80072a4 <_svfiprintf_r+0x5c>
 80072a0:	2a25      	cmp	r2, #37	; 0x25
 80072a2:	d1f9      	bne.n	8007298 <_svfiprintf_r+0x50>
 80072a4:	ebba 0b04 	subs.w	fp, sl, r4
 80072a8:	d00b      	beq.n	80072c2 <_svfiprintf_r+0x7a>
 80072aa:	465b      	mov	r3, fp
 80072ac:	4622      	mov	r2, r4
 80072ae:	4629      	mov	r1, r5
 80072b0:	4638      	mov	r0, r7
 80072b2:	f7ff ff6f 	bl	8007194 <__ssputs_r>
 80072b6:	3001      	adds	r0, #1
 80072b8:	f000 80a9 	beq.w	800740e <_svfiprintf_r+0x1c6>
 80072bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072be:	445a      	add	r2, fp
 80072c0:	9209      	str	r2, [sp, #36]	; 0x24
 80072c2:	f89a 3000 	ldrb.w	r3, [sl]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 80a1 	beq.w	800740e <_svfiprintf_r+0x1c6>
 80072cc:	2300      	movs	r3, #0
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d6:	f10a 0a01 	add.w	sl, sl, #1
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	9307      	str	r3, [sp, #28]
 80072de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072e2:	931a      	str	r3, [sp, #104]	; 0x68
 80072e4:	4654      	mov	r4, sl
 80072e6:	2205      	movs	r2, #5
 80072e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ec:	4850      	ldr	r0, [pc, #320]	; (8007430 <_svfiprintf_r+0x1e8>)
 80072ee:	f7f8 ff7f 	bl	80001f0 <memchr>
 80072f2:	9a04      	ldr	r2, [sp, #16]
 80072f4:	b9d8      	cbnz	r0, 800732e <_svfiprintf_r+0xe6>
 80072f6:	06d0      	lsls	r0, r2, #27
 80072f8:	bf44      	itt	mi
 80072fa:	2320      	movmi	r3, #32
 80072fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007300:	0711      	lsls	r1, r2, #28
 8007302:	bf44      	itt	mi
 8007304:	232b      	movmi	r3, #43	; 0x2b
 8007306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800730a:	f89a 3000 	ldrb.w	r3, [sl]
 800730e:	2b2a      	cmp	r3, #42	; 0x2a
 8007310:	d015      	beq.n	800733e <_svfiprintf_r+0xf6>
 8007312:	9a07      	ldr	r2, [sp, #28]
 8007314:	4654      	mov	r4, sl
 8007316:	2000      	movs	r0, #0
 8007318:	f04f 0c0a 	mov.w	ip, #10
 800731c:	4621      	mov	r1, r4
 800731e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007322:	3b30      	subs	r3, #48	; 0x30
 8007324:	2b09      	cmp	r3, #9
 8007326:	d94d      	bls.n	80073c4 <_svfiprintf_r+0x17c>
 8007328:	b1b0      	cbz	r0, 8007358 <_svfiprintf_r+0x110>
 800732a:	9207      	str	r2, [sp, #28]
 800732c:	e014      	b.n	8007358 <_svfiprintf_r+0x110>
 800732e:	eba0 0308 	sub.w	r3, r0, r8
 8007332:	fa09 f303 	lsl.w	r3, r9, r3
 8007336:	4313      	orrs	r3, r2
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	46a2      	mov	sl, r4
 800733c:	e7d2      	b.n	80072e4 <_svfiprintf_r+0x9c>
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	1d19      	adds	r1, r3, #4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	9103      	str	r1, [sp, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfbb      	ittet	lt
 800734a:	425b      	neglt	r3, r3
 800734c:	f042 0202 	orrlt.w	r2, r2, #2
 8007350:	9307      	strge	r3, [sp, #28]
 8007352:	9307      	strlt	r3, [sp, #28]
 8007354:	bfb8      	it	lt
 8007356:	9204      	strlt	r2, [sp, #16]
 8007358:	7823      	ldrb	r3, [r4, #0]
 800735a:	2b2e      	cmp	r3, #46	; 0x2e
 800735c:	d10c      	bne.n	8007378 <_svfiprintf_r+0x130>
 800735e:	7863      	ldrb	r3, [r4, #1]
 8007360:	2b2a      	cmp	r3, #42	; 0x2a
 8007362:	d134      	bne.n	80073ce <_svfiprintf_r+0x186>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	1d1a      	adds	r2, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	9203      	str	r2, [sp, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfb8      	it	lt
 8007370:	f04f 33ff 	movlt.w	r3, #4294967295
 8007374:	3402      	adds	r4, #2
 8007376:	9305      	str	r3, [sp, #20]
 8007378:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007440 <_svfiprintf_r+0x1f8>
 800737c:	7821      	ldrb	r1, [r4, #0]
 800737e:	2203      	movs	r2, #3
 8007380:	4650      	mov	r0, sl
 8007382:	f7f8 ff35 	bl	80001f0 <memchr>
 8007386:	b138      	cbz	r0, 8007398 <_svfiprintf_r+0x150>
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	eba0 000a 	sub.w	r0, r0, sl
 800738e:	2240      	movs	r2, #64	; 0x40
 8007390:	4082      	lsls	r2, r0
 8007392:	4313      	orrs	r3, r2
 8007394:	3401      	adds	r4, #1
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739c:	4825      	ldr	r0, [pc, #148]	; (8007434 <_svfiprintf_r+0x1ec>)
 800739e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073a2:	2206      	movs	r2, #6
 80073a4:	f7f8 ff24 	bl	80001f0 <memchr>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d038      	beq.n	800741e <_svfiprintf_r+0x1d6>
 80073ac:	4b22      	ldr	r3, [pc, #136]	; (8007438 <_svfiprintf_r+0x1f0>)
 80073ae:	bb1b      	cbnz	r3, 80073f8 <_svfiprintf_r+0x1b0>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	3307      	adds	r3, #7
 80073b4:	f023 0307 	bic.w	r3, r3, #7
 80073b8:	3308      	adds	r3, #8
 80073ba:	9303      	str	r3, [sp, #12]
 80073bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073be:	4433      	add	r3, r6
 80073c0:	9309      	str	r3, [sp, #36]	; 0x24
 80073c2:	e768      	b.n	8007296 <_svfiprintf_r+0x4e>
 80073c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c8:	460c      	mov	r4, r1
 80073ca:	2001      	movs	r0, #1
 80073cc:	e7a6      	b.n	800731c <_svfiprintf_r+0xd4>
 80073ce:	2300      	movs	r3, #0
 80073d0:	3401      	adds	r4, #1
 80073d2:	9305      	str	r3, [sp, #20]
 80073d4:	4619      	mov	r1, r3
 80073d6:	f04f 0c0a 	mov.w	ip, #10
 80073da:	4620      	mov	r0, r4
 80073dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e0:	3a30      	subs	r2, #48	; 0x30
 80073e2:	2a09      	cmp	r2, #9
 80073e4:	d903      	bls.n	80073ee <_svfiprintf_r+0x1a6>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0c6      	beq.n	8007378 <_svfiprintf_r+0x130>
 80073ea:	9105      	str	r1, [sp, #20]
 80073ec:	e7c4      	b.n	8007378 <_svfiprintf_r+0x130>
 80073ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f2:	4604      	mov	r4, r0
 80073f4:	2301      	movs	r3, #1
 80073f6:	e7f0      	b.n	80073da <_svfiprintf_r+0x192>
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	462a      	mov	r2, r5
 80073fe:	4b0f      	ldr	r3, [pc, #60]	; (800743c <_svfiprintf_r+0x1f4>)
 8007400:	a904      	add	r1, sp, #16
 8007402:	4638      	mov	r0, r7
 8007404:	f3af 8000 	nop.w
 8007408:	1c42      	adds	r2, r0, #1
 800740a:	4606      	mov	r6, r0
 800740c:	d1d6      	bne.n	80073bc <_svfiprintf_r+0x174>
 800740e:	89ab      	ldrh	r3, [r5, #12]
 8007410:	065b      	lsls	r3, r3, #25
 8007412:	f53f af2d 	bmi.w	8007270 <_svfiprintf_r+0x28>
 8007416:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007418:	b01d      	add	sp, #116	; 0x74
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741e:	ab03      	add	r3, sp, #12
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	462a      	mov	r2, r5
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <_svfiprintf_r+0x1f4>)
 8007426:	a904      	add	r1, sp, #16
 8007428:	4638      	mov	r0, r7
 800742a:	f000 f879 	bl	8007520 <_printf_i>
 800742e:	e7eb      	b.n	8007408 <_svfiprintf_r+0x1c0>
 8007430:	0800875a 	.word	0x0800875a
 8007434:	08008764 	.word	0x08008764
 8007438:	00000000 	.word	0x00000000
 800743c:	08007195 	.word	0x08007195
 8007440:	08008760 	.word	0x08008760

08007444 <_printf_common>:
 8007444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007448:	4616      	mov	r6, r2
 800744a:	4699      	mov	r9, r3
 800744c:	688a      	ldr	r2, [r1, #8]
 800744e:	690b      	ldr	r3, [r1, #16]
 8007450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007454:	4293      	cmp	r3, r2
 8007456:	bfb8      	it	lt
 8007458:	4613      	movlt	r3, r2
 800745a:	6033      	str	r3, [r6, #0]
 800745c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007460:	4607      	mov	r7, r0
 8007462:	460c      	mov	r4, r1
 8007464:	b10a      	cbz	r2, 800746a <_printf_common+0x26>
 8007466:	3301      	adds	r3, #1
 8007468:	6033      	str	r3, [r6, #0]
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	0699      	lsls	r1, r3, #26
 800746e:	bf42      	ittt	mi
 8007470:	6833      	ldrmi	r3, [r6, #0]
 8007472:	3302      	addmi	r3, #2
 8007474:	6033      	strmi	r3, [r6, #0]
 8007476:	6825      	ldr	r5, [r4, #0]
 8007478:	f015 0506 	ands.w	r5, r5, #6
 800747c:	d106      	bne.n	800748c <_printf_common+0x48>
 800747e:	f104 0a19 	add.w	sl, r4, #25
 8007482:	68e3      	ldr	r3, [r4, #12]
 8007484:	6832      	ldr	r2, [r6, #0]
 8007486:	1a9b      	subs	r3, r3, r2
 8007488:	42ab      	cmp	r3, r5
 800748a:	dc26      	bgt.n	80074da <_printf_common+0x96>
 800748c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007490:	1e13      	subs	r3, r2, #0
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	bf18      	it	ne
 8007496:	2301      	movne	r3, #1
 8007498:	0692      	lsls	r2, r2, #26
 800749a:	d42b      	bmi.n	80074f4 <_printf_common+0xb0>
 800749c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074a0:	4649      	mov	r1, r9
 80074a2:	4638      	mov	r0, r7
 80074a4:	47c0      	blx	r8
 80074a6:	3001      	adds	r0, #1
 80074a8:	d01e      	beq.n	80074e8 <_printf_common+0xa4>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	f003 0306 	and.w	r3, r3, #6
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	bf02      	ittt	eq
 80074b6:	68e5      	ldreq	r5, [r4, #12]
 80074b8:	6833      	ldreq	r3, [r6, #0]
 80074ba:	1aed      	subeq	r5, r5, r3
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	bf0c      	ite	eq
 80074c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c4:	2500      	movne	r5, #0
 80074c6:	4293      	cmp	r3, r2
 80074c8:	bfc4      	itt	gt
 80074ca:	1a9b      	subgt	r3, r3, r2
 80074cc:	18ed      	addgt	r5, r5, r3
 80074ce:	2600      	movs	r6, #0
 80074d0:	341a      	adds	r4, #26
 80074d2:	42b5      	cmp	r5, r6
 80074d4:	d11a      	bne.n	800750c <_printf_common+0xc8>
 80074d6:	2000      	movs	r0, #0
 80074d8:	e008      	b.n	80074ec <_printf_common+0xa8>
 80074da:	2301      	movs	r3, #1
 80074dc:	4652      	mov	r2, sl
 80074de:	4649      	mov	r1, r9
 80074e0:	4638      	mov	r0, r7
 80074e2:	47c0      	blx	r8
 80074e4:	3001      	adds	r0, #1
 80074e6:	d103      	bne.n	80074f0 <_printf_common+0xac>
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f0:	3501      	adds	r5, #1
 80074f2:	e7c6      	b.n	8007482 <_printf_common+0x3e>
 80074f4:	18e1      	adds	r1, r4, r3
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	2030      	movs	r0, #48	; 0x30
 80074fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074fe:	4422      	add	r2, r4
 8007500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007508:	3302      	adds	r3, #2
 800750a:	e7c7      	b.n	800749c <_printf_common+0x58>
 800750c:	2301      	movs	r3, #1
 800750e:	4622      	mov	r2, r4
 8007510:	4649      	mov	r1, r9
 8007512:	4638      	mov	r0, r7
 8007514:	47c0      	blx	r8
 8007516:	3001      	adds	r0, #1
 8007518:	d0e6      	beq.n	80074e8 <_printf_common+0xa4>
 800751a:	3601      	adds	r6, #1
 800751c:	e7d9      	b.n	80074d2 <_printf_common+0x8e>
	...

08007520 <_printf_i>:
 8007520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	7e0f      	ldrb	r7, [r1, #24]
 8007526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007528:	2f78      	cmp	r7, #120	; 0x78
 800752a:	4691      	mov	r9, r2
 800752c:	4680      	mov	r8, r0
 800752e:	460c      	mov	r4, r1
 8007530:	469a      	mov	sl, r3
 8007532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007536:	d807      	bhi.n	8007548 <_printf_i+0x28>
 8007538:	2f62      	cmp	r7, #98	; 0x62
 800753a:	d80a      	bhi.n	8007552 <_printf_i+0x32>
 800753c:	2f00      	cmp	r7, #0
 800753e:	f000 80d4 	beq.w	80076ea <_printf_i+0x1ca>
 8007542:	2f58      	cmp	r7, #88	; 0x58
 8007544:	f000 80c0 	beq.w	80076c8 <_printf_i+0x1a8>
 8007548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800754c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007550:	e03a      	b.n	80075c8 <_printf_i+0xa8>
 8007552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007556:	2b15      	cmp	r3, #21
 8007558:	d8f6      	bhi.n	8007548 <_printf_i+0x28>
 800755a:	a101      	add	r1, pc, #4	; (adr r1, 8007560 <_printf_i+0x40>)
 800755c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007560:	080075b9 	.word	0x080075b9
 8007564:	080075cd 	.word	0x080075cd
 8007568:	08007549 	.word	0x08007549
 800756c:	08007549 	.word	0x08007549
 8007570:	08007549 	.word	0x08007549
 8007574:	08007549 	.word	0x08007549
 8007578:	080075cd 	.word	0x080075cd
 800757c:	08007549 	.word	0x08007549
 8007580:	08007549 	.word	0x08007549
 8007584:	08007549 	.word	0x08007549
 8007588:	08007549 	.word	0x08007549
 800758c:	080076d1 	.word	0x080076d1
 8007590:	080075f9 	.word	0x080075f9
 8007594:	0800768b 	.word	0x0800768b
 8007598:	08007549 	.word	0x08007549
 800759c:	08007549 	.word	0x08007549
 80075a0:	080076f3 	.word	0x080076f3
 80075a4:	08007549 	.word	0x08007549
 80075a8:	080075f9 	.word	0x080075f9
 80075ac:	08007549 	.word	0x08007549
 80075b0:	08007549 	.word	0x08007549
 80075b4:	08007693 	.word	0x08007693
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	1d1a      	adds	r2, r3, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	602a      	str	r2, [r5, #0]
 80075c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075c8:	2301      	movs	r3, #1
 80075ca:	e09f      	b.n	800770c <_printf_i+0x1ec>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	682b      	ldr	r3, [r5, #0]
 80075d0:	0607      	lsls	r7, r0, #24
 80075d2:	f103 0104 	add.w	r1, r3, #4
 80075d6:	6029      	str	r1, [r5, #0]
 80075d8:	d501      	bpl.n	80075de <_printf_i+0xbe>
 80075da:	681e      	ldr	r6, [r3, #0]
 80075dc:	e003      	b.n	80075e6 <_printf_i+0xc6>
 80075de:	0646      	lsls	r6, r0, #25
 80075e0:	d5fb      	bpl.n	80075da <_printf_i+0xba>
 80075e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	da03      	bge.n	80075f2 <_printf_i+0xd2>
 80075ea:	232d      	movs	r3, #45	; 0x2d
 80075ec:	4276      	negs	r6, r6
 80075ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f2:	485a      	ldr	r0, [pc, #360]	; (800775c <_printf_i+0x23c>)
 80075f4:	230a      	movs	r3, #10
 80075f6:	e012      	b.n	800761e <_printf_i+0xfe>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	6820      	ldr	r0, [r4, #0]
 80075fc:	1d19      	adds	r1, r3, #4
 80075fe:	6029      	str	r1, [r5, #0]
 8007600:	0605      	lsls	r5, r0, #24
 8007602:	d501      	bpl.n	8007608 <_printf_i+0xe8>
 8007604:	681e      	ldr	r6, [r3, #0]
 8007606:	e002      	b.n	800760e <_printf_i+0xee>
 8007608:	0641      	lsls	r1, r0, #25
 800760a:	d5fb      	bpl.n	8007604 <_printf_i+0xe4>
 800760c:	881e      	ldrh	r6, [r3, #0]
 800760e:	4853      	ldr	r0, [pc, #332]	; (800775c <_printf_i+0x23c>)
 8007610:	2f6f      	cmp	r7, #111	; 0x6f
 8007612:	bf0c      	ite	eq
 8007614:	2308      	moveq	r3, #8
 8007616:	230a      	movne	r3, #10
 8007618:	2100      	movs	r1, #0
 800761a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800761e:	6865      	ldr	r5, [r4, #4]
 8007620:	60a5      	str	r5, [r4, #8]
 8007622:	2d00      	cmp	r5, #0
 8007624:	bfa2      	ittt	ge
 8007626:	6821      	ldrge	r1, [r4, #0]
 8007628:	f021 0104 	bicge.w	r1, r1, #4
 800762c:	6021      	strge	r1, [r4, #0]
 800762e:	b90e      	cbnz	r6, 8007634 <_printf_i+0x114>
 8007630:	2d00      	cmp	r5, #0
 8007632:	d04b      	beq.n	80076cc <_printf_i+0x1ac>
 8007634:	4615      	mov	r5, r2
 8007636:	fbb6 f1f3 	udiv	r1, r6, r3
 800763a:	fb03 6711 	mls	r7, r3, r1, r6
 800763e:	5dc7      	ldrb	r7, [r0, r7]
 8007640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007644:	4637      	mov	r7, r6
 8007646:	42bb      	cmp	r3, r7
 8007648:	460e      	mov	r6, r1
 800764a:	d9f4      	bls.n	8007636 <_printf_i+0x116>
 800764c:	2b08      	cmp	r3, #8
 800764e:	d10b      	bne.n	8007668 <_printf_i+0x148>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	07de      	lsls	r6, r3, #31
 8007654:	d508      	bpl.n	8007668 <_printf_i+0x148>
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	6861      	ldr	r1, [r4, #4]
 800765a:	4299      	cmp	r1, r3
 800765c:	bfde      	ittt	le
 800765e:	2330      	movle	r3, #48	; 0x30
 8007660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007664:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007668:	1b52      	subs	r2, r2, r5
 800766a:	6122      	str	r2, [r4, #16]
 800766c:	f8cd a000 	str.w	sl, [sp]
 8007670:	464b      	mov	r3, r9
 8007672:	aa03      	add	r2, sp, #12
 8007674:	4621      	mov	r1, r4
 8007676:	4640      	mov	r0, r8
 8007678:	f7ff fee4 	bl	8007444 <_printf_common>
 800767c:	3001      	adds	r0, #1
 800767e:	d14a      	bne.n	8007716 <_printf_i+0x1f6>
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	b004      	add	sp, #16
 8007686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f043 0320 	orr.w	r3, r3, #32
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	4833      	ldr	r0, [pc, #204]	; (8007760 <_printf_i+0x240>)
 8007694:	2778      	movs	r7, #120	; 0x78
 8007696:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	6829      	ldr	r1, [r5, #0]
 800769e:	061f      	lsls	r7, r3, #24
 80076a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80076a4:	d402      	bmi.n	80076ac <_printf_i+0x18c>
 80076a6:	065f      	lsls	r7, r3, #25
 80076a8:	bf48      	it	mi
 80076aa:	b2b6      	uxthmi	r6, r6
 80076ac:	07df      	lsls	r7, r3, #31
 80076ae:	bf48      	it	mi
 80076b0:	f043 0320 	orrmi.w	r3, r3, #32
 80076b4:	6029      	str	r1, [r5, #0]
 80076b6:	bf48      	it	mi
 80076b8:	6023      	strmi	r3, [r4, #0]
 80076ba:	b91e      	cbnz	r6, 80076c4 <_printf_i+0x1a4>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	f023 0320 	bic.w	r3, r3, #32
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	2310      	movs	r3, #16
 80076c6:	e7a7      	b.n	8007618 <_printf_i+0xf8>
 80076c8:	4824      	ldr	r0, [pc, #144]	; (800775c <_printf_i+0x23c>)
 80076ca:	e7e4      	b.n	8007696 <_printf_i+0x176>
 80076cc:	4615      	mov	r5, r2
 80076ce:	e7bd      	b.n	800764c <_printf_i+0x12c>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	6826      	ldr	r6, [r4, #0]
 80076d4:	6961      	ldr	r1, [r4, #20]
 80076d6:	1d18      	adds	r0, r3, #4
 80076d8:	6028      	str	r0, [r5, #0]
 80076da:	0635      	lsls	r5, r6, #24
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	d501      	bpl.n	80076e4 <_printf_i+0x1c4>
 80076e0:	6019      	str	r1, [r3, #0]
 80076e2:	e002      	b.n	80076ea <_printf_i+0x1ca>
 80076e4:	0670      	lsls	r0, r6, #25
 80076e6:	d5fb      	bpl.n	80076e0 <_printf_i+0x1c0>
 80076e8:	8019      	strh	r1, [r3, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	6123      	str	r3, [r4, #16]
 80076ee:	4615      	mov	r5, r2
 80076f0:	e7bc      	b.n	800766c <_printf_i+0x14c>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	1d1a      	adds	r2, r3, #4
 80076f6:	602a      	str	r2, [r5, #0]
 80076f8:	681d      	ldr	r5, [r3, #0]
 80076fa:	6862      	ldr	r2, [r4, #4]
 80076fc:	2100      	movs	r1, #0
 80076fe:	4628      	mov	r0, r5
 8007700:	f7f8 fd76 	bl	80001f0 <memchr>
 8007704:	b108      	cbz	r0, 800770a <_printf_i+0x1ea>
 8007706:	1b40      	subs	r0, r0, r5
 8007708:	6060      	str	r0, [r4, #4]
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	6123      	str	r3, [r4, #16]
 800770e:	2300      	movs	r3, #0
 8007710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007714:	e7aa      	b.n	800766c <_printf_i+0x14c>
 8007716:	6923      	ldr	r3, [r4, #16]
 8007718:	462a      	mov	r2, r5
 800771a:	4649      	mov	r1, r9
 800771c:	4640      	mov	r0, r8
 800771e:	47d0      	blx	sl
 8007720:	3001      	adds	r0, #1
 8007722:	d0ad      	beq.n	8007680 <_printf_i+0x160>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	079b      	lsls	r3, r3, #30
 8007728:	d413      	bmi.n	8007752 <_printf_i+0x232>
 800772a:	68e0      	ldr	r0, [r4, #12]
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	4298      	cmp	r0, r3
 8007730:	bfb8      	it	lt
 8007732:	4618      	movlt	r0, r3
 8007734:	e7a6      	b.n	8007684 <_printf_i+0x164>
 8007736:	2301      	movs	r3, #1
 8007738:	4632      	mov	r2, r6
 800773a:	4649      	mov	r1, r9
 800773c:	4640      	mov	r0, r8
 800773e:	47d0      	blx	sl
 8007740:	3001      	adds	r0, #1
 8007742:	d09d      	beq.n	8007680 <_printf_i+0x160>
 8007744:	3501      	adds	r5, #1
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	9903      	ldr	r1, [sp, #12]
 800774a:	1a5b      	subs	r3, r3, r1
 800774c:	42ab      	cmp	r3, r5
 800774e:	dcf2      	bgt.n	8007736 <_printf_i+0x216>
 8007750:	e7eb      	b.n	800772a <_printf_i+0x20a>
 8007752:	2500      	movs	r5, #0
 8007754:	f104 0619 	add.w	r6, r4, #25
 8007758:	e7f5      	b.n	8007746 <_printf_i+0x226>
 800775a:	bf00      	nop
 800775c:	0800876b 	.word	0x0800876b
 8007760:	0800877c 	.word	0x0800877c

08007764 <__sflush_r>:
 8007764:	898a      	ldrh	r2, [r1, #12]
 8007766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776a:	4605      	mov	r5, r0
 800776c:	0710      	lsls	r0, r2, #28
 800776e:	460c      	mov	r4, r1
 8007770:	d458      	bmi.n	8007824 <__sflush_r+0xc0>
 8007772:	684b      	ldr	r3, [r1, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	dc05      	bgt.n	8007784 <__sflush_r+0x20>
 8007778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	dc02      	bgt.n	8007784 <__sflush_r+0x20>
 800777e:	2000      	movs	r0, #0
 8007780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007786:	2e00      	cmp	r6, #0
 8007788:	d0f9      	beq.n	800777e <__sflush_r+0x1a>
 800778a:	2300      	movs	r3, #0
 800778c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007790:	682f      	ldr	r7, [r5, #0]
 8007792:	6a21      	ldr	r1, [r4, #32]
 8007794:	602b      	str	r3, [r5, #0]
 8007796:	d032      	beq.n	80077fe <__sflush_r+0x9a>
 8007798:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	075a      	lsls	r2, r3, #29
 800779e:	d505      	bpl.n	80077ac <__sflush_r+0x48>
 80077a0:	6863      	ldr	r3, [r4, #4]
 80077a2:	1ac0      	subs	r0, r0, r3
 80077a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077a6:	b10b      	cbz	r3, 80077ac <__sflush_r+0x48>
 80077a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077aa:	1ac0      	subs	r0, r0, r3
 80077ac:	2300      	movs	r3, #0
 80077ae:	4602      	mov	r2, r0
 80077b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077b2:	6a21      	ldr	r1, [r4, #32]
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b0      	blx	r6
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	d106      	bne.n	80077cc <__sflush_r+0x68>
 80077be:	6829      	ldr	r1, [r5, #0]
 80077c0:	291d      	cmp	r1, #29
 80077c2:	d82b      	bhi.n	800781c <__sflush_r+0xb8>
 80077c4:	4a29      	ldr	r2, [pc, #164]	; (800786c <__sflush_r+0x108>)
 80077c6:	410a      	asrs	r2, r1
 80077c8:	07d6      	lsls	r6, r2, #31
 80077ca:	d427      	bmi.n	800781c <__sflush_r+0xb8>
 80077cc:	2200      	movs	r2, #0
 80077ce:	6062      	str	r2, [r4, #4]
 80077d0:	04d9      	lsls	r1, r3, #19
 80077d2:	6922      	ldr	r2, [r4, #16]
 80077d4:	6022      	str	r2, [r4, #0]
 80077d6:	d504      	bpl.n	80077e2 <__sflush_r+0x7e>
 80077d8:	1c42      	adds	r2, r0, #1
 80077da:	d101      	bne.n	80077e0 <__sflush_r+0x7c>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b903      	cbnz	r3, 80077e2 <__sflush_r+0x7e>
 80077e0:	6560      	str	r0, [r4, #84]	; 0x54
 80077e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077e4:	602f      	str	r7, [r5, #0]
 80077e6:	2900      	cmp	r1, #0
 80077e8:	d0c9      	beq.n	800777e <__sflush_r+0x1a>
 80077ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077ee:	4299      	cmp	r1, r3
 80077f0:	d002      	beq.n	80077f8 <__sflush_r+0x94>
 80077f2:	4628      	mov	r0, r5
 80077f4:	f7ff fbce 	bl	8006f94 <_free_r>
 80077f8:	2000      	movs	r0, #0
 80077fa:	6360      	str	r0, [r4, #52]	; 0x34
 80077fc:	e7c0      	b.n	8007780 <__sflush_r+0x1c>
 80077fe:	2301      	movs	r3, #1
 8007800:	4628      	mov	r0, r5
 8007802:	47b0      	blx	r6
 8007804:	1c41      	adds	r1, r0, #1
 8007806:	d1c8      	bne.n	800779a <__sflush_r+0x36>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0c5      	beq.n	800779a <__sflush_r+0x36>
 800780e:	2b1d      	cmp	r3, #29
 8007810:	d001      	beq.n	8007816 <__sflush_r+0xb2>
 8007812:	2b16      	cmp	r3, #22
 8007814:	d101      	bne.n	800781a <__sflush_r+0xb6>
 8007816:	602f      	str	r7, [r5, #0]
 8007818:	e7b1      	b.n	800777e <__sflush_r+0x1a>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	e7ad      	b.n	8007780 <__sflush_r+0x1c>
 8007824:	690f      	ldr	r7, [r1, #16]
 8007826:	2f00      	cmp	r7, #0
 8007828:	d0a9      	beq.n	800777e <__sflush_r+0x1a>
 800782a:	0793      	lsls	r3, r2, #30
 800782c:	680e      	ldr	r6, [r1, #0]
 800782e:	bf08      	it	eq
 8007830:	694b      	ldreq	r3, [r1, #20]
 8007832:	600f      	str	r7, [r1, #0]
 8007834:	bf18      	it	ne
 8007836:	2300      	movne	r3, #0
 8007838:	eba6 0807 	sub.w	r8, r6, r7
 800783c:	608b      	str	r3, [r1, #8]
 800783e:	f1b8 0f00 	cmp.w	r8, #0
 8007842:	dd9c      	ble.n	800777e <__sflush_r+0x1a>
 8007844:	6a21      	ldr	r1, [r4, #32]
 8007846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007848:	4643      	mov	r3, r8
 800784a:	463a      	mov	r2, r7
 800784c:	4628      	mov	r0, r5
 800784e:	47b0      	blx	r6
 8007850:	2800      	cmp	r0, #0
 8007852:	dc06      	bgt.n	8007862 <__sflush_r+0xfe>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	e78e      	b.n	8007780 <__sflush_r+0x1c>
 8007862:	4407      	add	r7, r0
 8007864:	eba8 0800 	sub.w	r8, r8, r0
 8007868:	e7e9      	b.n	800783e <__sflush_r+0xda>
 800786a:	bf00      	nop
 800786c:	dfbffffe 	.word	0xdfbffffe

08007870 <_fflush_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	690b      	ldr	r3, [r1, #16]
 8007874:	4605      	mov	r5, r0
 8007876:	460c      	mov	r4, r1
 8007878:	b913      	cbnz	r3, 8007880 <_fflush_r+0x10>
 800787a:	2500      	movs	r5, #0
 800787c:	4628      	mov	r0, r5
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	b118      	cbz	r0, 800788a <_fflush_r+0x1a>
 8007882:	6a03      	ldr	r3, [r0, #32]
 8007884:	b90b      	cbnz	r3, 800788a <_fflush_r+0x1a>
 8007886:	f7ff f9af 	bl	8006be8 <__sinit>
 800788a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f3      	beq.n	800787a <_fflush_r+0xa>
 8007892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007894:	07d0      	lsls	r0, r2, #31
 8007896:	d404      	bmi.n	80078a2 <_fflush_r+0x32>
 8007898:	0599      	lsls	r1, r3, #22
 800789a:	d402      	bmi.n	80078a2 <_fflush_r+0x32>
 800789c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789e:	f7ff fb58 	bl	8006f52 <__retarget_lock_acquire_recursive>
 80078a2:	4628      	mov	r0, r5
 80078a4:	4621      	mov	r1, r4
 80078a6:	f7ff ff5d 	bl	8007764 <__sflush_r>
 80078aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ac:	07da      	lsls	r2, r3, #31
 80078ae:	4605      	mov	r5, r0
 80078b0:	d4e4      	bmi.n	800787c <_fflush_r+0xc>
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	059b      	lsls	r3, r3, #22
 80078b6:	d4e1      	bmi.n	800787c <_fflush_r+0xc>
 80078b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ba:	f7ff fb4b 	bl	8006f54 <__retarget_lock_release_recursive>
 80078be:	e7dd      	b.n	800787c <_fflush_r+0xc>

080078c0 <fiprintf>:
 80078c0:	b40e      	push	{r1, r2, r3}
 80078c2:	b503      	push	{r0, r1, lr}
 80078c4:	4601      	mov	r1, r0
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	4805      	ldr	r0, [pc, #20]	; (80078e0 <fiprintf+0x20>)
 80078ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ce:	6800      	ldr	r0, [r0, #0]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	f000 f89f 	bl	8007a14 <_vfiprintf_r>
 80078d6:	b002      	add	sp, #8
 80078d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078dc:	b003      	add	sp, #12
 80078de:	4770      	bx	lr
 80078e0:	20000e78 	.word	0x20000e78

080078e4 <memmove>:
 80078e4:	4288      	cmp	r0, r1
 80078e6:	b510      	push	{r4, lr}
 80078e8:	eb01 0402 	add.w	r4, r1, r2
 80078ec:	d902      	bls.n	80078f4 <memmove+0x10>
 80078ee:	4284      	cmp	r4, r0
 80078f0:	4623      	mov	r3, r4
 80078f2:	d807      	bhi.n	8007904 <memmove+0x20>
 80078f4:	1e43      	subs	r3, r0, #1
 80078f6:	42a1      	cmp	r1, r4
 80078f8:	d008      	beq.n	800790c <memmove+0x28>
 80078fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007902:	e7f8      	b.n	80078f6 <memmove+0x12>
 8007904:	4402      	add	r2, r0
 8007906:	4601      	mov	r1, r0
 8007908:	428a      	cmp	r2, r1
 800790a:	d100      	bne.n	800790e <memmove+0x2a>
 800790c:	bd10      	pop	{r4, pc}
 800790e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007916:	e7f7      	b.n	8007908 <memmove+0x24>

08007918 <_sbrk_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d06      	ldr	r5, [pc, #24]	; (8007934 <_sbrk_r+0x1c>)
 800791c:	2300      	movs	r3, #0
 800791e:	4604      	mov	r4, r0
 8007920:	4608      	mov	r0, r1
 8007922:	602b      	str	r3, [r5, #0]
 8007924:	f7fa fb7e 	bl	8002024 <_sbrk>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_sbrk_r+0x1a>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_sbrk_r+0x1a>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	20001888 	.word	0x20001888

08007938 <memcpy>:
 8007938:	440a      	add	r2, r1
 800793a:	4291      	cmp	r1, r2
 800793c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007940:	d100      	bne.n	8007944 <memcpy+0xc>
 8007942:	4770      	bx	lr
 8007944:	b510      	push	{r4, lr}
 8007946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800794a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800794e:	4291      	cmp	r1, r2
 8007950:	d1f9      	bne.n	8007946 <memcpy+0xe>
 8007952:	bd10      	pop	{r4, pc}

08007954 <abort>:
 8007954:	b508      	push	{r3, lr}
 8007956:	2006      	movs	r0, #6
 8007958:	f000 fa34 	bl	8007dc4 <raise>
 800795c:	2001      	movs	r0, #1
 800795e:	f7fa fae9 	bl	8001f34 <_exit>

08007962 <_realloc_r>:
 8007962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	4680      	mov	r8, r0
 8007968:	4614      	mov	r4, r2
 800796a:	460e      	mov	r6, r1
 800796c:	b921      	cbnz	r1, 8007978 <_realloc_r+0x16>
 800796e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007972:	4611      	mov	r1, r2
 8007974:	f7ff bb82 	b.w	800707c <_malloc_r>
 8007978:	b92a      	cbnz	r2, 8007986 <_realloc_r+0x24>
 800797a:	f7ff fb0b 	bl	8006f94 <_free_r>
 800797e:	4625      	mov	r5, r4
 8007980:	4628      	mov	r0, r5
 8007982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007986:	f000 fa39 	bl	8007dfc <_malloc_usable_size_r>
 800798a:	4284      	cmp	r4, r0
 800798c:	4607      	mov	r7, r0
 800798e:	d802      	bhi.n	8007996 <_realloc_r+0x34>
 8007990:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007994:	d812      	bhi.n	80079bc <_realloc_r+0x5a>
 8007996:	4621      	mov	r1, r4
 8007998:	4640      	mov	r0, r8
 800799a:	f7ff fb6f 	bl	800707c <_malloc_r>
 800799e:	4605      	mov	r5, r0
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d0ed      	beq.n	8007980 <_realloc_r+0x1e>
 80079a4:	42bc      	cmp	r4, r7
 80079a6:	4622      	mov	r2, r4
 80079a8:	4631      	mov	r1, r6
 80079aa:	bf28      	it	cs
 80079ac:	463a      	movcs	r2, r7
 80079ae:	f7ff ffc3 	bl	8007938 <memcpy>
 80079b2:	4631      	mov	r1, r6
 80079b4:	4640      	mov	r0, r8
 80079b6:	f7ff faed 	bl	8006f94 <_free_r>
 80079ba:	e7e1      	b.n	8007980 <_realloc_r+0x1e>
 80079bc:	4635      	mov	r5, r6
 80079be:	e7df      	b.n	8007980 <_realloc_r+0x1e>

080079c0 <__sfputc_r>:
 80079c0:	6893      	ldr	r3, [r2, #8]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	b410      	push	{r4}
 80079c8:	6093      	str	r3, [r2, #8]
 80079ca:	da08      	bge.n	80079de <__sfputc_r+0x1e>
 80079cc:	6994      	ldr	r4, [r2, #24]
 80079ce:	42a3      	cmp	r3, r4
 80079d0:	db01      	blt.n	80079d6 <__sfputc_r+0x16>
 80079d2:	290a      	cmp	r1, #10
 80079d4:	d103      	bne.n	80079de <__sfputc_r+0x1e>
 80079d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079da:	f000 b935 	b.w	8007c48 <__swbuf_r>
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	1c58      	adds	r0, r3, #1
 80079e2:	6010      	str	r0, [r2, #0]
 80079e4:	7019      	strb	r1, [r3, #0]
 80079e6:	4608      	mov	r0, r1
 80079e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <__sfputs_r>:
 80079ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f0:	4606      	mov	r6, r0
 80079f2:	460f      	mov	r7, r1
 80079f4:	4614      	mov	r4, r2
 80079f6:	18d5      	adds	r5, r2, r3
 80079f8:	42ac      	cmp	r4, r5
 80079fa:	d101      	bne.n	8007a00 <__sfputs_r+0x12>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e007      	b.n	8007a10 <__sfputs_r+0x22>
 8007a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a04:	463a      	mov	r2, r7
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ffda 	bl	80079c0 <__sfputc_r>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d1f3      	bne.n	80079f8 <__sfputs_r+0xa>
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a14 <_vfiprintf_r>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	460d      	mov	r5, r1
 8007a1a:	b09d      	sub	sp, #116	; 0x74
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	4698      	mov	r8, r3
 8007a20:	4606      	mov	r6, r0
 8007a22:	b118      	cbz	r0, 8007a2c <_vfiprintf_r+0x18>
 8007a24:	6a03      	ldr	r3, [r0, #32]
 8007a26:	b90b      	cbnz	r3, 8007a2c <_vfiprintf_r+0x18>
 8007a28:	f7ff f8de 	bl	8006be8 <__sinit>
 8007a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a2e:	07d9      	lsls	r1, r3, #31
 8007a30:	d405      	bmi.n	8007a3e <_vfiprintf_r+0x2a>
 8007a32:	89ab      	ldrh	r3, [r5, #12]
 8007a34:	059a      	lsls	r2, r3, #22
 8007a36:	d402      	bmi.n	8007a3e <_vfiprintf_r+0x2a>
 8007a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a3a:	f7ff fa8a 	bl	8006f52 <__retarget_lock_acquire_recursive>
 8007a3e:	89ab      	ldrh	r3, [r5, #12]
 8007a40:	071b      	lsls	r3, r3, #28
 8007a42:	d501      	bpl.n	8007a48 <_vfiprintf_r+0x34>
 8007a44:	692b      	ldr	r3, [r5, #16]
 8007a46:	b99b      	cbnz	r3, 8007a70 <_vfiprintf_r+0x5c>
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f000 f93a 	bl	8007cc4 <__swsetup_r>
 8007a50:	b170      	cbz	r0, 8007a70 <_vfiprintf_r+0x5c>
 8007a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a54:	07dc      	lsls	r4, r3, #31
 8007a56:	d504      	bpl.n	8007a62 <_vfiprintf_r+0x4e>
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	b01d      	add	sp, #116	; 0x74
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a62:	89ab      	ldrh	r3, [r5, #12]
 8007a64:	0598      	lsls	r0, r3, #22
 8007a66:	d4f7      	bmi.n	8007a58 <_vfiprintf_r+0x44>
 8007a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a6a:	f7ff fa73 	bl	8006f54 <__retarget_lock_release_recursive>
 8007a6e:	e7f3      	b.n	8007a58 <_vfiprintf_r+0x44>
 8007a70:	2300      	movs	r3, #0
 8007a72:	9309      	str	r3, [sp, #36]	; 0x24
 8007a74:	2320      	movs	r3, #32
 8007a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a7e:	2330      	movs	r3, #48	; 0x30
 8007a80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007c34 <_vfiprintf_r+0x220>
 8007a84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a88:	f04f 0901 	mov.w	r9, #1
 8007a8c:	4623      	mov	r3, r4
 8007a8e:	469a      	mov	sl, r3
 8007a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a94:	b10a      	cbz	r2, 8007a9a <_vfiprintf_r+0x86>
 8007a96:	2a25      	cmp	r2, #37	; 0x25
 8007a98:	d1f9      	bne.n	8007a8e <_vfiprintf_r+0x7a>
 8007a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a9e:	d00b      	beq.n	8007ab8 <_vfiprintf_r+0xa4>
 8007aa0:	465b      	mov	r3, fp
 8007aa2:	4622      	mov	r2, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	f7ff ffa1 	bl	80079ee <__sfputs_r>
 8007aac:	3001      	adds	r0, #1
 8007aae:	f000 80a9 	beq.w	8007c04 <_vfiprintf_r+0x1f0>
 8007ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab4:	445a      	add	r2, fp
 8007ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80a1 	beq.w	8007c04 <_vfiprintf_r+0x1f0>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007acc:	f10a 0a01 	add.w	sl, sl, #1
 8007ad0:	9304      	str	r3, [sp, #16]
 8007ad2:	9307      	str	r3, [sp, #28]
 8007ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8007ada:	4654      	mov	r4, sl
 8007adc:	2205      	movs	r2, #5
 8007ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ae2:	4854      	ldr	r0, [pc, #336]	; (8007c34 <_vfiprintf_r+0x220>)
 8007ae4:	f7f8 fb84 	bl	80001f0 <memchr>
 8007ae8:	9a04      	ldr	r2, [sp, #16]
 8007aea:	b9d8      	cbnz	r0, 8007b24 <_vfiprintf_r+0x110>
 8007aec:	06d1      	lsls	r1, r2, #27
 8007aee:	bf44      	itt	mi
 8007af0:	2320      	movmi	r3, #32
 8007af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007af6:	0713      	lsls	r3, r2, #28
 8007af8:	bf44      	itt	mi
 8007afa:	232b      	movmi	r3, #43	; 0x2b
 8007afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b00:	f89a 3000 	ldrb.w	r3, [sl]
 8007b04:	2b2a      	cmp	r3, #42	; 0x2a
 8007b06:	d015      	beq.n	8007b34 <_vfiprintf_r+0x120>
 8007b08:	9a07      	ldr	r2, [sp, #28]
 8007b0a:	4654      	mov	r4, sl
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	f04f 0c0a 	mov.w	ip, #10
 8007b12:	4621      	mov	r1, r4
 8007b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b18:	3b30      	subs	r3, #48	; 0x30
 8007b1a:	2b09      	cmp	r3, #9
 8007b1c:	d94d      	bls.n	8007bba <_vfiprintf_r+0x1a6>
 8007b1e:	b1b0      	cbz	r0, 8007b4e <_vfiprintf_r+0x13a>
 8007b20:	9207      	str	r2, [sp, #28]
 8007b22:	e014      	b.n	8007b4e <_vfiprintf_r+0x13a>
 8007b24:	eba0 0308 	sub.w	r3, r0, r8
 8007b28:	fa09 f303 	lsl.w	r3, r9, r3
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	9304      	str	r3, [sp, #16]
 8007b30:	46a2      	mov	sl, r4
 8007b32:	e7d2      	b.n	8007ada <_vfiprintf_r+0xc6>
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	1d19      	adds	r1, r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	9103      	str	r1, [sp, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bfbb      	ittet	lt
 8007b40:	425b      	neglt	r3, r3
 8007b42:	f042 0202 	orrlt.w	r2, r2, #2
 8007b46:	9307      	strge	r3, [sp, #28]
 8007b48:	9307      	strlt	r3, [sp, #28]
 8007b4a:	bfb8      	it	lt
 8007b4c:	9204      	strlt	r2, [sp, #16]
 8007b4e:	7823      	ldrb	r3, [r4, #0]
 8007b50:	2b2e      	cmp	r3, #46	; 0x2e
 8007b52:	d10c      	bne.n	8007b6e <_vfiprintf_r+0x15a>
 8007b54:	7863      	ldrb	r3, [r4, #1]
 8007b56:	2b2a      	cmp	r3, #42	; 0x2a
 8007b58:	d134      	bne.n	8007bc4 <_vfiprintf_r+0x1b0>
 8007b5a:	9b03      	ldr	r3, [sp, #12]
 8007b5c:	1d1a      	adds	r2, r3, #4
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	9203      	str	r2, [sp, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfb8      	it	lt
 8007b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b6a:	3402      	adds	r4, #2
 8007b6c:	9305      	str	r3, [sp, #20]
 8007b6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007c44 <_vfiprintf_r+0x230>
 8007b72:	7821      	ldrb	r1, [r4, #0]
 8007b74:	2203      	movs	r2, #3
 8007b76:	4650      	mov	r0, sl
 8007b78:	f7f8 fb3a 	bl	80001f0 <memchr>
 8007b7c:	b138      	cbz	r0, 8007b8e <_vfiprintf_r+0x17a>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	eba0 000a 	sub.w	r0, r0, sl
 8007b84:	2240      	movs	r2, #64	; 0x40
 8007b86:	4082      	lsls	r2, r0
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	3401      	adds	r4, #1
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b92:	4829      	ldr	r0, [pc, #164]	; (8007c38 <_vfiprintf_r+0x224>)
 8007b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b98:	2206      	movs	r2, #6
 8007b9a:	f7f8 fb29 	bl	80001f0 <memchr>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d03f      	beq.n	8007c22 <_vfiprintf_r+0x20e>
 8007ba2:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <_vfiprintf_r+0x228>)
 8007ba4:	bb1b      	cbnz	r3, 8007bee <_vfiprintf_r+0x1da>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	3307      	adds	r3, #7
 8007baa:	f023 0307 	bic.w	r3, r3, #7
 8007bae:	3308      	adds	r3, #8
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb4:	443b      	add	r3, r7
 8007bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb8:	e768      	b.n	8007a8c <_vfiprintf_r+0x78>
 8007bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	e7a6      	b.n	8007b12 <_vfiprintf_r+0xfe>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	3401      	adds	r4, #1
 8007bc8:	9305      	str	r3, [sp, #20]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f04f 0c0a 	mov.w	ip, #10
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bd6:	3a30      	subs	r2, #48	; 0x30
 8007bd8:	2a09      	cmp	r2, #9
 8007bda:	d903      	bls.n	8007be4 <_vfiprintf_r+0x1d0>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0c6      	beq.n	8007b6e <_vfiprintf_r+0x15a>
 8007be0:	9105      	str	r1, [sp, #20]
 8007be2:	e7c4      	b.n	8007b6e <_vfiprintf_r+0x15a>
 8007be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007be8:	4604      	mov	r4, r0
 8007bea:	2301      	movs	r3, #1
 8007bec:	e7f0      	b.n	8007bd0 <_vfiprintf_r+0x1bc>
 8007bee:	ab03      	add	r3, sp, #12
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	462a      	mov	r2, r5
 8007bf4:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <_vfiprintf_r+0x22c>)
 8007bf6:	a904      	add	r1, sp, #16
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f3af 8000 	nop.w
 8007bfe:	4607      	mov	r7, r0
 8007c00:	1c78      	adds	r0, r7, #1
 8007c02:	d1d6      	bne.n	8007bb2 <_vfiprintf_r+0x19e>
 8007c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c06:	07d9      	lsls	r1, r3, #31
 8007c08:	d405      	bmi.n	8007c16 <_vfiprintf_r+0x202>
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	059a      	lsls	r2, r3, #22
 8007c0e:	d402      	bmi.n	8007c16 <_vfiprintf_r+0x202>
 8007c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c12:	f7ff f99f 	bl	8006f54 <__retarget_lock_release_recursive>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	065b      	lsls	r3, r3, #25
 8007c1a:	f53f af1d 	bmi.w	8007a58 <_vfiprintf_r+0x44>
 8007c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c20:	e71c      	b.n	8007a5c <_vfiprintf_r+0x48>
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	462a      	mov	r2, r5
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <_vfiprintf_r+0x22c>)
 8007c2a:	a904      	add	r1, sp, #16
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f7ff fc77 	bl	8007520 <_printf_i>
 8007c32:	e7e4      	b.n	8007bfe <_vfiprintf_r+0x1ea>
 8007c34:	0800875a 	.word	0x0800875a
 8007c38:	08008764 	.word	0x08008764
 8007c3c:	00000000 	.word	0x00000000
 8007c40:	080079ef 	.word	0x080079ef
 8007c44:	08008760 	.word	0x08008760

08007c48 <__swbuf_r>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	460e      	mov	r6, r1
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	4605      	mov	r5, r0
 8007c50:	b118      	cbz	r0, 8007c5a <__swbuf_r+0x12>
 8007c52:	6a03      	ldr	r3, [r0, #32]
 8007c54:	b90b      	cbnz	r3, 8007c5a <__swbuf_r+0x12>
 8007c56:	f7fe ffc7 	bl	8006be8 <__sinit>
 8007c5a:	69a3      	ldr	r3, [r4, #24]
 8007c5c:	60a3      	str	r3, [r4, #8]
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	071a      	lsls	r2, r3, #28
 8007c62:	d525      	bpl.n	8007cb0 <__swbuf_r+0x68>
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	b31b      	cbz	r3, 8007cb0 <__swbuf_r+0x68>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	6922      	ldr	r2, [r4, #16]
 8007c6c:	1a98      	subs	r0, r3, r2
 8007c6e:	6963      	ldr	r3, [r4, #20]
 8007c70:	b2f6      	uxtb	r6, r6
 8007c72:	4283      	cmp	r3, r0
 8007c74:	4637      	mov	r7, r6
 8007c76:	dc04      	bgt.n	8007c82 <__swbuf_r+0x3a>
 8007c78:	4621      	mov	r1, r4
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f7ff fdf8 	bl	8007870 <_fflush_r>
 8007c80:	b9e0      	cbnz	r0, 8007cbc <__swbuf_r+0x74>
 8007c82:	68a3      	ldr	r3, [r4, #8]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	60a3      	str	r3, [r4, #8]
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	6022      	str	r2, [r4, #0]
 8007c8e:	701e      	strb	r6, [r3, #0]
 8007c90:	6962      	ldr	r2, [r4, #20]
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d004      	beq.n	8007ca2 <__swbuf_r+0x5a>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	07db      	lsls	r3, r3, #31
 8007c9c:	d506      	bpl.n	8007cac <__swbuf_r+0x64>
 8007c9e:	2e0a      	cmp	r6, #10
 8007ca0:	d104      	bne.n	8007cac <__swbuf_r+0x64>
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f7ff fde3 	bl	8007870 <_fflush_r>
 8007caa:	b938      	cbnz	r0, 8007cbc <__swbuf_r+0x74>
 8007cac:	4638      	mov	r0, r7
 8007cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f806 	bl	8007cc4 <__swsetup_r>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d0d5      	beq.n	8007c68 <__swbuf_r+0x20>
 8007cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8007cc0:	e7f4      	b.n	8007cac <__swbuf_r+0x64>
	...

08007cc4 <__swsetup_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4b2a      	ldr	r3, [pc, #168]	; (8007d70 <__swsetup_r+0xac>)
 8007cc8:	4605      	mov	r5, r0
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	460c      	mov	r4, r1
 8007cce:	b118      	cbz	r0, 8007cd8 <__swsetup_r+0x14>
 8007cd0:	6a03      	ldr	r3, [r0, #32]
 8007cd2:	b90b      	cbnz	r3, 8007cd8 <__swsetup_r+0x14>
 8007cd4:	f7fe ff88 	bl	8006be8 <__sinit>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cde:	0718      	lsls	r0, r3, #28
 8007ce0:	d422      	bmi.n	8007d28 <__swsetup_r+0x64>
 8007ce2:	06d9      	lsls	r1, r3, #27
 8007ce4:	d407      	bmi.n	8007cf6 <__swsetup_r+0x32>
 8007ce6:	2309      	movs	r3, #9
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e034      	b.n	8007d60 <__swsetup_r+0x9c>
 8007cf6:	0758      	lsls	r0, r3, #29
 8007cf8:	d512      	bpl.n	8007d20 <__swsetup_r+0x5c>
 8007cfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfc:	b141      	cbz	r1, 8007d10 <__swsetup_r+0x4c>
 8007cfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d02:	4299      	cmp	r1, r3
 8007d04:	d002      	beq.n	8007d0c <__swsetup_r+0x48>
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7ff f944 	bl	8006f94 <_free_r>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	6363      	str	r3, [r4, #52]	; 0x34
 8007d10:	89a3      	ldrh	r3, [r4, #12]
 8007d12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6063      	str	r3, [r4, #4]
 8007d1c:	6923      	ldr	r3, [r4, #16]
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	f043 0308 	orr.w	r3, r3, #8
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	b94b      	cbnz	r3, 8007d40 <__swsetup_r+0x7c>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d36:	d003      	beq.n	8007d40 <__swsetup_r+0x7c>
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	f000 f88c 	bl	8007e58 <__smakebuf_r>
 8007d40:	89a0      	ldrh	r0, [r4, #12]
 8007d42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d46:	f010 0301 	ands.w	r3, r0, #1
 8007d4a:	d00a      	beq.n	8007d62 <__swsetup_r+0x9e>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60a3      	str	r3, [r4, #8]
 8007d50:	6963      	ldr	r3, [r4, #20]
 8007d52:	425b      	negs	r3, r3
 8007d54:	61a3      	str	r3, [r4, #24]
 8007d56:	6923      	ldr	r3, [r4, #16]
 8007d58:	b943      	cbnz	r3, 8007d6c <__swsetup_r+0xa8>
 8007d5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d5e:	d1c4      	bne.n	8007cea <__swsetup_r+0x26>
 8007d60:	bd38      	pop	{r3, r4, r5, pc}
 8007d62:	0781      	lsls	r1, r0, #30
 8007d64:	bf58      	it	pl
 8007d66:	6963      	ldrpl	r3, [r4, #20]
 8007d68:	60a3      	str	r3, [r4, #8]
 8007d6a:	e7f4      	b.n	8007d56 <__swsetup_r+0x92>
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	e7f7      	b.n	8007d60 <__swsetup_r+0x9c>
 8007d70:	20000e78 	.word	0x20000e78

08007d74 <_raise_r>:
 8007d74:	291f      	cmp	r1, #31
 8007d76:	b538      	push	{r3, r4, r5, lr}
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	d904      	bls.n	8007d88 <_raise_r+0x14>
 8007d7e:	2316      	movs	r3, #22
 8007d80:	6003      	str	r3, [r0, #0]
 8007d82:	f04f 30ff 	mov.w	r0, #4294967295
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d8a:	b112      	cbz	r2, 8007d92 <_raise_r+0x1e>
 8007d8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d90:	b94b      	cbnz	r3, 8007da6 <_raise_r+0x32>
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f830 	bl	8007df8 <_getpid_r>
 8007d98:	462a      	mov	r2, r5
 8007d9a:	4601      	mov	r1, r0
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da2:	f000 b817 	b.w	8007dd4 <_kill_r>
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d00a      	beq.n	8007dc0 <_raise_r+0x4c>
 8007daa:	1c59      	adds	r1, r3, #1
 8007dac:	d103      	bne.n	8007db6 <_raise_r+0x42>
 8007dae:	2316      	movs	r3, #22
 8007db0:	6003      	str	r3, [r0, #0]
 8007db2:	2001      	movs	r0, #1
 8007db4:	e7e7      	b.n	8007d86 <_raise_r+0x12>
 8007db6:	2400      	movs	r4, #0
 8007db8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	4798      	blx	r3
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e7e0      	b.n	8007d86 <_raise_r+0x12>

08007dc4 <raise>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <raise+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f7ff bfd3 	b.w	8007d74 <_raise_r>
 8007dce:	bf00      	nop
 8007dd0:	20000e78 	.word	0x20000e78

08007dd4 <_kill_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d07      	ldr	r5, [pc, #28]	; (8007df4 <_kill_r+0x20>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	4611      	mov	r1, r2
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	f7fa f897 	bl	8001f14 <_kill>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	d102      	bne.n	8007df0 <_kill_r+0x1c>
 8007dea:	682b      	ldr	r3, [r5, #0]
 8007dec:	b103      	cbz	r3, 8007df0 <_kill_r+0x1c>
 8007dee:	6023      	str	r3, [r4, #0]
 8007df0:	bd38      	pop	{r3, r4, r5, pc}
 8007df2:	bf00      	nop
 8007df4:	20001888 	.word	0x20001888

08007df8 <_getpid_r>:
 8007df8:	f7fa b884 	b.w	8001f04 <_getpid>

08007dfc <_malloc_usable_size_r>:
 8007dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e00:	1f18      	subs	r0, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bfbc      	itt	lt
 8007e06:	580b      	ldrlt	r3, [r1, r0]
 8007e08:	18c0      	addlt	r0, r0, r3
 8007e0a:	4770      	bx	lr

08007e0c <__swhatbuf_r>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	460c      	mov	r4, r1
 8007e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e14:	2900      	cmp	r1, #0
 8007e16:	b096      	sub	sp, #88	; 0x58
 8007e18:	4615      	mov	r5, r2
 8007e1a:	461e      	mov	r6, r3
 8007e1c:	da0d      	bge.n	8007e3a <__swhatbuf_r+0x2e>
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e24:	f04f 0100 	mov.w	r1, #0
 8007e28:	bf0c      	ite	eq
 8007e2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007e2e:	2340      	movne	r3, #64	; 0x40
 8007e30:	2000      	movs	r0, #0
 8007e32:	6031      	str	r1, [r6, #0]
 8007e34:	602b      	str	r3, [r5, #0]
 8007e36:	b016      	add	sp, #88	; 0x58
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	466a      	mov	r2, sp
 8007e3c:	f000 f848 	bl	8007ed0 <_fstat_r>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	dbec      	blt.n	8007e1e <__swhatbuf_r+0x12>
 8007e44:	9901      	ldr	r1, [sp, #4]
 8007e46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007e4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007e4e:	4259      	negs	r1, r3
 8007e50:	4159      	adcs	r1, r3
 8007e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e56:	e7eb      	b.n	8007e30 <__swhatbuf_r+0x24>

08007e58 <__smakebuf_r>:
 8007e58:	898b      	ldrh	r3, [r1, #12]
 8007e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e5c:	079d      	lsls	r5, r3, #30
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460c      	mov	r4, r1
 8007e62:	d507      	bpl.n	8007e74 <__smakebuf_r+0x1c>
 8007e64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	6163      	str	r3, [r4, #20]
 8007e70:	b002      	add	sp, #8
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	ab01      	add	r3, sp, #4
 8007e76:	466a      	mov	r2, sp
 8007e78:	f7ff ffc8 	bl	8007e0c <__swhatbuf_r>
 8007e7c:	9900      	ldr	r1, [sp, #0]
 8007e7e:	4605      	mov	r5, r0
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7ff f8fb 	bl	800707c <_malloc_r>
 8007e86:	b948      	cbnz	r0, 8007e9c <__smakebuf_r+0x44>
 8007e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e8c:	059a      	lsls	r2, r3, #22
 8007e8e:	d4ef      	bmi.n	8007e70 <__smakebuf_r+0x18>
 8007e90:	f023 0303 	bic.w	r3, r3, #3
 8007e94:	f043 0302 	orr.w	r3, r3, #2
 8007e98:	81a3      	strh	r3, [r4, #12]
 8007e9a:	e7e3      	b.n	8007e64 <__smakebuf_r+0xc>
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	6020      	str	r0, [r4, #0]
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea4:	81a3      	strh	r3, [r4, #12]
 8007ea6:	9b00      	ldr	r3, [sp, #0]
 8007ea8:	6163      	str	r3, [r4, #20]
 8007eaa:	9b01      	ldr	r3, [sp, #4]
 8007eac:	6120      	str	r0, [r4, #16]
 8007eae:	b15b      	cbz	r3, 8007ec8 <__smakebuf_r+0x70>
 8007eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f000 f81d 	bl	8007ef4 <_isatty_r>
 8007eba:	b128      	cbz	r0, 8007ec8 <__smakebuf_r+0x70>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	f043 0301 	orr.w	r3, r3, #1
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	89a3      	ldrh	r3, [r4, #12]
 8007eca:	431d      	orrs	r5, r3
 8007ecc:	81a5      	strh	r5, [r4, #12]
 8007ece:	e7cf      	b.n	8007e70 <__smakebuf_r+0x18>

08007ed0 <_fstat_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	; (8007ef0 <_fstat_r+0x20>)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	f7fa f878 	bl	8001fd2 <_fstat>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d102      	bne.n	8007eec <_fstat_r+0x1c>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	b103      	cbz	r3, 8007eec <_fstat_r+0x1c>
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
 8007eee:	bf00      	nop
 8007ef0:	20001888 	.word	0x20001888

08007ef4 <_isatty_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	4d06      	ldr	r5, [pc, #24]	; (8007f10 <_isatty_r+0x1c>)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	4604      	mov	r4, r0
 8007efc:	4608      	mov	r0, r1
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	f7fa f877 	bl	8001ff2 <_isatty>
 8007f04:	1c43      	adds	r3, r0, #1
 8007f06:	d102      	bne.n	8007f0e <_isatty_r+0x1a>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	b103      	cbz	r3, 8007f0e <_isatty_r+0x1a>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	20001888 	.word	0x20001888
 8007f14:	00000000 	.word	0x00000000

08007f18 <log10>:
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	ed2d 8b02 	vpush	{d8}
 8007f1e:	ec55 4b10 	vmov	r4, r5, d0
 8007f22:	f000 f841 	bl	8007fa8 <__ieee754_log10>
 8007f26:	4622      	mov	r2, r4
 8007f28:	462b      	mov	r3, r5
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f32:	eef0 8a60 	vmov.f32	s17, s1
 8007f36:	f7f8 fe01 	bl	8000b3c <__aeabi_dcmpun>
 8007f3a:	b998      	cbnz	r0, 8007f64 <log10+0x4c>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	4620      	mov	r0, r4
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7f8 fddc 	bl	8000b00 <__aeabi_dcmple>
 8007f48:	b160      	cbz	r0, 8007f64 <log10+0x4c>
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 fdc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f56:	b160      	cbz	r0, 8007f72 <log10+0x5a>
 8007f58:	f7fe ffd0 	bl	8006efc <__errno>
 8007f5c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007f88 <log10+0x70>
 8007f60:	2322      	movs	r3, #34	; 0x22
 8007f62:	6003      	str	r3, [r0, #0]
 8007f64:	eeb0 0a48 	vmov.f32	s0, s16
 8007f68:	eef0 0a68 	vmov.f32	s1, s17
 8007f6c:	ecbd 8b02 	vpop	{d8}
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
 8007f72:	f7fe ffc3 	bl	8006efc <__errno>
 8007f76:	ecbd 8b02 	vpop	{d8}
 8007f7a:	2321      	movs	r3, #33	; 0x21
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f82:	4803      	ldr	r0, [pc, #12]	; (8007f90 <log10+0x78>)
 8007f84:	f000 b808 	b.w	8007f98 <nan>
 8007f88:	00000000 	.word	0x00000000
 8007f8c:	fff00000 	.word	0xfff00000
 8007f90:	08008759 	.word	0x08008759
 8007f94:	00000000 	.word	0x00000000

08007f98 <nan>:
 8007f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007fa0 <nan+0x8>
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	00000000 	.word	0x00000000
 8007fa4:	7ff80000 	.word	0x7ff80000

08007fa8 <__ieee754_log10>:
 8007fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fac:	ec55 4b10 	vmov	r4, r5, d0
 8007fb0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	da2f      	bge.n	8008018 <__ieee754_log10+0x70>
 8007fb8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007fbc:	4322      	orrs	r2, r4
 8007fbe:	d109      	bne.n	8007fd4 <__ieee754_log10+0x2c>
 8007fc0:	493b      	ldr	r1, [pc, #236]	; (80080b0 <__ieee754_log10+0x108>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f7f8 fc48 	bl	800085c <__aeabi_ddiv>
 8007fcc:	ec41 0b10 	vmov	d0, r0, r1
 8007fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd4:	2d00      	cmp	r5, #0
 8007fd6:	da09      	bge.n	8007fec <__ieee754_log10+0x44>
 8007fd8:	ee10 2a10 	vmov	r2, s0
 8007fdc:	ee10 0a10 	vmov	r0, s0
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 f959 	bl	8000298 <__aeabi_dsub>
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e7ed      	b.n	8007fc8 <__ieee754_log10+0x20>
 8007fec:	4b31      	ldr	r3, [pc, #196]	; (80080b4 <__ieee754_log10+0x10c>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	ee10 0a10 	vmov	r0, s0
 8007ff6:	f7f8 fb07 	bl	8000608 <__aeabi_dmul>
 8007ffa:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8007ffe:	4604      	mov	r4, r0
 8008000:	460d      	mov	r5, r1
 8008002:	460b      	mov	r3, r1
 8008004:	492c      	ldr	r1, [pc, #176]	; (80080b8 <__ieee754_log10+0x110>)
 8008006:	428b      	cmp	r3, r1
 8008008:	dd08      	ble.n	800801c <__ieee754_log10+0x74>
 800800a:	4622      	mov	r2, r4
 800800c:	462b      	mov	r3, r5
 800800e:	4620      	mov	r0, r4
 8008010:	4629      	mov	r1, r5
 8008012:	f7f8 f943 	bl	800029c <__adddf3>
 8008016:	e7d9      	b.n	8007fcc <__ieee754_log10+0x24>
 8008018:	2200      	movs	r2, #0
 800801a:	e7f3      	b.n	8008004 <__ieee754_log10+0x5c>
 800801c:	1518      	asrs	r0, r3, #20
 800801e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8008022:	4410      	add	r0, r2
 8008024:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8008028:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800802c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8008030:	f7f8 fa80 	bl	8000534 <__aeabi_i2d>
 8008034:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8008038:	3303      	adds	r3, #3
 800803a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800803e:	ec45 4b10 	vmov	d0, r4, r5
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	f000 f83b 	bl	80080c0 <__ieee754_log>
 800804a:	a313      	add	r3, pc, #76	; (adr r3, 8008098 <__ieee754_log10+0xf0>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	ec59 8b10 	vmov	r8, r9, d0
 8008058:	f7f8 fad6 	bl	8000608 <__aeabi_dmul>
 800805c:	a310      	add	r3, pc, #64	; (adr r3, 80080a0 <__ieee754_log10+0xf8>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	4604      	mov	r4, r0
 8008064:	460d      	mov	r5, r1
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	f7f8 facd 	bl	8000608 <__aeabi_dmul>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 f911 	bl	800029c <__adddf3>
 800807a:	a30b      	add	r3, pc, #44	; (adr r3, 80080a8 <__ieee754_log10+0x100>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	4604      	mov	r4, r0
 8008082:	460d      	mov	r5, r1
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f7f8 fabe 	bl	8000608 <__aeabi_dmul>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4620      	mov	r0, r4
 8008092:	4629      	mov	r1, r5
 8008094:	e7bd      	b.n	8008012 <__ieee754_log10+0x6a>
 8008096:	bf00      	nop
 8008098:	11f12b36 	.word	0x11f12b36
 800809c:	3d59fef3 	.word	0x3d59fef3
 80080a0:	1526e50e 	.word	0x1526e50e
 80080a4:	3fdbcb7b 	.word	0x3fdbcb7b
 80080a8:	509f6000 	.word	0x509f6000
 80080ac:	3fd34413 	.word	0x3fd34413
 80080b0:	c3500000 	.word	0xc3500000
 80080b4:	43500000 	.word	0x43500000
 80080b8:	7fefffff 	.word	0x7fefffff
 80080bc:	00000000 	.word	0x00000000

080080c0 <__ieee754_log>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	ec51 0b10 	vmov	r0, r1, d0
 80080c8:	ed2d 8b04 	vpush	{d8-d9}
 80080cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80080d0:	b083      	sub	sp, #12
 80080d2:	460d      	mov	r5, r1
 80080d4:	da29      	bge.n	800812a <__ieee754_log+0x6a>
 80080d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080da:	4303      	orrs	r3, r0
 80080dc:	ee10 2a10 	vmov	r2, s0
 80080e0:	d10c      	bne.n	80080fc <__ieee754_log+0x3c>
 80080e2:	49cf      	ldr	r1, [pc, #828]	; (8008420 <__ieee754_log+0x360>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	2000      	movs	r0, #0
 80080ea:	f7f8 fbb7 	bl	800085c <__aeabi_ddiv>
 80080ee:	ec41 0b10 	vmov	d0, r0, r1
 80080f2:	b003      	add	sp, #12
 80080f4:	ecbd 8b04 	vpop	{d8-d9}
 80080f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fc:	2900      	cmp	r1, #0
 80080fe:	da05      	bge.n	800810c <__ieee754_log+0x4c>
 8008100:	460b      	mov	r3, r1
 8008102:	f7f8 f8c9 	bl	8000298 <__aeabi_dsub>
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	e7ee      	b.n	80080ea <__ieee754_log+0x2a>
 800810c:	4bc5      	ldr	r3, [pc, #788]	; (8008424 <__ieee754_log+0x364>)
 800810e:	2200      	movs	r2, #0
 8008110:	f7f8 fa7a 	bl	8000608 <__aeabi_dmul>
 8008114:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008118:	460d      	mov	r5, r1
 800811a:	4ac3      	ldr	r2, [pc, #780]	; (8008428 <__ieee754_log+0x368>)
 800811c:	4295      	cmp	r5, r2
 800811e:	dd06      	ble.n	800812e <__ieee754_log+0x6e>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	f7f8 f8ba 	bl	800029c <__adddf3>
 8008128:	e7e1      	b.n	80080ee <__ieee754_log+0x2e>
 800812a:	2300      	movs	r3, #0
 800812c:	e7f5      	b.n	800811a <__ieee754_log+0x5a>
 800812e:	152c      	asrs	r4, r5, #20
 8008130:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008134:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008138:	441c      	add	r4, r3
 800813a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800813e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008146:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800814a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800814e:	ea42 0105 	orr.w	r1, r2, r5
 8008152:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008156:	2200      	movs	r2, #0
 8008158:	4bb4      	ldr	r3, [pc, #720]	; (800842c <__ieee754_log+0x36c>)
 800815a:	f7f8 f89d 	bl	8000298 <__aeabi_dsub>
 800815e:	1cab      	adds	r3, r5, #2
 8008160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008164:	2b02      	cmp	r3, #2
 8008166:	4682      	mov	sl, r0
 8008168:	468b      	mov	fp, r1
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	dc53      	bgt.n	8008218 <__ieee754_log+0x158>
 8008170:	2300      	movs	r3, #0
 8008172:	f7f8 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008176:	b1d0      	cbz	r0, 80081ae <__ieee754_log+0xee>
 8008178:	2c00      	cmp	r4, #0
 800817a:	f000 8122 	beq.w	80083c2 <__ieee754_log+0x302>
 800817e:	4620      	mov	r0, r4
 8008180:	f7f8 f9d8 	bl	8000534 <__aeabi_i2d>
 8008184:	a390      	add	r3, pc, #576	; (adr r3, 80083c8 <__ieee754_log+0x308>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	4606      	mov	r6, r0
 800818c:	460f      	mov	r7, r1
 800818e:	f7f8 fa3b 	bl	8000608 <__aeabi_dmul>
 8008192:	a38f      	add	r3, pc, #572	; (adr r3, 80083d0 <__ieee754_log+0x310>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	4630      	mov	r0, r6
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f8 fa32 	bl	8000608 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	e7ba      	b.n	8008124 <__ieee754_log+0x64>
 80081ae:	a38a      	add	r3, pc, #552	; (adr r3, 80083d8 <__ieee754_log+0x318>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	4650      	mov	r0, sl
 80081b6:	4659      	mov	r1, fp
 80081b8:	f7f8 fa26 	bl	8000608 <__aeabi_dmul>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	2000      	movs	r0, #0
 80081c2:	499b      	ldr	r1, [pc, #620]	; (8008430 <__ieee754_log+0x370>)
 80081c4:	f7f8 f868 	bl	8000298 <__aeabi_dsub>
 80081c8:	4652      	mov	r2, sl
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	465b      	mov	r3, fp
 80081d0:	4650      	mov	r0, sl
 80081d2:	4659      	mov	r1, fp
 80081d4:	f7f8 fa18 	bl	8000608 <__aeabi_dmul>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fa12 	bl	8000608 <__aeabi_dmul>
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	b914      	cbnz	r4, 80081f0 <__ieee754_log+0x130>
 80081ea:	4632      	mov	r2, r6
 80081ec:	463b      	mov	r3, r7
 80081ee:	e0a2      	b.n	8008336 <__ieee754_log+0x276>
 80081f0:	4620      	mov	r0, r4
 80081f2:	f7f8 f99f 	bl	8000534 <__aeabi_i2d>
 80081f6:	a374      	add	r3, pc, #464	; (adr r3, 80083c8 <__ieee754_log+0x308>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	4680      	mov	r8, r0
 80081fe:	4689      	mov	r9, r1
 8008200:	f7f8 fa02 	bl	8000608 <__aeabi_dmul>
 8008204:	a372      	add	r3, pc, #456	; (adr r3, 80083d0 <__ieee754_log+0x310>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	4604      	mov	r4, r0
 800820c:	460d      	mov	r5, r1
 800820e:	4640      	mov	r0, r8
 8008210:	4649      	mov	r1, r9
 8008212:	f7f8 f9f9 	bl	8000608 <__aeabi_dmul>
 8008216:	e0a7      	b.n	8008368 <__ieee754_log+0x2a8>
 8008218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800821c:	f7f8 f83e 	bl	800029c <__adddf3>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4650      	mov	r0, sl
 8008226:	4659      	mov	r1, fp
 8008228:	f7f8 fb18 	bl	800085c <__aeabi_ddiv>
 800822c:	ec41 0b18 	vmov	d8, r0, r1
 8008230:	4620      	mov	r0, r4
 8008232:	f7f8 f97f 	bl	8000534 <__aeabi_i2d>
 8008236:	ec53 2b18 	vmov	r2, r3, d8
 800823a:	ec41 0b19 	vmov	d9, r0, r1
 800823e:	ec51 0b18 	vmov	r0, r1, d8
 8008242:	f7f8 f9e1 	bl	8000608 <__aeabi_dmul>
 8008246:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800824a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4680      	mov	r8, r0
 8008256:	4689      	mov	r9, r1
 8008258:	f7f8 f9d6 	bl	8000608 <__aeabi_dmul>
 800825c:	a360      	add	r3, pc, #384	; (adr r3, 80083e0 <__ieee754_log+0x320>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	4606      	mov	r6, r0
 8008264:	460f      	mov	r7, r1
 8008266:	f7f8 f9cf 	bl	8000608 <__aeabi_dmul>
 800826a:	a35f      	add	r3, pc, #380	; (adr r3, 80083e8 <__ieee754_log+0x328>)
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f7f8 f814 	bl	800029c <__adddf3>
 8008274:	4632      	mov	r2, r6
 8008276:	463b      	mov	r3, r7
 8008278:	f7f8 f9c6 	bl	8000608 <__aeabi_dmul>
 800827c:	a35c      	add	r3, pc, #368	; (adr r3, 80083f0 <__ieee754_log+0x330>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f8 f80b 	bl	800029c <__adddf3>
 8008286:	4632      	mov	r2, r6
 8008288:	463b      	mov	r3, r7
 800828a:	f7f8 f9bd 	bl	8000608 <__aeabi_dmul>
 800828e:	a35a      	add	r3, pc, #360	; (adr r3, 80083f8 <__ieee754_log+0x338>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f7f8 f802 	bl	800029c <__adddf3>
 8008298:	4642      	mov	r2, r8
 800829a:	464b      	mov	r3, r9
 800829c:	f7f8 f9b4 	bl	8000608 <__aeabi_dmul>
 80082a0:	a357      	add	r3, pc, #348	; (adr r3, 8008400 <__ieee754_log+0x340>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	4680      	mov	r8, r0
 80082a8:	4689      	mov	r9, r1
 80082aa:	4630      	mov	r0, r6
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f8 f9ab 	bl	8000608 <__aeabi_dmul>
 80082b2:	a355      	add	r3, pc, #340	; (adr r3, 8008408 <__ieee754_log+0x348>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f7 fff0 	bl	800029c <__adddf3>
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	f7f8 f9a2 	bl	8000608 <__aeabi_dmul>
 80082c4:	a352      	add	r3, pc, #328	; (adr r3, 8008410 <__ieee754_log+0x350>)
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f7f7 ffe7 	bl	800029c <__adddf3>
 80082ce:	4632      	mov	r2, r6
 80082d0:	463b      	mov	r3, r7
 80082d2:	f7f8 f999 	bl	8000608 <__aeabi_dmul>
 80082d6:	460b      	mov	r3, r1
 80082d8:	4602      	mov	r2, r0
 80082da:	4649      	mov	r1, r9
 80082dc:	4640      	mov	r0, r8
 80082de:	f7f7 ffdd 	bl	800029c <__adddf3>
 80082e2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	3551      	adds	r5, #81	; 0x51
 80082ea:	431d      	orrs	r5, r3
 80082ec:	2d00      	cmp	r5, #0
 80082ee:	4680      	mov	r8, r0
 80082f0:	4689      	mov	r9, r1
 80082f2:	dd48      	ble.n	8008386 <__ieee754_log+0x2c6>
 80082f4:	4b4e      	ldr	r3, [pc, #312]	; (8008430 <__ieee754_log+0x370>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	4650      	mov	r0, sl
 80082fa:	4659      	mov	r1, fp
 80082fc:	f7f8 f984 	bl	8000608 <__aeabi_dmul>
 8008300:	4652      	mov	r2, sl
 8008302:	465b      	mov	r3, fp
 8008304:	f7f8 f980 	bl	8000608 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4606      	mov	r6, r0
 800830e:	460f      	mov	r7, r1
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	f7f7 ffc2 	bl	800029c <__adddf3>
 8008318:	ec53 2b18 	vmov	r2, r3, d8
 800831c:	f7f8 f974 	bl	8000608 <__aeabi_dmul>
 8008320:	4680      	mov	r8, r0
 8008322:	4689      	mov	r9, r1
 8008324:	b964      	cbnz	r4, 8008340 <__ieee754_log+0x280>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	4630      	mov	r0, r6
 800832c:	4639      	mov	r1, r7
 800832e:	f7f7 ffb3 	bl	8000298 <__aeabi_dsub>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4650      	mov	r0, sl
 8008338:	4659      	mov	r1, fp
 800833a:	f7f7 ffad 	bl	8000298 <__aeabi_dsub>
 800833e:	e6d6      	b.n	80080ee <__ieee754_log+0x2e>
 8008340:	a321      	add	r3, pc, #132	; (adr r3, 80083c8 <__ieee754_log+0x308>)
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	ec51 0b19 	vmov	r0, r1, d9
 800834a:	f7f8 f95d 	bl	8000608 <__aeabi_dmul>
 800834e:	a320      	add	r3, pc, #128	; (adr r3, 80083d0 <__ieee754_log+0x310>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	ec51 0b19 	vmov	r0, r1, d9
 800835c:	f7f8 f954 	bl	8000608 <__aeabi_dmul>
 8008360:	4642      	mov	r2, r8
 8008362:	464b      	mov	r3, r9
 8008364:	f7f7 ff9a 	bl	800029c <__adddf3>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4630      	mov	r0, r6
 800836e:	4639      	mov	r1, r7
 8008370:	f7f7 ff92 	bl	8000298 <__aeabi_dsub>
 8008374:	4652      	mov	r2, sl
 8008376:	465b      	mov	r3, fp
 8008378:	f7f7 ff8e 	bl	8000298 <__aeabi_dsub>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4620      	mov	r0, r4
 8008382:	4629      	mov	r1, r5
 8008384:	e7d9      	b.n	800833a <__ieee754_log+0x27a>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	f7f7 ff83 	bl	8000298 <__aeabi_dsub>
 8008392:	ec53 2b18 	vmov	r2, r3, d8
 8008396:	f7f8 f937 	bl	8000608 <__aeabi_dmul>
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	2c00      	cmp	r4, #0
 80083a0:	f43f af23 	beq.w	80081ea <__ieee754_log+0x12a>
 80083a4:	a308      	add	r3, pc, #32	; (adr r3, 80083c8 <__ieee754_log+0x308>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	ec51 0b19 	vmov	r0, r1, d9
 80083ae:	f7f8 f92b 	bl	8000608 <__aeabi_dmul>
 80083b2:	a307      	add	r3, pc, #28	; (adr r3, 80083d0 <__ieee754_log+0x310>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	4604      	mov	r4, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	ec51 0b19 	vmov	r0, r1, d9
 80083c0:	e727      	b.n	8008212 <__ieee754_log+0x152>
 80083c2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008418 <__ieee754_log+0x358>
 80083c6:	e694      	b.n	80080f2 <__ieee754_log+0x32>
 80083c8:	fee00000 	.word	0xfee00000
 80083cc:	3fe62e42 	.word	0x3fe62e42
 80083d0:	35793c76 	.word	0x35793c76
 80083d4:	3dea39ef 	.word	0x3dea39ef
 80083d8:	55555555 	.word	0x55555555
 80083dc:	3fd55555 	.word	0x3fd55555
 80083e0:	df3e5244 	.word	0xdf3e5244
 80083e4:	3fc2f112 	.word	0x3fc2f112
 80083e8:	96cb03de 	.word	0x96cb03de
 80083ec:	3fc74664 	.word	0x3fc74664
 80083f0:	94229359 	.word	0x94229359
 80083f4:	3fd24924 	.word	0x3fd24924
 80083f8:	55555593 	.word	0x55555593
 80083fc:	3fe55555 	.word	0x3fe55555
 8008400:	d078c69f 	.word	0xd078c69f
 8008404:	3fc39a09 	.word	0x3fc39a09
 8008408:	1d8e78af 	.word	0x1d8e78af
 800840c:	3fcc71c5 	.word	0x3fcc71c5
 8008410:	9997fa04 	.word	0x9997fa04
 8008414:	3fd99999 	.word	0x3fd99999
	...
 8008420:	c3500000 	.word	0xc3500000
 8008424:	43500000 	.word	0x43500000
 8008428:	7fefffff 	.word	0x7fefffff
 800842c:	3ff00000 	.word	0x3ff00000
 8008430:	3fe00000 	.word	0x3fe00000

08008434 <_init>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr

08008440 <_fini>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	bf00      	nop
 8008444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008446:	bc08      	pop	{r3}
 8008448:	469e      	mov	lr, r3
 800844a:	4770      	bx	lr
