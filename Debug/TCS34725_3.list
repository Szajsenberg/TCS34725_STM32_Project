
TCS34725_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000769c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf0  08007bf0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf8  08007bf8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  2000006c  08007c6c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  08007c6c  00020a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf74  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002124  00000000  00000000  0002d053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088a  00000000  00000000  0002fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017378  00000000  00000000  00030502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edb3  00000000  00000000  0004787a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a405  00000000  00000000  0005662d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c74  00000000  00000000  000e0a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e46a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007824 	.word	0x08007824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007824 	.word	0x08007824

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <I2C_Write8BIT>:

uint8_t data[2];

//Funkcja ustawiająca wartość rejestru 8-bitowego
void I2C_Write8BIT (uint8_t reg, uint32_t value)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  uint8_t pkt[2];
  pkt[0] = (TCS34725_COMMAND_BIT | reg);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	733b      	strb	r3, [r7, #12]
  pkt[1] = (value & 0xFF);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit_IT(&hi2c1, TCS34725_ADDRESS, pkt, 2);
 8000ef0:	f107 020c 	add.w	r2, r7, #12
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	2152      	movs	r1, #82	; 0x52
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <I2C_Write8BIT+0x34>)
 8000efa:	f001 fd15 	bl	8002928 <HAL_I2C_Master_Transmit_IT>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000894 	.word	0x20000894

08000f0c <I2C_Read8BIT>:


//Funkcja odczytująca rejestr 8-bitowy
uint8_t I2C_Read8BIT(uint8_t reg)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	uint8_t pkt;
	pkt = (TCS34725_COMMAND_BIT | reg);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	73fb      	strb	r3, [r7, #15]
	//HAL_I2C_Master_Transmit_IT(&hi2c1, TCS34725_ADDRESS, &pkt, 1);
	HAL_I2C_Master_Receive_IT(&hi2c1, TCS34725_ADDRESS, &pkt, 1);
 8000f20:	f107 020f 	add.w	r2, r7, #15
 8000f24:	2301      	movs	r3, #1
 8000f26:	2152      	movs	r1, #82	; 0x52
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <I2C_Read8BIT+0x2c>)
 8000f2a:	f001 fda3 	bl	8002a74 <HAL_I2C_Master_Receive_IT>
	return pkt;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000894 	.word	0x20000894

08000f3c <HAL_I2C_MasterTxCpltCallback>:
	if(value>101 && value<154) 	I2C_Write8BIT(ATIME_REG, 0xd5);
	if(value>154 && value<700) 	I2C_Write8BIT(ATIME_REG, 0x00);
}

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	USART_fsend("GIT");
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000f46:	f000 f899 	bl	800107c <USART_fsend>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	0800783c 	.word	0x0800783c

08000f58 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	USART_fsend("GIT");
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000f62:	f000 f88b 	bl	800107c <USART_fsend>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	0800783c 	.word	0x0800783c

08000f74 <USART_start>:
__IO int USART_TX_Busy=0;
__IO int USART_RX_Empty=0;
__IO int USART_RX_Busy=0;


void USART_start(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4903      	ldr	r1, [pc, #12]	; (8000f88 <USART_start+0x14>)
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <USART_start+0x18>)
 8000f7e:	f003 fff1 	bl	8004f64 <HAL_UART_Receive_IT>
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000670 	.word	0x20000670
 8000f8c:	200008e8 	.word	0x200008e8

08000f90 <BX_haveData>:

uint8_t BX_haveData(){
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
	if(USART_RX_Empty==USART_RX_Busy)
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <BX_haveData+0x20>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <BX_haveData+0x24>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d101      	bne.n	8000fa4 <BX_haveData+0x14>
		return 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e000      	b.n	8000fa6 <BX_haveData+0x16>
	else return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	20000780 	.word	0x20000780
 8000fb4:	20000784 	.word	0x20000784

08000fb8 <USART_getchar>:

//Funkcja pobierająca znak z buforu kołowego
uint8_t USART_getchar(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
uint8_t tmp;
	if(BX_haveData()){
 8000fbe:	f7ff ffe7 	bl	8000f90 <BX_haveData>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <USART_getchar+0x38>
		 tmp=USART_RxBuf[USART_RX_Busy];
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <USART_getchar+0x44>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <USART_getchar+0x48>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	71fb      	strb	r3, [r7, #7]
		 USART_RX_Busy++;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <USART_getchar+0x44>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <USART_getchar+0x44>)
 8000fda:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Busy >= MAX_FRAME_SIZE)USART_RX_Busy=0;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <USART_getchar+0x44>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000fe4:	dd02      	ble.n	8000fec <USART_getchar+0x34>
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <USART_getchar+0x44>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
		 return tmp;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	e000      	b.n	8000ff2 <USART_getchar+0x3a>
	}else return -1;
 8000ff0:	23ff      	movs	r3, #255	; 0xff
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000784 	.word	0x20000784
 8001000:	20000670 	.word	0x20000670

08001004 <CALCULATE_CRC>:

uint8_t CALCULATE_CRC(char *data, uint16_t length) {
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
    const uint8_t WIELOMIAN = 0x9B;
 8001010:	239b      	movs	r3, #155	; 0x9b
 8001012:	73fb      	strb	r3, [r7, #15]
    uint8_t MY_CRC = 0xFF;
 8001014:	23ff      	movs	r3, #255	; 0xff
 8001016:	75fb      	strb	r3, [r7, #23]

    for (uint16_t i = 0; i < length; ++i) {
 8001018:	2300      	movs	r3, #0
 800101a:	82bb      	strh	r3, [r7, #20]
 800101c:	e022      	b.n	8001064 <CALCULATE_CRC+0x60>
    	MY_CRC ^= data[i];
 800101e:	8abb      	ldrh	r3, [r7, #20]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	4053      	eors	r3, r2
 800102a:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	e012      	b.n	8001058 <CALCULATE_CRC+0x54>
            if (MY_CRC & 0x80)
 8001032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	da08      	bge.n	800104c <CALCULATE_CRC+0x48>
            	MY_CRC = (MY_CRC << 1) ^ WIELOMIAN;
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	b25a      	sxtb	r2, r3
 8001040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001044:	4053      	eors	r3, r2
 8001046:	b25b      	sxtb	r3, r3
 8001048:	75fb      	strb	r3, [r7, #23]
 800104a:	e002      	b.n	8001052 <CALCULATE_CRC+0x4e>
            else
            	MY_CRC <<= 1;
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	3301      	adds	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	2b07      	cmp	r3, #7
 800105c:	dde9      	ble.n	8001032 <CALCULATE_CRC+0x2e>
    for (uint16_t i = 0; i < length; ++i) {
 800105e:	8abb      	ldrh	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	82bb      	strh	r3, [r7, #20]
 8001064:	8aba      	ldrh	r2, [r7, #20]
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	429a      	cmp	r2, r3
 800106a:	d3d8      	bcc.n	800101e <CALCULATE_CRC+0x1a>
        }
    }
    return MY_CRC;
 800106c:	7dfb      	ldrb	r3, [r7, #23]
}
 800106e:	4618      	mov	r0, r3
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <USART_fsend>:

void USART_fsend(char* format,...){ // Funkcja odpowiedzialna za przesyłanie tekstu do komputera
 800107c:	b40f      	push	{r0, r1, r2, r3}
 800107e:	b580      	push	{r7, lr}
 8001080:	b0ea      	sub	sp, #424	; 0x1a8
 8001082:	af02      	add	r7, sp, #8
	char tmp_rs[128];
	char FRAME[MAX_FRAME_SIZE];
	__IO int idx;
	va_list arglist; // Deklaracja listy argumentów
	va_start(arglist,format);
 8001084:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001088:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800108c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001090:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_rs,format,arglist); //Wpisanie do bufora tmp_rs sformatowanego tekstu
 8001092:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001096:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800109a:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80010a4:	f005 f84a 	bl	800613c <vsiprintf>
	va_end(arglist); // Koniec przetwarzania zmienych argumentow
	idx=USART_TX_Empty; // Przypisanie do idx wartości wskaźnika
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <USART_fsend+0x174>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010b0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80010b4:	601a      	str	r2, [r3, #0]

	uint8_t CHECKSUM=CALCULATE_CRC(tmp_rs, strlen(tmp_rs));
 80010b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f89a 	bl	80001f4 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff9a 	bl	8001004 <CALCULATE_CRC>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	sprintf(FRAME,"%c%s%02x%c\r\n",STX,tmp_rs,CHECKSUM,ETB);
 80010d6:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80010da:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80010de:	f107 0010 	add.w	r0, r7, #16
 80010e2:	2117      	movs	r1, #23
 80010e4:	9101      	str	r1, [sp, #4]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	2202      	movs	r2, #2
 80010ec:	4941      	ldr	r1, [pc, #260]	; (80011f4 <USART_fsend+0x178>)
 80010ee:	f004 ffab 	bl	8006048 <siprintf>

	for(int i=0;i<strlen(FRAME);i++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80010f8:	e02c      	b.n	8001154 <USART_fsend+0xd8>
		USART_TxBuf[idx]=FRAME[i]; //Przypisujemy do bufora znaki z tmp_rs
 80010fa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001108:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 800110c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001110:	440a      	add	r2, r1
 8001112:	7811      	ldrb	r1, [r2, #0]
 8001114:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <USART_fsend+0x17c>)
 8001116:	54d1      	strb	r1, [r2, r3]
		idx++; // Zwiększamy wskaźnik
 8001118:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800111c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001128:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800112c:	601a      	str	r2, [r3, #0]
		if(idx >= USART_TXBUF_LEN)idx=0; // Jeżeli datarlśmy do końca bufora to zawijamy
 800112e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001132:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 800113c:	db05      	blt.n	800114a <USART_fsend+0xce>
 800113e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001142:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
	for(int i=0;i<strlen(FRAME);i++){
 800114a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800114e:	3301      	adds	r3, #1
 8001150:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f84b 	bl	80001f4 <strlen>
 800115e:	4602      	mov	r2, r0
 8001160:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001164:	429a      	cmp	r2, r3
 8001166:	d8c8      	bhi.n	80010fa <USART_fsend+0x7e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
	}
	__disable_irq();
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 800116c:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <USART_fsend+0x174>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <USART_fsend+0x180>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d12a      	bne.n	80011ce <USART_fsend+0x152>
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <USART_fsend+0x184>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	2b80      	cmp	r3, #128	; 0x80
 8001184:	d123      	bne.n	80011ce <USART_fsend+0x152>
		USART_TX_Empty=idx; //
 8001186:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800118a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <USART_fsend+0x174>)
 8001192:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <USART_fsend+0x180>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <USART_fsend+0x17c>)
 800119a:	5cd2      	ldrb	r2, [r2, r3]
 800119c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011a0:	f2a3 1399 	subw	r3, r3, #409	; 0x199
 80011a4:	701a      	strb	r2, [r3, #0]
		USART_TX_Busy++;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <USART_fsend+0x180>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a13      	ldr	r2, [pc, #76]	; (80011fc <USART_fsend+0x180>)
 80011ae:	6013      	str	r3, [r2, #0]

		if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <USART_fsend+0x180>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 80011b8:	db02      	blt.n	80011c0 <USART_fsend+0x144>
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <USART_fsend+0x180>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	2201      	movs	r2, #1
 80011c4:	4619      	mov	r1, r3
 80011c6:	480e      	ldr	r0, [pc, #56]	; (8001200 <USART_fsend+0x184>)
 80011c8:	f003 fe87 	bl	8004eda <HAL_UART_Transmit_IT>
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 80011cc:	e006      	b.n	80011dc <USART_fsend+0x160>
	}else{
		USART_TX_Empty=idx;
 80011ce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <USART_fsend+0x174>)
 80011da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011dc:	b662      	cpsie	i
}
 80011de:	bf00      	nop
	}
	__enable_irq();
}
 80011e0:	bf00      	nop
 80011e2:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80011e6:	46bd      	mov	sp, r7
 80011e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011ec:	b004      	add	sp, #16
 80011ee:	4770      	bx	lr
 80011f0:	20000778 	.word	0x20000778
 80011f4:	08007840 	.word	0x08007840
 80011f8:	20000088 	.word	0x20000088
 80011fc:	2000077c 	.word	0x2000077c
 8001200:	200008e8 	.word	0x200008e8

08001204 <USART_GETFRAME>:

uint8_t USART_GETFRAME(char *buf){
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	static char FRAME[MAX_FRAME_SIZE];
	static uint8_t FRAME_STATE=0;
	static uint16_t FRAME_IDX=0;
	uint8_t ZNAK=USART_getchar();
 800120c:	f7ff fed4 	bl	8000fb8 <USART_getchar>
 8001210:	4603      	mov	r3, r0
 8001212:	74fb      	strb	r3, [r7, #19]


	switch(ZNAK){
 8001214:	7cfb      	ldrb	r3, [r7, #19]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d002      	beq.n	8001220 <USART_GETFRAME+0x1c>
 800121a:	2b17      	cmp	r3, #23
 800121c:	d013      	beq.n	8001246 <USART_GETFRAME+0x42>
 800121e:	e089      	b.n	8001334 <USART_GETFRAME+0x130>
	case STX:
		FRAME_STATE=1;
 8001220:	4b57      	ldr	r3, [pc, #348]	; (8001380 <USART_GETFRAME+0x17c>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
		FRAME_IDX=0;
 8001226:	4b57      	ldr	r3, [pc, #348]	; (8001384 <USART_GETFRAME+0x180>)
 8001228:	2200      	movs	r2, #0
 800122a:	801a      	strh	r2, [r3, #0]
		FRAME[FRAME_IDX]=ZNAK;
 800122c:	4b55      	ldr	r3, [pc, #340]	; (8001384 <USART_GETFRAME+0x180>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4a55      	ldr	r2, [pc, #340]	; (8001388 <USART_GETFRAME+0x184>)
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	5453      	strb	r3, [r2, r1]
		FRAME_IDX++;
 8001238:	4b52      	ldr	r3, [pc, #328]	; (8001384 <USART_GETFRAME+0x180>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	b29a      	uxth	r2, r3
 8001240:	4b50      	ldr	r3, [pc, #320]	; (8001384 <USART_GETFRAME+0x180>)
 8001242:	801a      	strh	r2, [r3, #0]
	break;
 8001244:	e096      	b.n	8001374 <USART_GETFRAME+0x170>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	case ETB:
		if(FRAME_STATE==1){
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <USART_GETFRAME+0x17c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	f040 808d 	bne.w	800136a <USART_GETFRAME+0x166>
			FRAME_STATE=0;
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <USART_GETFRAME+0x17c>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
			FRAME[FRAME_IDX]=ZNAK;
 8001256:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <USART_GETFRAME+0x180>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	4619      	mov	r1, r3
 800125c:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <USART_GETFRAME+0x184>)
 800125e:	7cfb      	ldrb	r3, [r7, #19]
 8001260:	5453      	strb	r3, [r2, r1]
			FRAME_IDX++;
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <USART_GETFRAME+0x180>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <USART_GETFRAME+0x180>)
 800126c:	801a      	strh	r2, [r3, #0]

			if (FRAME_IDX < 5){
 800126e:	4b45      	ldr	r3, [pc, #276]	; (8001384 <USART_GETFRAME+0x180>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d97b      	bls.n	800136e <USART_GETFRAME+0x16a>
				break;
			}

			if(FRAME_IDX>=MAX_FRAME_SIZE){
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <USART_GETFRAME+0x180>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800127e:	d903      	bls.n	8001288 <USART_GETFRAME+0x84>
				USART_fsend("FRAME RANGE EXCEEDED;");
 8001280:	4842      	ldr	r0, [pc, #264]	; (800138c <USART_GETFRAME+0x188>)
 8001282:	f7ff fefb 	bl	800107c <USART_fsend>
				break;
 8001286:	e075      	b.n	8001374 <USART_GETFRAME+0x170>
			}

			if(FRAME[FRAME_IDX-4]==SEPARATOR){
 8001288:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <USART_GETFRAME+0x180>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	3b04      	subs	r3, #4
 800128e:	4a3e      	ldr	r2, [pc, #248]	; (8001388 <USART_GETFRAME+0x184>)
 8001290:	5cd3      	ldrb	r3, [r2, r3]
 8001292:	2b3b      	cmp	r3, #59	; 0x3b
 8001294:	d169      	bne.n	800136a <USART_GETFRAME+0x166>
				char GIVEN_CRC[3]={""};
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <USART_GETFRAME+0x18c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	743b      	strb	r3, [r7, #16]
 800129c:	f107 0311 	add.w	r3, r7, #17
 80012a0:	2200      	movs	r2, #0
 80012a2:	801a      	strh	r2, [r3, #0]
				char CALC_CRC[3]={""};
 80012a4:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <USART_GETFRAME+0x18c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	733b      	strb	r3, [r7, #12]
 80012aa:	f107 030d 	add.w	r3, r7, #13
 80012ae:	2200      	movs	r2, #0
 80012b0:	801a      	strh	r2, [r3, #0]

				sprintf(CALC_CRC,"%02x",CALCULATE_CRC(FRAME+1,FRAME_IDX-4));
 80012b2:	4a38      	ldr	r2, [pc, #224]	; (8001394 <USART_GETFRAME+0x190>)
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <USART_GETFRAME+0x180>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	3b04      	subs	r3, #4
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f7ff fea0 	bl	8001004 <CALCULATE_CRC>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4932      	ldr	r1, [pc, #200]	; (8001398 <USART_GETFRAME+0x194>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 feba 	bl	8006048 <siprintf>
				strncpy(GIVEN_CRC,FRAME+(FRAME_IDX-3),2);
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <USART_GETFRAME+0x180>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	3b03      	subs	r3, #3
 80012da:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <USART_GETFRAME+0x184>)
 80012dc:	1899      	adds	r1, r3, r2
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2202      	movs	r2, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 ff4d 	bl	8006184 <strncpy>

				if(GIVEN_CRC[0]==CALC_CRC[0] && GIVEN_CRC[1]==CALC_CRC[1]){
 80012ea:	7c3a      	ldrb	r2, [r7, #16]
 80012ec:	7b3b      	ldrb	r3, [r7, #12]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d13b      	bne.n	800136a <USART_GETFRAME+0x166>
 80012f2:	7c7a      	ldrb	r2, [r7, #17]
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d137      	bne.n	800136a <USART_GETFRAME+0x166>
					for(int i=1;i<FRAME_IDX-3;i++){
 80012fa:	2301      	movs	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00b      	b.n	8001318 <USART_GETFRAME+0x114>
						buf[i-1]=FRAME[i];
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3b01      	subs	r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	491f      	ldr	r1, [pc, #124]	; (8001388 <USART_GETFRAME+0x184>)
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	440a      	add	r2, r1
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	701a      	strb	r2, [r3, #0]
					for(int i=1;i<FRAME_IDX-3;i++){
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <USART_GETFRAME+0x180>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	3b03      	subs	r3, #3
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbed      	blt.n	8001300 <USART_GETFRAME+0xfc>
					}
					buf[FRAME_IDX-4]=0;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <USART_GETFRAME+0x180>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	3b04      	subs	r3, #4
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	break;
 8001332:	e01a      	b.n	800136a <USART_GETFRAME+0x166>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	default:
	if(FRAME_STATE==1){
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <USART_GETFRAME+0x17c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d11a      	bne.n	8001372 <USART_GETFRAME+0x16e>
		if (!(ZNAK > 0x21 && ZNAK < 0x7E)){
 800133c:	7cfb      	ldrb	r3, [r7, #19]
 800133e:	2b21      	cmp	r3, #33	; 0x21
 8001340:	d902      	bls.n	8001348 <USART_GETFRAME+0x144>
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	2b7d      	cmp	r3, #125	; 0x7d
 8001346:	d903      	bls.n	8001350 <USART_GETFRAME+0x14c>
			FRAME_STATE = 0;
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <USART_GETFRAME+0x17c>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
			break;
 800134e:	e011      	b.n	8001374 <USART_GETFRAME+0x170>
		}
		else{
			FRAME[FRAME_IDX] = ZNAK;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <USART_GETFRAME+0x180>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <USART_GETFRAME+0x184>)
 8001358:	7cfb      	ldrb	r3, [r7, #19]
 800135a:	5453      	strb	r3, [r2, r1]
			FRAME_IDX++;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <USART_GETFRAME+0x180>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <USART_GETFRAME+0x180>)
 8001366:	801a      	strh	r2, [r3, #0]
		}
	}
	break;
 8001368:	e003      	b.n	8001372 <USART_GETFRAME+0x16e>
	break;
 800136a:	bf00      	nop
 800136c:	e002      	b.n	8001374 <USART_GETFRAME+0x170>
				break;
 800136e:	bf00      	nop
 8001370:	e000      	b.n	8001374 <USART_GETFRAME+0x170>
	break;
 8001372:	bf00      	nop
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	}

	return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000788 	.word	0x20000788
 8001384:	2000078a 	.word	0x2000078a
 8001388:	2000078c 	.word	0x2000078c
 800138c:	08007850 	.word	0x08007850
 8001390:	08007870 	.word	0x08007870
 8001394:	2000078d 	.word	0x2000078d
 8001398:	08007868 	.word	0x08007868

0800139c <ParseCommand>:


//Funkcja odpowiedzialna za rozpoznawanie komend
void ParseCommand(char *buf){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	char * commBuff = strtok(buf,";");
 80013a4:	4973      	ldr	r1, [pc, #460]	; (8001574 <ParseCommand+0x1d8>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f004 ff00 	bl	80061ac <strtok>
 80013ac:	60f8      	str	r0, [r7, #12]
	while(commBuff!=NULL){
 80013ae:	e0d8      	b.n	8001562 <ParseCommand+0x1c6>
		if(strncmp(commBuff,"START",5)==0){
 80013b0:	2205      	movs	r2, #5
 80013b2:	4971      	ldr	r1, [pc, #452]	; (8001578 <ParseCommand+0x1dc>)
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f004 fed3 	bl	8006160 <strncmp>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <ParseCommand+0x32>
			LIVE_TOGGLE=1;
 80013c0:	4b6e      	ldr	r3, [pc, #440]	; (800157c <ParseCommand+0x1e0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
			USART_fsend("STARTED!;");
 80013c6:	486e      	ldr	r0, [pc, #440]	; (8001580 <ParseCommand+0x1e4>)
 80013c8:	f7ff fe58 	bl	800107c <USART_fsend>
 80013cc:	e0c4      	b.n	8001558 <ParseCommand+0x1bc>
		}
		else if(strncmp(commBuff,"STOP",4)==0){
 80013ce:	2204      	movs	r2, #4
 80013d0:	496c      	ldr	r1, [pc, #432]	; (8001584 <ParseCommand+0x1e8>)
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f004 fec4 	bl	8006160 <strncmp>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <ParseCommand+0x50>
			LIVE_TOGGLE=0;
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <ParseCommand+0x1e0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
			USART_fsend("STOPPED!;");
 80013e4:	4868      	ldr	r0, [pc, #416]	; (8001588 <ParseCommand+0x1ec>)
 80013e6:	f7ff fe49 	bl	800107c <USART_fsend>
 80013ea:	e0b5      	b.n	8001558 <ParseCommand+0x1bc>
		}
		else if(strncmp(commBuff,"PREVIEW[ON]",12)==0){
 80013ec:	4967      	ldr	r1, [pc, #412]	; (800158c <ParseCommand+0x1f0>)
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7fe fef6 	bl	80001e0 <strcmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <ParseCommand+0x6c>
			PREVIEW_TOGGLE=1;
 80013fa:	4b65      	ldr	r3, [pc, #404]	; (8001590 <ParseCommand+0x1f4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
			USART_fsend("PREVIEW TURNED ON!;");
 8001400:	4864      	ldr	r0, [pc, #400]	; (8001594 <ParseCommand+0x1f8>)
 8001402:	f7ff fe3b 	bl	800107c <USART_fsend>
 8001406:	e0a7      	b.n	8001558 <ParseCommand+0x1bc>
		}
		else if(strncmp(commBuff,"PREVIEW[OFF]",12)==0){
 8001408:	220c      	movs	r2, #12
 800140a:	4963      	ldr	r1, [pc, #396]	; (8001598 <ParseCommand+0x1fc>)
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f004 fea7 	bl	8006160 <strncmp>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d106      	bne.n	8001426 <ParseCommand+0x8a>
			PREVIEW_TOGGLE=0;
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <ParseCommand+0x1f4>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
			USART_fsend("PREVIEW TURNED OFF!;");
 800141e:	485f      	ldr	r0, [pc, #380]	; (800159c <ParseCommand+0x200>)
 8001420:	f7ff fe2c 	bl	800107c <USART_fsend>
 8001424:	e098      	b.n	8001558 <ParseCommand+0x1bc>
		}
		else if (strncmp(commBuff, "SETINTERVAL[", 12) == 0 && buf[strlen(buf) - 1] == ']'){
 8001426:	220c      	movs	r2, #12
 8001428:	495d      	ldr	r1, [pc, #372]	; (80015a0 <ParseCommand+0x204>)
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f004 fe98 	bl	8006160 <strncmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d145      	bne.n	80014c2 <ParseCommand+0x126>
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7fe fedc 	bl	80001f4 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	3b01      	subs	r3, #1
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b5d      	cmp	r3, #93	; 0x5d
 8001448:	d13b      	bne.n	80014c2 <ParseCommand+0x126>
			if(atoi(buf + 12)==0){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	330c      	adds	r3, #12
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fca8 	bl	8005da4 <atoi>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <ParseCommand+0xc6>
				USART_fsend("WRONG INTERVAL VALUE;");
 800145a:	4852      	ldr	r0, [pc, #328]	; (80015a4 <ParseCommand+0x208>)
 800145c:	f7ff fe0e 	bl	800107c <USART_fsend>
			if(atoi(buf + 12)==0){
 8001460:	e07a      	b.n	8001558 <ParseCommand+0x1bc>
			}
			else if(atoi(buf + 12)<3){
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	330c      	adds	r3, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f004 fc9c 	bl	8005da4 <atoi>
 800146c:	4603      	mov	r3, r0
 800146e:	2b02      	cmp	r3, #2
 8001470:	dc0a      	bgt.n	8001488 <ParseCommand+0xec>
				USART_fsend("GIVEN VALUE IS TOO LOW: %d ;", atoi(buf + 12));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	330c      	adds	r3, #12
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fc94 	bl	8005da4 <atoi>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	4849      	ldr	r0, [pc, #292]	; (80015a8 <ParseCommand+0x20c>)
 8001482:	f7ff fdfb 	bl	800107c <USART_fsend>
			if(atoi(buf + 12)==0){
 8001486:	e067      	b.n	8001558 <ParseCommand+0x1bc>
			}
			else if(atoi(buf + 12)>65535){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	330c      	adds	r3, #12
 800148c:	4618      	mov	r0, r3
 800148e:	f004 fc89 	bl	8005da4 <atoi>
 8001492:	4603      	mov	r3, r0
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	db03      	blt.n	80014a2 <ParseCommand+0x106>
				USART_fsend("INTERVAL LIMIT EXCEEDED;");
 800149a:	4844      	ldr	r0, [pc, #272]	; (80015ac <ParseCommand+0x210>)
 800149c:	f7ff fdee 	bl	800107c <USART_fsend>
			if(atoi(buf + 12)==0){
 80014a0:	e05a      	b.n	8001558 <ParseCommand+0x1bc>
			}
			else{
				Delay = atoi(buf + 12);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	330c      	adds	r3, #12
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fc7c 	bl	8005da4 <atoi>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <ParseCommand+0x214>)
 80014b2:	801a      	strh	r2, [r3, #0]
				USART_fsend("INTERVAL SET TO %d MS;",Delay);
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <ParseCommand+0x214>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	483e      	ldr	r0, [pc, #248]	; (80015b4 <ParseCommand+0x218>)
 80014bc:	f7ff fdde 	bl	800107c <USART_fsend>
			if(atoi(buf + 12)==0){
 80014c0:	e04a      	b.n	8001558 <ParseCommand+0x1bc>
				//I2C_RGBCTime(Delay);
			}
		}
		else if(strncmp(commBuff,"SHOWINT",7)==0){
 80014c2:	2207      	movs	r2, #7
 80014c4:	493c      	ldr	r1, [pc, #240]	; (80015b8 <ParseCommand+0x21c>)
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f004 fe4a 	bl	8006160 <strncmp>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d106      	bne.n	80014e0 <ParseCommand+0x144>
			USART_fsend("INTERVAL= %dms",Delay);
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <ParseCommand+0x214>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4838      	ldr	r0, [pc, #224]	; (80015bc <ParseCommand+0x220>)
 80014da:	f7ff fdcf 	bl	800107c <USART_fsend>
 80014de:	e03b      	b.n	8001558 <ParseCommand+0x1bc>
		}
		else if (strncmp(commBuff, "SHOWARCHIVAL[", 13) == 0 && buf[strlen(buf) - 1] == ']'){
 80014e0:	220d      	movs	r2, #13
 80014e2:	4937      	ldr	r1, [pc, #220]	; (80015c0 <ParseCommand+0x224>)
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f004 fe3b 	bl	8006160 <strncmp>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d130      	bne.n	8001552 <ParseCommand+0x1b6>
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7fe fe7f 	bl	80001f4 <strlen>
 80014f6:	4603      	mov	r3, r0
 80014f8:	3b01      	subs	r3, #1
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b5d      	cmp	r3, #93	; 0x5d
 8001502:	d126      	bne.n	8001552 <ParseCommand+0x1b6>
			uint16_t arg1 = atoi(commBuff+13);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	330d      	adds	r3, #13
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fc4b 	bl	8005da4 <atoi>
 800150e:	4603      	mov	r3, r0
 8001510:	817b      	strh	r3, [r7, #10]
			uint16_t arg2 = atoi(commBuff+14+((int)log10(arg1)+1));
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f80d 	bl	8000534 <__aeabi_ui2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	f005 fef1 	bl	8007308 <log10>
 8001526:	ec53 2b10 	vmov	r2, r3, d0
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb2b 	bl	8000b88 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	330f      	adds	r3, #15
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fc32 	bl	8005da4 <atoi>
 8001540:	4603      	mov	r3, r0
 8001542:	813b      	strh	r3, [r7, #8]
			ShowArchivalData(arg1,arg2);
 8001544:	893a      	ldrh	r2, [r7, #8]
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f83c 	bl	80015c8 <ShowArchivalData>
		else if (strncmp(commBuff, "SHOWARCHIVAL[", 13) == 0 && buf[strlen(buf) - 1] == ']'){
 8001550:	e002      	b.n	8001558 <ParseCommand+0x1bc>
		}
		else{
			USART_fsend("UNRECOGNIZED COMMAND!;");
 8001552:	481c      	ldr	r0, [pc, #112]	; (80015c4 <ParseCommand+0x228>)
 8001554:	f7ff fd92 	bl	800107c <USART_fsend>
		}
		commBuff = strtok( NULL,";");
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <ParseCommand+0x1d8>)
 800155a:	2000      	movs	r0, #0
 800155c:	f004 fe26 	bl	80061ac <strtok>
 8001560:	60f8      	str	r0, [r7, #12]
	while(commBuff!=NULL){
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f47f af23 	bne.w	80013b0 <ParseCommand+0x14>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	08007874 	.word	0x08007874
 8001578:	08007878 	.word	0x08007878
 800157c:	2000092c 	.word	0x2000092c
 8001580:	08007880 	.word	0x08007880
 8001584:	0800788c 	.word	0x0800788c
 8001588:	08007894 	.word	0x08007894
 800158c:	080078a0 	.word	0x080078a0
 8001590:	2000092d 	.word	0x2000092d
 8001594:	080078ac 	.word	0x080078ac
 8001598:	080078c0 	.word	0x080078c0
 800159c:	080078d0 	.word	0x080078d0
 80015a0:	080078e8 	.word	0x080078e8
 80015a4:	080078f8 	.word	0x080078f8
 80015a8:	08007910 	.word	0x08007910
 80015ac:	08007930 	.word	0x08007930
 80015b0:	20000000 	.word	0x20000000
 80015b4:	0800794c 	.word	0x0800794c
 80015b8:	08007964 	.word	0x08007964
 80015bc:	0800796c 	.word	0x0800796c
 80015c0:	0800797c 	.word	0x0800797c
 80015c4:	0800798c 	.word	0x0800798c

080015c8 <ShowArchivalData>:


void ShowArchivalData(uint16_t x,uint16_t y){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	460a      	mov	r2, r1
 80015d2:	80fb      	strh	r3, [r7, #6]
 80015d4:	4613      	mov	r3, r2
 80015d6:	80bb      	strh	r3, [r7, #4]
	if((x > 0 && x <= 1200) && (y > 0 && y <= 1200)){
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02f      	beq.n	800163e <ShowArchivalData+0x76>
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80015e4:	d82b      	bhi.n	800163e <ShowArchivalData+0x76>
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d028      	beq.n	800163e <ShowArchivalData+0x76>
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80015f2:	d824      	bhi.n	800163e <ShowArchivalData+0x76>
		if(x>y){
 80015f4:	88fa      	ldrh	r2, [r7, #6]
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d910      	bls.n	800161e <ShowArchivalData+0x56>
			for(int i=x-1;i>=y-1;i--){
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	3b01      	subs	r3, #1
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	e006      	b.n	8001612 <ShowArchivalData+0x4a>
				if(ARCHIVED_DATA[i][0]>=0 && ARCHIVED_DATA[i][0]<257)
					USART_fsend("DATA NOT AVAIBLE AT INDEX=%d",i);
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <ShowArchivalData+0x88>)
 8001608:	f7ff fd38 	bl	800107c <USART_fsend>
			for(int i=x-1;i>=y-1;i--){
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3b01      	subs	r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	88bb      	ldrh	r3, [r7, #4]
 8001614:	3b01      	subs	r3, #1
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	daf3      	bge.n	8001604 <ShowArchivalData+0x3c>
		if(x>y){
 800161c:	e013      	b.n	8001646 <ShowArchivalData+0x7e>
				else
					USART_fsend("%d| \tR= %d\tG= %d\tB= %d;",i,ARCHIVED_DATA[i][0],ARCHIVED_DATA[i][1],ARCHIVED_DATA[i][2]);
			}
		}
		else{
			for(int i=x-1;i<=y-1;i++){
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	3b01      	subs	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e006      	b.n	8001634 <ShowArchivalData+0x6c>
				if(ARCHIVED_DATA[i][0]>=0 && ARCHIVED_DATA[i][0]<257)
					USART_fsend("DATA NOT AVAIBLE AT INDEX=%d",i);
 8001626:	68f9      	ldr	r1, [r7, #12]
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <ShowArchivalData+0x88>)
 800162a:	f7ff fd27 	bl	800107c <USART_fsend>
			for(int i=x-1;i<=y-1;i++){
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3301      	adds	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	88bb      	ldrh	r3, [r7, #4]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf4      	blt.n	8001626 <ShowArchivalData+0x5e>
		if(x>y){
 800163c:	e003      	b.n	8001646 <ShowArchivalData+0x7e>
				else
					USART_fsend("%d| \tR= %d\tG= %d\tB= %d;",i,ARCHIVED_DATA[i][0],ARCHIVED_DATA[i][1],ARCHIVED_DATA[i][2]);
			}
		}
	}else{USART_fsend("WRONG PARAMETER!");}
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <ShowArchivalData+0x8c>)
 8001640:	f7ff fd1c 	bl	800107c <USART_fsend>
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	080079a4 	.word	0x080079a4
 8001654:	080079c4 	.word	0x080079c4

08001658 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_UART_TxCpltCallback+0x58>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d11e      	bne.n	80016a6 <HAL_UART_TxCpltCallback+0x4e>
	   if(USART_TX_Empty!=USART_TX_Busy){
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_UART_TxCpltCallback+0x5c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_UART_TxCpltCallback+0x60>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d018      	beq.n	80016a6 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_UART_TxCpltCallback+0x60>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_UART_TxCpltCallback+0x64>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	73fb      	strb	r3, [r7, #15]
		   USART_TX_Busy++;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_UART_TxCpltCallback+0x60>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_UART_TxCpltCallback+0x60>)
 8001686:	6013      	str	r3, [r2, #0]
		   if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_UART_TxCpltCallback+0x60>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001690:	db02      	blt.n	8001698 <HAL_UART_TxCpltCallback+0x40>
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_UART_TxCpltCallback+0x60>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001698:	f107 030f 	add.w	r3, r7, #15
 800169c:	2201      	movs	r2, #1
 800169e:	4619      	mov	r1, r3
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <HAL_UART_TxCpltCallback+0x58>)
 80016a2:	f003 fc1a 	bl	8004eda <HAL_UART_Transmit_IT>
	   }
   }
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200008e8 	.word	0x200008e8
 80016b4:	20000778 	.word	0x20000778
 80016b8:	2000077c 	.word	0x2000077c
 80016bc:	20000088 	.word	0x20000088

080016c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_UART_RxCpltCallback+0x44>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d115      	bne.n	80016fc <HAL_UART_RxCpltCallback+0x3c>
		 USART_RX_Empty++;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_UART_RxCpltCallback+0x48>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <HAL_UART_RxCpltCallback+0x48>)
 80016d8:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Empty>=MAX_FRAME_SIZE)USART_RX_Empty=0;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_UART_RxCpltCallback+0x48>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016e2:	dd02      	ble.n	80016ea <HAL_UART_RxCpltCallback+0x2a>
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_UART_RxCpltCallback+0x48>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1);
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_UART_RxCpltCallback+0x48>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_UART_RxCpltCallback+0x4c>)
 80016f0:	4413      	add	r3, r2
 80016f2:	2201      	movs	r2, #1
 80016f4:	4619      	mov	r1, r3
 80016f6:	4803      	ldr	r0, [pc, #12]	; (8001704 <HAL_UART_RxCpltCallback+0x44>)
 80016f8:	f003 fc34 	bl	8004f64 <HAL_UART_Receive_IT>

	 }
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200008e8 	.word	0x200008e8
 8001708:	20000780 	.word	0x20000780
 800170c:	20000670 	.word	0x20000670

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ffc2 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b0c2      	sub	sp, #264	; 0x108
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ae:	f000 fbb5 	bl	8001f1c <HAL_Init>

  /* USER CODE BEGIN Init */
  SysTick_Config(84000000/1000);
 80017b2:	482c      	ldr	r0, [pc, #176]	; (8001864 <main+0xbc>)
 80017b4:	f7ff ffd6 	bl	8001764 <SysTick_Config>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 f85e 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017bc:	f000 f920 	bl	8001a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80017c0:	f000 f8f4 	bl	80019ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017c4:	f000 f8c4 	bl	8001950 <MX_I2C1_Init>

  //########	Inicjalizacja czujnika	########

  //HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET); //Wyłączenie diody led

  I2C_Write8BIT(ATIME_REG,0); //Ustawienie czasu RGBC
 80017c8:	2100      	movs	r1, #0
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fb82 	bl	8000ed4 <I2C_Write8BIT>
  I2C_Write8BIT(CONTROL_REG,0); //Ustawienie Gainu
 80017d0:	2100      	movs	r1, #0
 80017d2:	200f      	movs	r0, #15
 80017d4:	f7ff fb7e 	bl	8000ed4 <I2C_Write8BIT>
  I2C_Write8BIT(ENABLE_REG,3); //Włączenie czujnika
 80017d8:	2103      	movs	r1, #3
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fb7a 	bl	8000ed4 <I2C_Write8BIT>


  //############################################

  USART_start();
 80017e0:	f7ff fbc8 	bl	8000f74 <USART_start>
  USART_fsend("Hello User!;");
 80017e4:	4820      	ldr	r0, [pc, #128]	; (8001868 <main+0xc0>)
 80017e6:	f7ff fc49 	bl	800107c <USART_fsend>
  char FRAME[MAX_FRAME_SIZE]={""};
 80017ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80017ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	3304      	adds	r3, #4
 80017f8:	f240 1201 	movw	r2, #257	; 0x101
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fca6 	bl	8006150 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(BX_haveData()==1)
 8001804:	f7ff fbc4 	bl	8000f90 <BX_haveData>
 8001808:	4603      	mov	r3, r0
 800180a:	2b01      	cmp	r3, #1
 800180c:	d103      	bne.n	8001816 <main+0x6e>
		  USART_GETFRAME(FRAME);
 800180e:	463b      	mov	r3, r7
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fcf7 	bl	8001204 <USART_GETFRAME>

	  if(strlen(FRAME)!=0){
 8001816:	463b      	mov	r3, r7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <main+0x8a>
		  ParseCommand(FRAME);
 800181e:	463b      	mov	r3, r7
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fdbb 	bl	800139c <ParseCommand>
		  FRAME[0]=0;
 8001826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800182a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
	  }
	  if(LIVE_TOGGLE==1 && HAL_GetTick() % Delay == 0){
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <main+0xc4>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d1e4      	bne.n	8001804 <main+0x5c>
 800183a:	f000 fbd5 	bl	8001fe8 <HAL_GetTick>
 800183e:	4603      	mov	r3, r0
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <main+0xc8>)
 8001842:	8812      	ldrh	r2, [r2, #0]
 8001844:	fbb3 f1f2 	udiv	r1, r3, r2
 8001848:	fb01 f202 	mul.w	r2, r1, r2
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1d8      	bne.n	8001804 <main+0x5c>

		  //ADD_ARCHIVE_DATA(r,g,b);

		  //if(PREVIEW_TOGGLE==1)
			  //USART_fsend("R= %d\tG= %d\tB= %d;",r,g,b);
		USART_fsend("ID=0x%02x",I2C_Read8BIT(TCS34725_ID));
 8001852:	2012      	movs	r0, #18
 8001854:	f7ff fb5a 	bl	8000f0c <I2C_Read8BIT>
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <main+0xcc>)
 800185e:	f7ff fc0d 	bl	800107c <USART_fsend>
	  if(BX_haveData()==1)
 8001862:	e7cf      	b.n	8001804 <main+0x5c>
 8001864:	00014820 	.word	0x00014820
 8001868:	080079d8 	.word	0x080079d8
 800186c:	2000092c 	.word	0x2000092c
 8001870:	20000000 	.word	0x20000000
 8001874:	080079e8 	.word	0x080079e8

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	; 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	2230      	movs	r2, #48	; 0x30
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f004 fc62 	bl	8006150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <SystemClock_Config+0xd0>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a28      	ldr	r2, [pc, #160]	; (8001948 <SystemClock_Config+0xd0>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <SystemClock_Config+0xd0>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <SystemClock_Config+0xd4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c4:	4a21      	ldr	r2, [pc, #132]	; (800194c <SystemClock_Config+0xd4>)
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b1f      	ldr	r3, [pc, #124]	; (800194c <SystemClock_Config+0xd4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018dc:	2301      	movs	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e0:	2310      	movs	r3, #16
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e4:	2302      	movs	r3, #2
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018ec:	2310      	movs	r3, #16
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018fa:	2307      	movs	r3, #7
 80018fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fe04 	bl	8004510 <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800190e:	f000 f8e5 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f866 	bl	8004a00 <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800193a:	f000 f8cf 	bl	8001adc <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3750      	adds	r7, #80	; 0x50
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001956:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <MX_I2C1_Init+0x54>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_I2C1_Init+0x50>)
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_I2C1_Init+0x58>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_I2C1_Init+0x50>)
 800196e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	; (80019a0 <MX_I2C1_Init+0x50>)
 800198e:	f000 fe87 	bl	80026a0 <HAL_I2C_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001998:	f000 f8a0 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000894 	.word	0x20000894
 80019a4:	40005400 	.word	0x40005400
 80019a8:	000186a0 	.word	0x000186a0

080019ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_USART2_UART_Init+0x50>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f003 fa2c 	bl	8004e40 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ee:	f000 f875 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200008e8 	.word	0x200008e8
 80019fc:	40004400 	.word	0x40004400

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_GPIO_Init+0xd4>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a8c:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <MX_GPIO_Init+0xd8>)
 8001a8e:	f000 fded 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TCSLED_Pin */
  GPIO_InitStruct.Pin = TCSLED_Pin;
 8001a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TCSLED_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <MX_GPIO_Init+0xd8>)
 8001aac:	f000 fc5a 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <MX_GPIO_Init+0xd8>)
 8001ac6:	f000 fc4d 	bl	8002364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020400 	.word	0x40020400

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <Error_Handler+0x8>
	...

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b26:	2007      	movs	r0, #7
 8001b28:	f000 fb3a 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_I2C_MspInit+0xa4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d13b      	bne.n	8001bd2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_I2C_MspInit+0xa8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_I2C_MspInit+0xa8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_I2C_MspInit+0xa8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b76:	23c0      	movs	r3, #192	; 0xc0
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7a:	2312      	movs	r3, #18
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b86:	2304      	movs	r3, #4
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <HAL_I2C_MspInit+0xac>)
 8001b92:	f000 fbe7 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_I2C_MspInit+0xa8>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_I2C_MspInit+0xa8>)
 8001ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_I2C_MspInit+0xa8>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	201f      	movs	r0, #31
 8001bb8:	f000 fafd 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bbc:	201f      	movs	r0, #31
 8001bbe:	f000 fb16 	bl	80021ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2020      	movs	r0, #32
 8001bc8:	f000 faf5 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001bcc:	2020      	movs	r0, #32
 8001bce:	f000 fb0e 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020400 	.word	0x40020400

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	; 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <HAL_UART_MspInit+0x94>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d133      	bne.n	8001c72 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_UART_MspInit+0x98>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_UART_MspInit+0x98>)
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_UART_MspInit+0x98>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_UART_MspInit+0x98>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_UART_MspInit+0x98>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0x98>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c42:	230c      	movs	r3, #12
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c52:	2307      	movs	r3, #7
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4809      	ldr	r0, [pc, #36]	; (8001c84 <HAL_UART_MspInit+0x9c>)
 8001c5e:	f000 fb81 	bl	8002364 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	2026      	movs	r0, #38	; 0x26
 8001c68:	f000 faa5 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c6c:	2026      	movs	r0, #38	; 0x26
 8001c6e:	f000 fabe 	bl	80021ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <NMI_Handler+0x4>

08001c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f000 f974 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <I2C1_EV_IRQHandler+0x10>)
 8001ce2:	f000 ff75 	bl	8002bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000894 	.word	0x20000894

08001cf0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <I2C1_ER_IRQHandler+0x10>)
 8001cf6:	f001 f8be 	bl	8002e76 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000894 	.word	0x20000894

08001d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART2_IRQHandler+0x10>)
 8001d0a:	f003 f95b 	bl	8004fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200008e8 	.word	0x200008e8

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d32:	f004 fadd 	bl	80062f0 <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	e7fe      	b.n	8001d5a <_exit+0x12>

08001d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
  }

  return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf1      	blt.n	8001da8 <_write+0x12>
  }
  return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_close>:

int _close(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df6:	605a      	str	r2, [r3, #4]
  return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_isatty>:

int _isatty(int file)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f004 fa42 	bl	80062f0 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20018000 	.word	0x20018000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000930 	.word	0x20000930
 8001ea0:	20000a88 	.word	0x20000a88

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ece:	490e      	ldr	r1, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed0:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	; (8001f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ef2:	f7ff ffd7 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f004 fa01 	bl	80062fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff fc55 	bl	80017a8 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001f0c:	08007c00 	.word	0x08007c00
  ldr r2, =_sbss
 8001f10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001f14:	20000a84 	.word	0x20000a84

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f92b 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fdca 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f943 	bl	800220a <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f90b 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	2000000c 	.word	0x2000000c
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	2000000c 	.word	0x2000000c
 8001fe4:	20000934 	.word	0x20000934

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000934 	.word	0x20000934

08002000 <__NVIC_SetPriorityGrouping>:
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800201c:	4013      	ands	r3, r2
 800201e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x44>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_GetPriorityGrouping>:
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <__NVIC_GetPriorityGrouping+0x18>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 0307 	and.w	r3, r3, #7
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_EnableIRQ>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b00      	cmp	r3, #0
 8002074:	db0b      	blt.n	800208e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	4907      	ldr	r1, [pc, #28]	; (800209c <__NVIC_EnableIRQ+0x38>)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	2001      	movs	r0, #1
 8002086:	fa00 f202 	lsl.w	r2, r0, r2
 800208a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <SysTick_Config>:
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff8e 	bl	80020a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff29 	bl	8002000 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff3e 	bl	8002048 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff8e 	bl	80020f4 <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff5d 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff31 	bl	8002064 <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ffa2 	bl	800215c <SysTick_Config>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff feda 	bl	8001fe8 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d008      	beq.n	8002254 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e052      	b.n	80022fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0216 	bic.w	r2, r2, #22
 8002262:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002272:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d103      	bne.n	8002284 <HAL_DMA_Abort+0x62>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0208 	bic.w	r2, r2, #8
 8002292:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a4:	e013      	b.n	80022ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a6:	f7ff fe9f 	bl	8001fe8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d90c      	bls.n	80022ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2203      	movs	r2, #3
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e015      	b.n	80022fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e4      	bne.n	80022a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	223f      	movs	r2, #63	; 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d004      	beq.n	8002320 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e00c      	b.n	800233a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2205      	movs	r2, #5
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002354:	b2db      	uxtb	r3, r3
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b57      	ldr	r3, [pc, #348]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a56      	ldr	r2, [pc, #344]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b54      	ldr	r3, [pc, #336]	; (800264c <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	; (8002654 <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a48      	ldr	r2, [pc, #288]	; (8002658 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	; (8002664 <HAL_GPIO_Init+0x300>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	; (8002650 <HAL_GPIO_Init+0x2ec>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a24      	ldr	r2, [pc, #144]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_GPIO_Init+0x304>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e12b      	b.n	800290a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fa36 	bl	8001b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	; 0x24
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002704:	f002 fb74 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 8002708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a81      	ldr	r2, [pc, #516]	; (8002914 <HAL_I2C_Init+0x274>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d807      	bhi.n	8002724 <HAL_I2C_Init+0x84>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a80      	ldr	r2, [pc, #512]	; (8002918 <HAL_I2C_Init+0x278>)
 8002718:	4293      	cmp	r3, r2
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e006      	b.n	8002732 <HAL_I2C_Init+0x92>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a7d      	ldr	r2, [pc, #500]	; (800291c <HAL_I2C_Init+0x27c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0e7      	b.n	800290a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a78      	ldr	r2, [pc, #480]	; (8002920 <HAL_I2C_Init+0x280>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9b      	lsrs	r3, r3, #18
 8002744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	430a      	orrs	r2, r1
 8002758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a6a      	ldr	r2, [pc, #424]	; (8002914 <HAL_I2C_Init+0x274>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d802      	bhi.n	8002774 <HAL_I2C_Init+0xd4>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3301      	adds	r3, #1
 8002772:	e009      	b.n	8002788 <HAL_I2C_Init+0xe8>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	4a69      	ldr	r2, [pc, #420]	; (8002924 <HAL_I2C_Init+0x284>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	3301      	adds	r3, #1
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	430b      	orrs	r3, r1
 800278e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800279a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	495c      	ldr	r1, [pc, #368]	; (8002914 <HAL_I2C_Init+0x274>)
 80027a4:	428b      	cmp	r3, r1
 80027a6:	d819      	bhi.n	80027dc <HAL_I2C_Init+0x13c>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e59      	subs	r1, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b6:	1c59      	adds	r1, r3, #1
 80027b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027bc:	400b      	ands	r3, r1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_I2C_Init+0x138>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e59      	subs	r1, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d0:	3301      	adds	r3, #1
 80027d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d6:	e051      	b.n	800287c <HAL_I2C_Init+0x1dc>
 80027d8:	2304      	movs	r3, #4
 80027da:	e04f      	b.n	800287c <HAL_I2C_Init+0x1dc>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <HAL_I2C_Init+0x168>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e58      	subs	r0, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	e012      	b.n	800282e <HAL_I2C_Init+0x18e>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x196>
 8002832:	2301      	movs	r3, #1
 8002834:	e022      	b.n	800287c <HAL_I2C_Init+0x1dc>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10e      	bne.n	800285c <HAL_I2C_Init+0x1bc>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e58      	subs	r0, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	440b      	add	r3, r1
 800284c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285a:	e00f      	b.n	800287c <HAL_I2C_Init+0x1dc>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	0099      	lsls	r1, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	6809      	ldr	r1, [r1, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6911      	ldr	r1, [r2, #16]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	000186a0 	.word	0x000186a0
 8002918:	001e847f 	.word	0x001e847f
 800291c:	003d08ff 	.word	0x003d08ff
 8002920:	431bde83 	.word	0x431bde83
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	461a      	mov	r2, r3
 8002934:	460b      	mov	r3, r1
 8002936:	817b      	strh	r3, [r7, #10]
 8002938:	4613      	mov	r3, r2
 800293a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b20      	cmp	r3, #32
 800294a:	f040 8085 	bne.w	8002a58 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800294e:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_I2C_Master_Transmit_IT+0x140>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	4a45      	ldr	r2, [pc, #276]	; (8002a6c <HAL_I2C_Master_Transmit_IT+0x144>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a1a      	lsrs	r2, r3, #8
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3b01      	subs	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e05b      	b.n	8002a5a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d0db      	beq.n	8002968 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Master_Transmit_IT+0x96>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e04d      	b.n	8002a5a <HAL_I2C_Master_Transmit_IT+0x132>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d007      	beq.n	80029e4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2221      	movs	r2, #33	; 0x21
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2210      	movs	r2, #16
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	893a      	ldrh	r2, [r7, #8]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_I2C_Master_Transmit_IT+0x148>)
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002a26:	897a      	ldrh	r2, [r7, #10]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002a42:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a52:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	14f8b589 	.word	0x14f8b589
 8002a70:	ffff0000 	.word	0xffff0000

08002a74 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	460b      	mov	r3, r1
 8002a82:	817b      	strh	r3, [r7, #10]
 8002a84:	4613      	mov	r3, r2
 8002a86:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	f040 808d 	bne.w	8002bb4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <HAL_I2C_Master_Receive_IT+0x150>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	08db      	lsrs	r3, r3, #3
 8002aa0:	4a49      	ldr	r2, [pc, #292]	; (8002bc8 <HAL_I2C_Master_Receive_IT+0x154>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0a1a      	lsrs	r2, r3, #8
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d116      	bne.n	8002aee <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e063      	b.n	8002bb6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d0db      	beq.n	8002ab4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Master_Receive_IT+0x96>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e055      	b.n	8002bb6 <HAL_I2C_Master_Receive_IT+0x142>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d007      	beq.n	8002b30 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2222      	movs	r2, #34	; 0x22
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	893a      	ldrh	r2, [r7, #8]
 8002b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <HAL_I2C_Master_Receive_IT+0x158>)
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002b72:	897a      	ldrh	r2, [r7, #10]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002b8e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000004 	.word	0x20000004
 8002bc8:	14f8b589 	.word	0x14f8b589
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d003      	beq.n	8002c08 <HAL_I2C_EV_IRQHandler+0x38>
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	f040 80b1 	bne.w	8002d6a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10d      	bne.n	8002c3e <HAL_I2C_EV_IRQHandler+0x6e>
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002c28:	d003      	beq.n	8002c32 <HAL_I2C_EV_IRQHandler+0x62>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_EV_IRQHandler+0x66>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x68>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f000 8114 	beq.w	8002e66 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x90>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d006      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f001 fc40 	bl	80044d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fd4a 	bl	80036f2 <I2C_Master_SB>
 8002c5e:	e083      	b.n	8002d68 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_I2C_EV_IRQHandler+0xac>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fdc2 	bl	80037fe <I2C_Master_ADD10>
 8002c7a:	e075      	b.n	8002d68 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0xc8>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fdde 	bl	8003852 <I2C_Master_ADDR>
 8002c96:	e067      	b.n	8002d68 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d036      	beq.n	8002d10 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cb0:	f000 80db 	beq.w	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <HAL_I2C_EV_IRQHandler+0x10a>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_I2C_EV_IRQHandler+0x10a>
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9c2 	bl	800305c <I2C_MasterTransmit_TXE>
 8002cd8:	e046      	b.n	8002d68 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80c2 	beq.w	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80bc 	beq.w	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	2b21      	cmp	r3, #33	; 0x21
 8002cf6:	d103      	bne.n	8002d00 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa4b 	bl	8003194 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cfe:	e0b4      	b.n	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	f040 80b1 	bne.w	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fab9 	bl	8003280 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0e:	e0ac      	b.n	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d1e:	f000 80a4 	beq.w	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x178>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_I2C_EV_IRQHandler+0x178>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fb31 	bl	80033a8 <I2C_MasterReceive_RXNE>
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 808b 	beq.w	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8085 	beq.w	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fbdc 	bl	800351e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d66:	e080      	b.n	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
 8002d68:	e07f      	b.n	8002e6a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e007      	b.n	8002d8c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d011      	beq.n	8002dba <HAL_I2C_EV_IRQHandler+0x1ea>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00c      	beq.n	8002dba <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002db0:	69b9      	ldr	r1, [r7, #24]
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 ff9c 	bl	8003cf0 <I2C_Slave_ADDR>
 8002db8:	e05a      	b.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_I2C_EV_IRQHandler+0x206>
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 ffd6 	bl	8003d80 <I2C_Slave_STOPF>
 8002dd4:	e04c      	b.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dd6:	7bbb      	ldrb	r3, [r7, #14]
 8002dd8:	2b21      	cmp	r3, #33	; 0x21
 8002dda:	d002      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x212>
 8002ddc:	7bbb      	ldrb	r3, [r7, #14]
 8002dde:	2b29      	cmp	r3, #41	; 0x29
 8002de0:	d120      	bne.n	8002e24 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <HAL_I2C_EV_IRQHandler+0x238>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_I2C_EV_IRQHandler+0x238>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d103      	bne.n	8002e08 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 feb7 	bl	8003b74 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e06:	e032      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d02d      	beq.n	8002e6e <HAL_I2C_EV_IRQHandler+0x29e>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d028      	beq.n	8002e6e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fee6 	bl	8003bee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e22:	e024      	b.n	8002e6e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x27a>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_I2C_EV_IRQHandler+0x27a>
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fef4 	bl	8003c30 <I2C_SlaveReceive_RXNE>
 8002e48:	e012      	b.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 ff24 	bl	8003cac <I2C_SlaveReceive_BTF>
 8002e64:	e004      	b.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002e66:	bf00      	nop
 8002e68:	e002      	b.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08a      	sub	sp, #40	; 0x28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e98:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_I2C_ER_IRQHandler+0x4a>
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ebe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x70>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d008      	beq.n	8002ee6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002ee4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d03e      	beq.n	8002f6e <HAL_I2C_ER_IRQHandler+0xf8>
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d039      	beq.n	8002f6e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002efa:	7efb      	ldrb	r3, [r7, #27]
 8002efc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f14:	7ebb      	ldrb	r3, [r7, #26]
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d112      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xca>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10f      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xca>
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b21      	cmp	r3, #33	; 0x21
 8002f24:	d008      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b29      	cmp	r3, #41	; 0x29
 8002f2a:	d005      	beq.n	8002f38 <HAL_I2C_ER_IRQHandler+0xc2>
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2b28      	cmp	r3, #40	; 0x28
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b21      	cmp	r3, #33	; 0x21
 8002f36:	d103      	bne.n	8002f40 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 f851 	bl	8003fe0 <I2C_Slave_AF>
 8002f3e:	e016      	b.n	8002f6e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f48:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f52:	7efb      	ldrb	r3, [r7, #27]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d002      	beq.n	8002f5e <HAL_I2C_ER_IRQHandler+0xe8>
 8002f58:	7efb      	ldrb	r3, [r7, #27]
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d107      	bne.n	8002f6e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <HAL_I2C_ER_IRQHandler+0x11e>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002f92:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f001 f88a 	bl	80040c0 <I2C_ITError>
  }
}
 8002fac:	bf00      	nop
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003072:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d150      	bne.n	8003124 <I2C_MasterTransmit_TXE+0xc8>
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	2b21      	cmp	r3, #33	; 0x21
 8003086:	d14d      	bne.n	8003124 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b08      	cmp	r3, #8
 800308c:	d01d      	beq.n	80030ca <I2C_MasterTransmit_TXE+0x6e>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b20      	cmp	r3, #32
 8003092:	d01a      	beq.n	80030ca <I2C_MasterTransmit_TXE+0x6e>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800309a:	d016      	beq.n	80030ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2211      	movs	r2, #17
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd ff3a 	bl	8000f3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c8:	e060      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d107      	bne.n	8003114 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ff7d 	bl	800300c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003112:	e03b      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd ff0d 	bl	8000f3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003122:	e033      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b21      	cmp	r3, #33	; 0x21
 8003128:	d005      	beq.n	8003136 <I2C_MasterTransmit_TXE+0xda>
 800312a:	7bbb      	ldrb	r3, [r7, #14]
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d12d      	bne.n	800318c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b22      	cmp	r3, #34	; 0x22
 8003134:	d12a      	bne.n	800318c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003150:	e01c      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d103      	bne.n	8003166 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f88e 	bl	8003280 <I2C_MemoryTransmit_TXE_BTF>
}
 8003164:	e012      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	781a      	ldrb	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800318a:	e7ff      	b.n	800318c <I2C_MasterTransmit_TXE+0x130>
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b21      	cmp	r3, #33	; 0x21
 80031ac:	d164      	bne.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80031dc:	e04c      	b.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d01d      	beq.n	8003220 <I2C_MasterTransmit_BTF+0x8c>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d01a      	beq.n	8003220 <I2C_MasterTransmit_BTF+0x8c>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f0:	d016      	beq.n	8003220 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003200:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2211      	movs	r2, #17
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fe8f 	bl	8000f3c <HAL_I2C_MasterTxCpltCallback>
}
 800321e:	e02b      	b.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800322e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d107      	bne.n	800326a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fed2 	bl	800300c <HAL_I2C_MemTxCpltCallback>
}
 8003268:	e006      	b.n	8003278 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd fe62 	bl	8000f3c <HAL_I2C_MasterTxCpltCallback>
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11d      	bne.n	80032d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d10b      	bne.n	80032b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80032b6:	e073      	b.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	b29b      	uxth	r3, r3
 80032be:	121b      	asrs	r3, r3, #8
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032d2:	e065      	b.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d10b      	bne.n	80032f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032f2:	e055      	b.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d151      	bne.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b22      	cmp	r3, #34	; 0x22
 8003300:	d10d      	bne.n	800331e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003310:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800331c:	e040      	b.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b21      	cmp	r3, #33	; 0x21
 800332c:	d112      	bne.n	8003354 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003352:	e025      	b.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d120      	bne.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b21      	cmp	r3, #33	; 0x21
 8003362:	d11d      	bne.n	80033a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003372:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fe36 	bl	800300c <HAL_I2C_MemTxCpltCallback>
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b22      	cmp	r3, #34	; 0x22
 80033ba:	f040 80ac 	bne.w	8003516 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d921      	bls.n	8003410 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	f040 808c 	bne.w	8003516 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800340e:	e082      	b.n	8003516 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	2b02      	cmp	r3, #2
 8003416:	d075      	beq.n	8003504 <I2C_MasterReceive_RXNE+0x15c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d002      	beq.n	8003424 <I2C_MasterReceive_RXNE+0x7c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d16f      	bne.n	8003504 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f001 f825 	bl	8004474 <I2C_WaitOnSTOPRequestThroughIT>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d142      	bne.n	80034b6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800344e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d10a      	bne.n	80034a0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fdc1 	bl	8003020 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800349e:	e03a      	b.n	8003516 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2212      	movs	r2, #18
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fd52 	bl	8000f58 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034b4:	e02f      	b.n	8003516 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fd99 	bl	8003034 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003502:	e008      	b.n	8003516 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003512:	605a      	str	r2, [r3, #4]
}
 8003514:	e7ff      	b.n	8003516 <I2C_MasterReceive_RXNE+0x16e>
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b04      	cmp	r3, #4
 8003534:	d11b      	bne.n	800356e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800356c:	e0bd      	b.n	80036ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b03      	cmp	r3, #3
 8003576:	d129      	bne.n	80035cc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b04      	cmp	r3, #4
 800358c:	d00a      	beq.n	80035a4 <I2C_MasterReceive_BTF+0x86>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d007      	beq.n	80035a4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035ca:	e08e      	b.n	80036ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d176      	bne.n	80036c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d002      	beq.n	80035e2 <I2C_MasterReceive_BTF+0xc4>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d108      	bne.n	80035f4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e019      	b.n	8003628 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d002      	beq.n	8003600 <I2C_MasterReceive_BTF+0xe2>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d108      	bne.n	8003612 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e00a      	b.n	8003628 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b10      	cmp	r3, #16
 8003616:	d007      	beq.n	8003628 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003626:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003682:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d10a      	bne.n	80036ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fcba 	bl	8003020 <HAL_I2C_MemRxCpltCallback>
}
 80036ac:	e01d      	b.n	80036ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2212      	movs	r2, #18
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fd fc4b 	bl	8000f58 <HAL_I2C_MasterRxCpltCallback>
}
 80036c2:	e012      	b.n	80036ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d117      	bne.n	8003736 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800371e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003720:	e067      	b.n	80037f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	b2da      	uxtb	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]
}
 8003734:	e05d      	b.n	80037f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373e:	d133      	bne.n	80037a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b21      	cmp	r3, #33	; 0x21
 800374a:	d109      	bne.n	8003760 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800375c:	611a      	str	r2, [r3, #16]
 800375e:	e008      	b.n	8003772 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	b2da      	uxtb	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <I2C_Master_SB+0x92>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d108      	bne.n	8003796 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	2b00      	cmp	r3, #0
 800378a:	d032      	beq.n	80037f2 <I2C_Master_SB+0x100>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d02d      	beq.n	80037f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a4:	605a      	str	r2, [r3, #4]
}
 80037a6:	e024      	b.n	80037f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10e      	bne.n	80037ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	11db      	asrs	r3, r3, #7
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0306 	and.w	r3, r3, #6
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f063 030f 	orn	r3, r3, #15
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]
}
 80037cc:	e011      	b.n	80037f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10d      	bne.n	80037f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	b29b      	uxth	r3, r3
 80037dc:	11db      	asrs	r3, r3, #7
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 0306 	and.w	r3, r3, #6
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f063 030e 	orn	r3, r3, #14
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	b2da      	uxtb	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <I2C_Master_ADD10+0x26>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00c      	beq.n	8003846 <I2C_Master_ADD10+0x48>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003844:	605a      	str	r2, [r3, #4]
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003852:	b480      	push	{r7}
 8003854:	b091      	sub	sp, #68	; 0x44
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b22      	cmp	r3, #34	; 0x22
 800387a:	f040 8169 	bne.w	8003b50 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <I2C_Master_ADDR+0x54>
 8003886:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d10b      	bne.n	80038a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388e:	2300      	movs	r3, #0
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	633b      	str	r3, [r7, #48]	; 0x30
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	e160      	b.n	8003b68 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11d      	bne.n	80038ea <I2C_Master_ADDR+0x98>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038b6:	d118      	bne.n	80038ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	651a      	str	r2, [r3, #80]	; 0x50
 80038e8:	e13e      	b.n	8003b68 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d113      	bne.n	800391c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f4:	2300      	movs	r3, #0
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e115      	b.n	8003b48 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	f040 808a 	bne.w	8003a3c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800392e:	d137      	bne.n	80039a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d113      	bne.n	8003978 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	e0e7      	b.n	8003b48 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	623b      	str	r3, [r7, #32]
 800398c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e0d3      	b.n	8003b48 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80039a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d02e      	beq.n	8003a04 <I2C_Master_ADDR+0x1b2>
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d02b      	beq.n	8003a04 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ae:	2b12      	cmp	r3, #18
 80039b0:	d102      	bne.n	80039b8 <I2C_Master_ADDR+0x166>
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d125      	bne.n	8003a04 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d00e      	beq.n	80039dc <I2C_Master_ADDR+0x18a>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d00b      	beq.n	80039dc <I2C_Master_ADDR+0x18a>
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d008      	beq.n	80039dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e007      	b.n	80039ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	e0a1      	b.n	8003b48 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e085      	b.n	8003b48 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d14d      	bne.n	8003ae2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d016      	beq.n	8003a7a <I2C_Master_ADDR+0x228>
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d013      	beq.n	8003a7a <I2C_Master_ADDR+0x228>
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d010      	beq.n	8003a7a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a66:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e007      	b.n	8003a8a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a88:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a98:	d117      	bne.n	8003aca <I2C_Master_ADDR+0x278>
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa0:	d00b      	beq.n	8003aba <I2C_Master_ADDR+0x268>
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d008      	beq.n	8003aba <I2C_Master_ADDR+0x268>
 8003aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d005      	beq.n	8003aba <I2C_Master_ADDR+0x268>
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d002      	beq.n	8003aba <I2C_Master_ADDR+0x268>
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d107      	bne.n	8003aca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ac8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	e032      	b.n	8003b48 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b00:	d117      	bne.n	8003b32 <I2C_Master_ADDR+0x2e0>
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b08:	d00b      	beq.n	8003b22 <I2C_Master_ADDR+0x2d0>
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d008      	beq.n	8003b22 <I2C_Master_ADDR+0x2d0>
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d005      	beq.n	8003b22 <I2C_Master_ADDR+0x2d0>
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d002      	beq.n	8003b22 <I2C_Master_ADDR+0x2d0>
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d107      	bne.n	8003b32 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b30:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b4e:	e00b      	b.n	8003b68 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	e7ff      	b.n	8003b68 <I2C_Master_ADDR+0x316>
 8003b68:	bf00      	nop
 8003b6a:	3744      	adds	r7, #68	; 0x44
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02b      	beq.n	8003be6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d114      	bne.n	8003be6 <I2C_SlaveTransmit_TXE+0x72>
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b29      	cmp	r3, #41	; 0x29
 8003bc0:	d111      	bne.n	8003be6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2221      	movs	r2, #33	; 0x21
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2228      	movs	r2, #40	; 0x28
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff f9e7 	bl	8002fb4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d011      	beq.n	8003c24 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02c      	beq.n	8003ca4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d114      	bne.n	8003ca4 <I2C_SlaveReceive_RXNE+0x74>
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7e:	d111      	bne.n	8003ca4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2222      	movs	r2, #34	; 0x22
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2228      	movs	r2, #40	; 0x28
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff f992 	bl	8002fc8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d012      	beq.n	8003ce4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d0a:	2b28      	cmp	r3, #40	; 0x28
 8003d0c:	d125      	bne.n	8003d5a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	81bb      	strh	r3, [r7, #12]
 8003d3c:	e002      	b.n	8003d44 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d4c:	89ba      	ldrh	r2, [r7, #12]
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff f942 	bl	8002fdc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d58:	e00e      	b.n	8003d78 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d9e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dcc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ddc:	d172      	bne.n	8003ec4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	2b22      	cmp	r3, #34	; 0x22
 8003de2:	d002      	beq.n	8003dea <I2C_Slave_STOPF+0x6a>
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b2a      	cmp	r3, #42	; 0x2a
 8003de8:	d135      	bne.n	8003e56 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fa8f 	bl	8002346 <HAL_DMA_GetState>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d049      	beq.n	8003ec2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	4a69      	ldr	r2, [pc, #420]	; (8003fd8 <I2C_Slave_STOPF+0x258>)
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fa61 	bl	8002302 <HAL_DMA_Abort_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03d      	beq.n	8003ec2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e50:	4610      	mov	r0, r2
 8003e52:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e54:	e035      	b.n	8003ec2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fa59 	bl	8002346 <HAL_DMA_GetState>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d014      	beq.n	8003ec4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	4a4e      	ldr	r2, [pc, #312]	; (8003fd8 <I2C_Slave_STOPF+0x258>)
 8003ea0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fa2b 	bl	8002302 <HAL_DMA_Abort_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4798      	blx	r3
 8003ec0:	e000      	b.n	8003ec4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ec2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03e      	beq.n	8003f4c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d112      	bne.n	8003f02 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d112      	bne.n	8003f36 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f043 0204 	orr.w	r2, r3, #4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8b3 	bl	80040c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f5a:	e039      	b.n	8003fd0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d109      	bne.n	8003f76 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2228      	movs	r2, #40	; 0x28
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff f829 	bl	8002fc8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b28      	cmp	r3, #40	; 0x28
 8003f80:	d111      	bne.n	8003fa6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a15      	ldr	r2, [pc, #84]	; (8003fdc <I2C_Slave_STOPF+0x25c>)
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff f82a 	bl	8002ff8 <HAL_I2C_ListenCpltCallback>
}
 8003fa4:	e014      	b.n	8003fd0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	2b22      	cmp	r3, #34	; 0x22
 8003fac:	d002      	beq.n	8003fb4 <I2C_Slave_STOPF+0x234>
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b22      	cmp	r3, #34	; 0x22
 8003fb2:	d10d      	bne.n	8003fd0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fe fffc 	bl	8002fc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	08004325 	.word	0x08004325
 8003fdc:	ffff0000 	.word	0xffff0000

08003fe0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d002      	beq.n	8004002 <I2C_Slave_AF+0x22>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d129      	bne.n	8004056 <I2C_Slave_AF+0x76>
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b28      	cmp	r3, #40	; 0x28
 8004006:	d126      	bne.n	8004056 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a2c      	ldr	r2, [pc, #176]	; (80040bc <I2C_Slave_AF+0xdc>)
 800400c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800401c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004026:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe ffd2 	bl	8002ff8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004054:	e02e      	b.n	80040b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b21      	cmp	r3, #33	; 0x21
 800405a:	d126      	bne.n	80040aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <I2C_Slave_AF+0xdc>)
 8004060:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2221      	movs	r2, #33	; 0x21
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004086:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004090:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe ff86 	bl	8002fb4 <HAL_I2C_SlaveTxCpltCallback>
}
 80040a8:	e004      	b.n	80040b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040b2:	615a      	str	r2, [r3, #20]
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	ffff0000 	.word	0xffff0000

080040c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040d8:	7bbb      	ldrb	r3, [r7, #14]
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d002      	beq.n	80040e4 <I2C_ITError+0x24>
 80040de:	7bbb      	ldrb	r3, [r7, #14]
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d10a      	bne.n	80040fa <I2C_ITError+0x3a>
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b22      	cmp	r3, #34	; 0x22
 80040e8:	d107      	bne.n	80040fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004100:	2b28      	cmp	r3, #40	; 0x28
 8004102:	d107      	bne.n	8004114 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2228      	movs	r2, #40	; 0x28
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004112:	e015      	b.n	8004140 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d00a      	beq.n	800413a <I2C_ITError+0x7a>
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b60      	cmp	r3, #96	; 0x60
 8004128:	d007      	beq.n	800413a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414e:	d162      	bne.n	8004216 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d020      	beq.n	80041b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	4a6a      	ldr	r2, [pc, #424]	; (800431c <I2C_ITError+0x25c>)
 8004174:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe f8c1 	bl	8002302 <HAL_DMA_Abort_IT>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8089 	beq.w	800429a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041aa:	4610      	mov	r0, r2
 80041ac:	4798      	blx	r3
 80041ae:	e074      	b.n	800429a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	4a59      	ldr	r2, [pc, #356]	; (800431c <I2C_ITError+0x25c>)
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe f8a0 	bl	8002302 <HAL_DMA_Abort_IT>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d068      	beq.n	800429a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d10b      	bne.n	80041ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004210:	4610      	mov	r0, r2
 8004212:	4798      	blx	r3
 8004214:	e041      	b.n	800429a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b60      	cmp	r3, #96	; 0x60
 8004220:	d125      	bne.n	800426e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d10b      	bne.n	8004256 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fe feee 	bl	8003048 <HAL_I2C_AbortCpltCallback>
 800426c:	e015      	b.n	800429a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d10b      	bne.n	8004294 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fe fecd 	bl	8003034 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10e      	bne.n	80042c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d113      	bne.n	8004314 <I2C_ITError+0x254>
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b28      	cmp	r3, #40	; 0x28
 80042f0:	d110      	bne.n	8004314 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <I2C_ITError+0x260>)
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fe fe72 	bl	8002ff8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08004325 	.word	0x08004325
 8004320:	ffff0000 	.word	0xffff0000

08004324 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800433e:	4b4b      	ldr	r3, [pc, #300]	; (800446c <I2C_DMAAbort+0x148>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	08db      	lsrs	r3, r3, #3
 8004344:	4a4a      	ldr	r2, [pc, #296]	; (8004470 <I2C_DMAAbort+0x14c>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	0a1a      	lsrs	r2, r3, #8
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	00da      	lsls	r2, r3, #3
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800436a:	e00a      	b.n	8004382 <I2C_DMAAbort+0x5e>
    }
    count--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3b01      	subs	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d0ea      	beq.n	8004358 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	2200      	movs	r2, #0
 8004390:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	2200      	movs	r2, #0
 80043a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2200      	movs	r2, #0
 80043c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	2200      	movs	r2, #0
 80043d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0201 	bic.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b60      	cmp	r3, #96	; 0x60
 80043f2:	d10e      	bne.n	8004412 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800440a:	6978      	ldr	r0, [r7, #20]
 800440c:	f7fe fe1c 	bl	8003048 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004410:	e027      	b.n	8004462 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004418:	2b28      	cmp	r3, #40	; 0x28
 800441a:	d117      	bne.n	800444c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800443a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2228      	movs	r2, #40	; 0x28
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800444a:	e007      	b.n	800445c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800445c:	6978      	ldr	r0, [r7, #20]
 800445e:	f7fe fde9 	bl	8003034 <HAL_I2C_ErrorCallback>
}
 8004462:	bf00      	nop
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000004 	.word	0x20000004
 8004470:	14f8b589 	.word	0x14f8b589

08004474 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	08db      	lsrs	r3, r3, #3
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	0a1a      	lsrs	r2, r3, #8
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b01      	subs	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d107      	bne.n	80044b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e008      	b.n	80044c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c0:	d0e9      	beq.n	8004496 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000004 	.word	0x20000004
 80044d4:	14f8b589 	.word	0x14f8b589

080044d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044e8:	d103      	bne.n	80044f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80044f0:	e007      	b.n	8004502 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044fa:	d102      	bne.n	8004502 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2208      	movs	r2, #8
 8004500:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e267      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d075      	beq.n	800461a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800452e:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b04      	cmp	r3, #4
 8004538:	d00c      	beq.n	8004554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453a:	4b85      	ldr	r3, [pc, #532]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004542:	2b08      	cmp	r3, #8
 8004544:	d112      	bne.n	800456c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004546:	4b82      	ldr	r3, [pc, #520]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004552:	d10b      	bne.n	800456c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	4b7e      	ldr	r3, [pc, #504]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d05b      	beq.n	8004618 <HAL_RCC_OscConfig+0x108>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d157      	bne.n	8004618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e242      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d106      	bne.n	8004584 <HAL_RCC_OscConfig+0x74>
 8004576:	4b76      	ldr	r3, [pc, #472]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a75      	ldr	r2, [pc, #468]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e01d      	b.n	80045c0 <HAL_RCC_OscConfig+0xb0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x98>
 800458e:	4b70      	ldr	r3, [pc, #448]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a6f      	ldr	r2, [pc, #444]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b6d      	ldr	r3, [pc, #436]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6c      	ldr	r2, [pc, #432]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e00b      	b.n	80045c0 <HAL_RCC_OscConfig+0xb0>
 80045a8:	4b69      	ldr	r3, [pc, #420]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a68      	ldr	r2, [pc, #416]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b66      	ldr	r3, [pc, #408]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a65      	ldr	r2, [pc, #404]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80045ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d013      	beq.n	80045f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fd fd0e 	bl	8001fe8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fd fd0a 	bl	8001fe8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e207      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	4b5b      	ldr	r3, [pc, #364]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0xc0>
 80045ee:	e014      	b.n	800461a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fd fcfa 	bl	8001fe8 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fd fcf6 	bl	8001fe8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e1f3      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460a:	4b51      	ldr	r3, [pc, #324]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0xe8>
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d063      	beq.n	80046ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004626:	4b4a      	ldr	r3, [pc, #296]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463a:	2b08      	cmp	r3, #8
 800463c:	d11c      	bne.n	8004678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800463e:	4b44      	ldr	r3, [pc, #272]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d116      	bne.n	8004678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	4b41      	ldr	r3, [pc, #260]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d005      	beq.n	8004662 <HAL_RCC_OscConfig+0x152>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d001      	beq.n	8004662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e1c7      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004662:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4937      	ldr	r1, [pc, #220]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	e03a      	b.n	80046ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d020      	beq.n	80046c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004680:	4b34      	ldr	r3, [pc, #208]	; (8004754 <HAL_RCC_OscConfig+0x244>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004686:	f7fd fcaf 	bl	8001fe8 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468e:	f7fd fcab 	bl	8001fe8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e1a8      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ac:	4b28      	ldr	r3, [pc, #160]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4925      	ldr	r1, [pc, #148]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
 80046c0:	e015      	b.n	80046ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c2:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCC_OscConfig+0x244>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c8:	f7fd fc8e 	bl	8001fe8 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d0:	f7fd fc8a 	bl	8001fe8 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e187      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d036      	beq.n	8004768 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004702:	4b15      	ldr	r3, [pc, #84]	; (8004758 <HAL_RCC_OscConfig+0x248>)
 8004704:	2201      	movs	r2, #1
 8004706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fd fc6e 	bl	8001fe8 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004710:	f7fd fc6a 	bl	8001fe8 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e167      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_OscConfig+0x240>)
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0x200>
 800472e:	e01b      	b.n	8004768 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_OscConfig+0x248>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004736:	f7fd fc57 	bl	8001fe8 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473c:	e00e      	b.n	800475c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800473e:	f7fd fc53 	bl	8001fe8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d907      	bls.n	800475c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e150      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
 8004750:	40023800 	.word	0x40023800
 8004754:	42470000 	.word	0x42470000
 8004758:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800475c:	4b88      	ldr	r3, [pc, #544]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800475e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1ea      	bne.n	800473e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8097 	beq.w	80048a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004776:	2300      	movs	r3, #0
 8004778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477a:	4b81      	ldr	r3, [pc, #516]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	4b7d      	ldr	r3, [pc, #500]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4a7c      	ldr	r2, [pc, #496]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004794:	6413      	str	r3, [r2, #64]	; 0x40
 8004796:	4b7a      	ldr	r3, [pc, #488]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a6:	4b77      	ldr	r3, [pc, #476]	; (8004984 <HAL_RCC_OscConfig+0x474>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d118      	bne.n	80047e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b2:	4b74      	ldr	r3, [pc, #464]	; (8004984 <HAL_RCC_OscConfig+0x474>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a73      	ldr	r2, [pc, #460]	; (8004984 <HAL_RCC_OscConfig+0x474>)
 80047b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047be:	f7fd fc13 	bl	8001fe8 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c6:	f7fd fc0f 	bl	8001fe8 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e10c      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d8:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCC_OscConfig+0x474>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x2ea>
 80047ec:	4b64      	ldr	r3, [pc, #400]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a63      	ldr	r2, [pc, #396]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
 80047f8:	e01c      	b.n	8004834 <HAL_RCC_OscConfig+0x324>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x30c>
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5e      	ldr	r2, [pc, #376]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	4b5c      	ldr	r3, [pc, #368]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a5b      	ldr	r2, [pc, #364]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0x324>
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a57      	ldr	r2, [pc, #348]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
 8004828:	4b55      	ldr	r3, [pc, #340]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4a54      	ldr	r2, [pc, #336]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800482e:	f023 0304 	bic.w	r3, r3, #4
 8004832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d015      	beq.n	8004868 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd fbd4 	bl	8001fe8 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004842:	e00a      	b.n	800485a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004844:	f7fd fbd0 	bl	8001fe8 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e0cb      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	4b49      	ldr	r3, [pc, #292]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0ee      	beq.n	8004844 <HAL_RCC_OscConfig+0x334>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004868:	f7fd fbbe 	bl	8001fe8 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	e00a      	b.n	8004886 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fd fbba 	bl	8001fe8 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0b5      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1ee      	bne.n	8004870 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004892:	7dfb      	ldrb	r3, [r7, #23]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004898:	4b39      	ldr	r3, [pc, #228]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	4a38      	ldr	r2, [pc, #224]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800489e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80a1 	beq.w	80049f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ae:	4b34      	ldr	r3, [pc, #208]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d05c      	beq.n	8004974 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d141      	bne.n	8004946 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <HAL_RCC_OscConfig+0x478>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fd fb8e 	bl	8001fe8 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fd fb8a 	bl	8001fe8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e087      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	3b01      	subs	r3, #1
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	491b      	ldr	r1, [pc, #108]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004914:	4313      	orrs	r3, r2
 8004916:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x478>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491e:	f7fd fb63 	bl	8001fe8 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004926:	f7fd fb5f 	bl	8001fe8 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e05c      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x416>
 8004944:	e054      	b.n	80049f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_RCC_OscConfig+0x478>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fd fb4c 	bl	8001fe8 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004954:	f7fd fb48 	bl	8001fe8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e045      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCC_OscConfig+0x470>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x444>
 8004972:	e03d      	b.n	80049f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d107      	bne.n	800498c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e038      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
 8004980:	40023800 	.word	0x40023800
 8004984:	40007000 	.word	0x40007000
 8004988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <HAL_RCC_OscConfig+0x4ec>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d028      	beq.n	80049ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d121      	bne.n	80049ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d11a      	bne.n	80049ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049bc:	4013      	ands	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d111      	bne.n	80049ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	3b01      	subs	r3, #1
 80049d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800

08004a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0cc      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a14:	4b68      	ldr	r3, [pc, #416]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d90c      	bls.n	8004a3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b63      	ldr	r3, [pc, #396]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0b8      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d020      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a54:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	4a58      	ldr	r2, [pc, #352]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a6c:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a52      	ldr	r2, [pc, #328]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a78:	4b50      	ldr	r3, [pc, #320]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	494d      	ldr	r1, [pc, #308]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d044      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9e:	4b47      	ldr	r3, [pc, #284]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d119      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e07f      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d003      	beq.n	8004abe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aba:	2b03      	cmp	r3, #3
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004abe:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06f      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ace:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e067      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ade:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4934      	ldr	r1, [pc, #208]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af0:	f7fd fa7a 	bl	8001fe8 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004af6:	e00a      	b.n	8004b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af8:	f7fd fa76 	bl	8001fe8 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e04f      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 020c 	and.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d1eb      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d20c      	bcs.n	8004b48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e032      	b.n	8004bae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b54:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4916      	ldr	r1, [pc, #88]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	490e      	ldr	r1, [pc, #56]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b86:	f000 f821 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	490a      	ldr	r1, [pc, #40]	; (8004bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b98:	5ccb      	ldrb	r3, [r1, r3]
 8004b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fd f9da 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023c00 	.word	0x40023c00
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	080079f4 	.word	0x080079f4
 8004bc4:	20000004 	.word	0x20000004
 8004bc8:	20000008 	.word	0x20000008

08004bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd0:	b094      	sub	sp, #80	; 0x50
 8004bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd8:	2300      	movs	r3, #0
 8004bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bdc:	2300      	movs	r3, #0
 8004bde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be4:	4b79      	ldr	r3, [pc, #484]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d00d      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x40>
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	f200 80e1 	bhi.w	8004db8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bfe:	e0db      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c00:	4b73      	ldr	r3, [pc, #460]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c04:	e0db      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c06:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0a:	e0d8      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c0c:	4b6f      	ldr	r3, [pc, #444]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c16:	4b6d      	ldr	r3, [pc, #436]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d063      	beq.n	8004cea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c22:	4b6a      	ldr	r3, [pc, #424]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	2200      	movs	r2, #0
 8004c2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
 8004c36:	2300      	movs	r3, #0
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c3e:	4622      	mov	r2, r4
 8004c40:	462b      	mov	r3, r5
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	0159      	lsls	r1, r3, #5
 8004c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c50:	0150      	lsls	r0, r2, #5
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4621      	mov	r1, r4
 8004c58:	1a51      	subs	r1, r2, r1
 8004c5a:	6139      	str	r1, [r7, #16]
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c70:	4659      	mov	r1, fp
 8004c72:	018b      	lsls	r3, r1, #6
 8004c74:	4651      	mov	r1, sl
 8004c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	018a      	lsls	r2, r1, #6
 8004c7e:	4651      	mov	r1, sl
 8004c80:	ebb2 0801 	subs.w	r8, r2, r1
 8004c84:	4659      	mov	r1, fp
 8004c86:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c9e:	4690      	mov	r8, r2
 8004ca0:	4699      	mov	r9, r3
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	eb18 0303 	adds.w	r3, r8, r3
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	462b      	mov	r3, r5
 8004cac:	eb49 0303 	adc.w	r3, r9, r3
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	024b      	lsls	r3, r1, #9
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cc8:	4621      	mov	r1, r4
 8004cca:	024a      	lsls	r2, r1, #9
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cdc:	f7fb ff7c 	bl	8000bd8 <__aeabi_uldivmod>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce8:	e058      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cea:	4b38      	ldr	r3, [pc, #224]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfa:	623b      	str	r3, [r7, #32]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004d00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d04:	4642      	mov	r2, r8
 8004d06:	464b      	mov	r3, r9
 8004d08:	f04f 0000 	mov.w	r0, #0
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	0159      	lsls	r1, r3, #5
 8004d12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d16:	0150      	lsls	r0, r2, #5
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4641      	mov	r1, r8
 8004d1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d22:	4649      	mov	r1, r9
 8004d24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d40:	eb63 050b 	sbc.w	r5, r3, fp
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	00eb      	lsls	r3, r5, #3
 8004d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d52:	00e2      	lsls	r2, r4, #3
 8004d54:	4614      	mov	r4, r2
 8004d56:	461d      	mov	r5, r3
 8004d58:	4643      	mov	r3, r8
 8004d5a:	18e3      	adds	r3, r4, r3
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	464b      	mov	r3, r9
 8004d60:	eb45 0303 	adc.w	r3, r5, r3
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d72:	4629      	mov	r1, r5
 8004d74:	028b      	lsls	r3, r1, #10
 8004d76:	4621      	mov	r1, r4
 8004d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	028a      	lsls	r2, r1, #10
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d86:	2200      	movs	r2, #0
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	61fa      	str	r2, [r7, #28]
 8004d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d90:	f7fb ff22 	bl	8000bd8 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004db6:	e002      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3750      	adds	r7, #80	; 0x50
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	00f42400 	.word	0x00f42400
 8004dd4:	007a1200 	.word	0x007a1200

08004dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	; (8004dec <HAL_RCC_GetHCLKFreq+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000004 	.word	0x20000004

08004df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df4:	f7ff fff0 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0a9b      	lsrs	r3, r3, #10
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4903      	ldr	r1, [pc, #12]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	08007a04 	.word	0x08007a04

08004e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e1c:	f7ff ffdc 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	0b5b      	lsrs	r3, r3, #13
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	4903      	ldr	r1, [pc, #12]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e2e:	5ccb      	ldrb	r3, [r1, r3]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	08007a04 	.word	0x08007a04

08004e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e03f      	b.n	8004ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc febe 	bl	8001be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fd19 	bl	80058bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d130      	bne.n	8004f56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_Transmit_IT+0x26>
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e029      	b.n	8004f58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_UART_Transmit_IT+0x38>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e022      	b.n	8004f58 <HAL_UART_Transmit_IT+0x7e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	88fa      	ldrh	r2, [r7, #6]
 8004f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2221      	movs	r2, #33	; 0x21
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e000      	b.n	8004f58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
  }
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d11d      	bne.n	8004fba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <HAL_UART_Receive_IT+0x26>
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e016      	b.n	8004fbc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_UART_Receive_IT+0x38>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e00f      	b.n	8004fbc <HAL_UART_Receive_IT+0x58>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	461a      	mov	r2, r3
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 faab 	bl	800550c <UART_Start_Receive_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	e000      	b.n	8004fbc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
  }
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b0ba      	sub	sp, #232	; 0xe8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_UART_IRQHandler+0x66>
 8005016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fb8f 	bl	8005746 <UART_Receive_IT>
      return;
 8005028:	e256      	b.n	80054d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800502a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80de 	beq.w	80051f0 <HAL_UART_IRQHandler+0x22c>
 8005034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80d1 	beq.w	80051f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00b      	beq.n	8005072 <HAL_UART_IRQHandler+0xae>
 800505a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <HAL_UART_IRQHandler+0xd2>
 800507e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0202 	orr.w	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_UART_IRQHandler+0xf6>
 80050a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d011      	beq.n	80050ea <HAL_UART_IRQHandler+0x126>
 80050c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ca:	f003 0320 	and.w	r3, r3, #32
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d105      	bne.n	80050de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d005      	beq.n	80050ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f043 0208 	orr.w	r2, r3, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 81ed 	beq.w	80054ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_UART_IRQHandler+0x14e>
 8005100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb1a 	bl	8005746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b40      	cmp	r3, #64	; 0x40
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d103      	bne.n	800513e <HAL_UART_IRQHandler+0x17a>
 8005136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d04f      	beq.n	80051de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa22 	bl	8005588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d141      	bne.n	80051d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3314      	adds	r3, #20
 8005158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800516c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	3314      	adds	r3, #20
 800517a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800517e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800518a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1d9      	bne.n	8005152 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d013      	beq.n	80051ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	4a7d      	ldr	r2, [pc, #500]	; (80053a0 <HAL_UART_IRQHandler+0x3dc>)
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd f8a5 	bl	8002302 <HAL_DMA_Abort_IT>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051c8:	4610      	mov	r0, r2
 80051ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	e00e      	b.n	80051ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f986 	bl	80054e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	e00a      	b.n	80051ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f982 	bl	80054e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	e006      	b.n	80051ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f97e 	bl	80054e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051ea:	e170      	b.n	80054ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	bf00      	nop
    return;
 80051ee:	e16e      	b.n	80054ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	f040 814a 	bne.w	800548e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8143 	beq.w	800548e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 813c 	beq.w	800548e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	f040 80b4 	bne.w	80053a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8140 	beq.w	80054d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800525a:	429a      	cmp	r2, r3
 800525c:	f080 8139 	bcs.w	80054d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005266:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005272:	f000 8088 	beq.w	8005386 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	330c      	adds	r3, #12
 800527c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800528c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1d9      	bne.n	8005276 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3314      	adds	r3, #20
 80052c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3314      	adds	r3, #20
 80052e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e1      	bne.n	80052c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800530e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005314:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3314      	adds	r3, #20
 800531e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005322:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005324:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005328:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e3      	bne.n	80052fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005356:	f023 0310 	bic.w	r3, r3, #16
 800535a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005368:	65ba      	str	r2, [r7, #88]	; 0x58
 800536a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800536e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e3      	bne.n	8005344 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	4618      	mov	r0, r3
 8005382:	f7fc ff4e 	bl	8002222 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800538e:	b29b      	uxth	r3, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	b29b      	uxth	r3, r3
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8ac 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800539c:	e099      	b.n	80054d2 <HAL_UART_IRQHandler+0x50e>
 800539e:	bf00      	nop
 80053a0:	0800564f 	.word	0x0800564f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 808b 	beq.w	80054d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8086 	beq.w	80054d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	330c      	adds	r3, #12
 80053ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053ee:	647a      	str	r2, [r7, #68]	; 0x44
 80053f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e3      	bne.n	80053ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3314      	adds	r3, #20
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	623b      	str	r3, [r7, #32]
   return(result);
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3314      	adds	r3, #20
 8005422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005426:	633a      	str	r2, [r7, #48]	; 0x30
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e3      	bne.n	8005402 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	60fb      	str	r3, [r7, #12]
   return(result);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0310 	bic.w	r3, r3, #16
 800545e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	330c      	adds	r3, #12
 8005468:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800546c:	61fa      	str	r2, [r7, #28]
 800546e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	617b      	str	r3, [r7, #20]
   return(result);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e3      	bne.n	8005448 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f834 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800548c:	e023      	b.n	80054d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_UART_IRQHandler+0x4ea>
 800549a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8e5 	bl	8005676 <UART_Transmit_IT>
    return;
 80054ac:	e014      	b.n	80054d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00e      	beq.n	80054d8 <HAL_UART_IRQHandler+0x514>
 80054ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f925 	bl	8005716 <UART_EndTransmit_IT>
    return;
 80054cc:	e004      	b.n	80054d8 <HAL_UART_IRQHandler+0x514>
    return;
 80054ce:	bf00      	nop
 80054d0:	e002      	b.n	80054d8 <HAL_UART_IRQHandler+0x514>
      return;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <HAL_UART_IRQHandler+0x514>
      return;
 80054d6:	bf00      	nop
  }
}
 80054d8:	37e8      	adds	r7, #232	; 0xe8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop

080054e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2222      	movs	r2, #34	; 0x22
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005558:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0220 	orr.w	r2, r2, #32
 8005578:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b095      	sub	sp, #84	; 0x54
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055b0:	643a      	str	r2, [r7, #64]	; 0x40
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3314      	adds	r3, #20
 80055ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	64bb      	str	r3, [r7, #72]	; 0x48
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d119      	bne.n	8005634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f023 0310 	bic.w	r3, r3, #16
 8005616:	647b      	str	r3, [r7, #68]	; 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005620:	61ba      	str	r2, [r7, #24]
 8005622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6979      	ldr	r1, [r7, #20]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	613b      	str	r3, [r7, #16]
   return(result);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e5      	bne.n	8005600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005642:	bf00      	nop
 8005644:	3754      	adds	r7, #84	; 0x54
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ff39 	bl	80054e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b21      	cmp	r3, #33	; 0x21
 8005688:	d13e      	bne.n	8005708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d114      	bne.n	80056be <UART_Transmit_IT+0x48>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]
 80056bc:	e008      	b.n	80056d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	1c59      	adds	r1, r3, #1
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6211      	str	r1, [r2, #32]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29b      	uxth	r3, r3
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4619      	mov	r1, r3
 80056de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10f      	bne.n	8005704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fb ff8e 	bl	8001658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08c      	sub	sp, #48	; 0x30
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b22      	cmp	r3, #34	; 0x22
 8005758:	f040 80ab 	bne.w	80058b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005764:	d117      	bne.n	8005796 <UART_Receive_IT+0x50>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d113      	bne.n	8005796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005784:	b29a      	uxth	r2, r3
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
 8005794:	e026      	b.n	80057e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a8:	d007      	beq.n	80057ba <UART_Receive_IT+0x74>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <UART_Receive_IT+0x82>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e008      	b.n	80057da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4619      	mov	r1, r3
 80057f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d15a      	bne.n	80058ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0220 	bic.w	r2, r2, #32
 8005806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0201 	bic.w	r2, r2, #1
 8005826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	2b01      	cmp	r3, #1
 8005836:	d135      	bne.n	80058a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	613b      	str	r3, [r7, #16]
   return(result);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f023 0310 	bic.w	r3, r3, #16
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	623a      	str	r2, [r7, #32]
 8005860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	69f9      	ldr	r1, [r7, #28]
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	61bb      	str	r3, [r7, #24]
   return(result);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b10      	cmp	r3, #16
 800587e:	d10a      	bne.n	8005896 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff fe29 	bl	80054f4 <HAL_UARTEx_RxEventCallback>
 80058a2:	e002      	b.n	80058aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fb ff0b 	bl	80016c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e002      	b.n	80058b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3730      	adds	r7, #48	; 0x30
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c0:	b0c0      	sub	sp, #256	; 0x100
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	68d9      	ldr	r1, [r3, #12]
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	ea40 0301 	orr.w	r3, r0, r1
 80058e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005914:	f021 010c 	bic.w	r1, r1, #12
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005922:	430b      	orrs	r3, r1
 8005924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	6999      	ldr	r1, [r3, #24]
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	ea40 0301 	orr.w	r3, r0, r1
 8005942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b8f      	ldr	r3, [pc, #572]	; (8005b88 <UART_SetConfig+0x2cc>)
 800594c:	429a      	cmp	r2, r3
 800594e:	d005      	beq.n	800595c <UART_SetConfig+0xa0>
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b8d      	ldr	r3, [pc, #564]	; (8005b8c <UART_SetConfig+0x2d0>)
 8005958:	429a      	cmp	r2, r3
 800595a:	d104      	bne.n	8005966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800595c:	f7ff fa5c 	bl	8004e18 <HAL_RCC_GetPCLK2Freq>
 8005960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005964:	e003      	b.n	800596e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005966:	f7ff fa43 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 800596a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005972:	69db      	ldr	r3, [r3, #28]
 8005974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005978:	f040 810c 	bne.w	8005b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800597c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005980:	2200      	movs	r2, #0
 8005982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800598a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800598e:	4622      	mov	r2, r4
 8005990:	462b      	mov	r3, r5
 8005992:	1891      	adds	r1, r2, r2
 8005994:	65b9      	str	r1, [r7, #88]	; 0x58
 8005996:	415b      	adcs	r3, r3
 8005998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800599a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800599e:	4621      	mov	r1, r4
 80059a0:	eb12 0801 	adds.w	r8, r2, r1
 80059a4:	4629      	mov	r1, r5
 80059a6:	eb43 0901 	adc.w	r9, r3, r1
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059be:	4690      	mov	r8, r2
 80059c0:	4699      	mov	r9, r3
 80059c2:	4623      	mov	r3, r4
 80059c4:	eb18 0303 	adds.w	r3, r8, r3
 80059c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059cc:	462b      	mov	r3, r5
 80059ce:	eb49 0303 	adc.w	r3, r9, r3
 80059d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80059e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059ea:	460b      	mov	r3, r1
 80059ec:	18db      	adds	r3, r3, r3
 80059ee:	653b      	str	r3, [r7, #80]	; 0x50
 80059f0:	4613      	mov	r3, r2
 80059f2:	eb42 0303 	adc.w	r3, r2, r3
 80059f6:	657b      	str	r3, [r7, #84]	; 0x54
 80059f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a00:	f7fb f8ea 	bl	8000bd8 <__aeabi_uldivmod>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4b61      	ldr	r3, [pc, #388]	; (8005b90 <UART_SetConfig+0x2d4>)
 8005a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	011c      	lsls	r4, r3, #4
 8005a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a24:	4642      	mov	r2, r8
 8005a26:	464b      	mov	r3, r9
 8005a28:	1891      	adds	r1, r2, r2
 8005a2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a2c:	415b      	adcs	r3, r3
 8005a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a34:	4641      	mov	r1, r8
 8005a36:	eb12 0a01 	adds.w	sl, r2, r1
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a54:	4692      	mov	sl, r2
 8005a56:	469b      	mov	fp, r3
 8005a58:	4643      	mov	r3, r8
 8005a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a62:	464b      	mov	r3, r9
 8005a64:	eb4b 0303 	adc.w	r3, fp, r3
 8005a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a80:	460b      	mov	r3, r1
 8005a82:	18db      	adds	r3, r3, r3
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
 8005a86:	4613      	mov	r3, r2
 8005a88:	eb42 0303 	adc.w	r3, r2, r3
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a96:	f7fb f89f 	bl	8000bd8 <__aeabi_uldivmod>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <UART_SetConfig+0x2d4>)
 8005aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	2264      	movs	r2, #100	; 0x64
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	1acb      	subs	r3, r1, r3
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ab6:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <UART_SetConfig+0x2d4>)
 8005ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ac4:	441c      	add	r4, r3
 8005ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ad8:	4642      	mov	r2, r8
 8005ada:	464b      	mov	r3, r9
 8005adc:	1891      	adds	r1, r2, r2
 8005ade:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ae0:	415b      	adcs	r3, r3
 8005ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ae8:	4641      	mov	r1, r8
 8005aea:	1851      	adds	r1, r2, r1
 8005aec:	6339      	str	r1, [r7, #48]	; 0x30
 8005aee:	4649      	mov	r1, r9
 8005af0:	414b      	adcs	r3, r1
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b00:	4659      	mov	r1, fp
 8005b02:	00cb      	lsls	r3, r1, #3
 8005b04:	4651      	mov	r1, sl
 8005b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	00ca      	lsls	r2, r1, #3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	4603      	mov	r3, r0
 8005b14:	4642      	mov	r2, r8
 8005b16:	189b      	adds	r3, r3, r2
 8005b18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	460a      	mov	r2, r1
 8005b20:	eb42 0303 	adc.w	r3, r2, r3
 8005b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	18db      	adds	r3, r3, r3
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b42:	4613      	mov	r3, r2
 8005b44:	eb42 0303 	adc.w	r3, r2, r3
 8005b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b52:	f7fb f841 	bl	8000bd8 <__aeabi_uldivmod>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <UART_SetConfig+0x2d4>)
 8005b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	2164      	movs	r1, #100	; 0x64
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	3332      	adds	r3, #50	; 0x32
 8005b6e:	4a08      	ldr	r2, [pc, #32]	; (8005b90 <UART_SetConfig+0x2d4>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	f003 0207 	and.w	r2, r3, #7
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4422      	add	r2, r4
 8005b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b84:	e106      	b.n	8005d94 <UART_SetConfig+0x4d8>
 8005b86:	bf00      	nop
 8005b88:	40011000 	.word	0x40011000
 8005b8c:	40011400 	.word	0x40011400
 8005b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	464b      	mov	r3, r9
 8005baa:	1891      	adds	r1, r2, r2
 8005bac:	6239      	str	r1, [r7, #32]
 8005bae:	415b      	adcs	r3, r3
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bb6:	4641      	mov	r1, r8
 8005bb8:	1854      	adds	r4, r2, r1
 8005bba:	4649      	mov	r1, r9
 8005bbc:	eb43 0501 	adc.w	r5, r3, r1
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	00eb      	lsls	r3, r5, #3
 8005bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bce:	00e2      	lsls	r2, r4, #3
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	461d      	mov	r5, r3
 8005bd4:	4643      	mov	r3, r8
 8005bd6:	18e3      	adds	r3, r4, r3
 8005bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bdc:	464b      	mov	r3, r9
 8005bde:	eb45 0303 	adc.w	r3, r5, r3
 8005be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c02:	4629      	mov	r1, r5
 8005c04:	008b      	lsls	r3, r1, #2
 8005c06:	4621      	mov	r1, r4
 8005c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	008a      	lsls	r2, r1, #2
 8005c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c14:	f7fa ffe0 	bl	8000bd8 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4b60      	ldr	r3, [pc, #384]	; (8005da0 <UART_SetConfig+0x4e4>)
 8005c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	011c      	lsls	r4, r3, #4
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c38:	4642      	mov	r2, r8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	1891      	adds	r1, r2, r2
 8005c3e:	61b9      	str	r1, [r7, #24]
 8005c40:	415b      	adcs	r3, r3
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c48:	4641      	mov	r1, r8
 8005c4a:	1851      	adds	r1, r2, r1
 8005c4c:	6139      	str	r1, [r7, #16]
 8005c4e:	4649      	mov	r1, r9
 8005c50:	414b      	adcs	r3, r1
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c60:	4659      	mov	r1, fp
 8005c62:	00cb      	lsls	r3, r1, #3
 8005c64:	4651      	mov	r1, sl
 8005c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6a:	4651      	mov	r1, sl
 8005c6c:	00ca      	lsls	r2, r1, #3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	4642      	mov	r2, r8
 8005c76:	189b      	adds	r3, r3, r2
 8005c78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	460a      	mov	r2, r1
 8005c80:	eb42 0303 	adc.w	r3, r2, r3
 8005c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	008b      	lsls	r3, r1, #2
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005caa:	4641      	mov	r1, r8
 8005cac:	008a      	lsls	r2, r1, #2
 8005cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005cb2:	f7fa ff91 	bl	8000bd8 <__aeabi_uldivmod>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <UART_SetConfig+0x4e4>)
 8005cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2264      	movs	r2, #100	; 0x64
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	1acb      	subs	r3, r1, r3
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	3332      	adds	r3, #50	; 0x32
 8005cd0:	4a33      	ldr	r2, [pc, #204]	; (8005da0 <UART_SetConfig+0x4e4>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cdc:	441c      	add	r4, r3
 8005cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8005ce6:	677a      	str	r2, [r7, #116]	; 0x74
 8005ce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	1891      	adds	r1, r2, r2
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	415b      	adcs	r3, r3
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	1851      	adds	r1, r2, r1
 8005d00:	6039      	str	r1, [r7, #0]
 8005d02:	4649      	mov	r1, r9
 8005d04:	414b      	adcs	r3, r1
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d14:	4659      	mov	r1, fp
 8005d16:	00cb      	lsls	r3, r1, #3
 8005d18:	4651      	mov	r1, sl
 8005d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d1e:	4651      	mov	r1, sl
 8005d20:	00ca      	lsls	r2, r1, #3
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	4642      	mov	r2, r8
 8005d2a:	189b      	adds	r3, r3, r2
 8005d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d2e:	464b      	mov	r3, r9
 8005d30:	460a      	mov	r2, r1
 8005d32:	eb42 0303 	adc.w	r3, r2, r3
 8005d36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	663b      	str	r3, [r7, #96]	; 0x60
 8005d42:	667a      	str	r2, [r7, #100]	; 0x64
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d50:	4649      	mov	r1, r9
 8005d52:	008b      	lsls	r3, r1, #2
 8005d54:	4641      	mov	r1, r8
 8005d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	008a      	lsls	r2, r1, #2
 8005d5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d62:	f7fa ff39 	bl	8000bd8 <__aeabi_uldivmod>
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <UART_SetConfig+0x4e4>)
 8005d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	2164      	movs	r1, #100	; 0x64
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	3332      	adds	r3, #50	; 0x32
 8005d7e:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <UART_SetConfig+0x4e4>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	f003 020f 	and.w	r2, r3, #15
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4422      	add	r2, r4
 8005d92:	609a      	str	r2, [r3, #8]
}
 8005d94:	bf00      	nop
 8005d96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005da0:	51eb851f 	.word	0x51eb851f

08005da4 <atoi>:
 8005da4:	220a      	movs	r2, #10
 8005da6:	2100      	movs	r1, #0
 8005da8:	f000 b882 	b.w	8005eb0 <strtol>

08005dac <_strtol_l.constprop.0>:
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db2:	d001      	beq.n	8005db8 <_strtol_l.constprop.0+0xc>
 8005db4:	2b24      	cmp	r3, #36	; 0x24
 8005db6:	d906      	bls.n	8005dc6 <_strtol_l.constprop.0+0x1a>
 8005db8:	f000 fa9a 	bl	80062f0 <__errno>
 8005dbc:	2316      	movs	r3, #22
 8005dbe:	6003      	str	r3, [r0, #0]
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005eac <_strtol_l.constprop.0+0x100>
 8005dca:	460d      	mov	r5, r1
 8005dcc:	462e      	mov	r6, r5
 8005dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dd2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005dd6:	f017 0708 	ands.w	r7, r7, #8
 8005dda:	d1f7      	bne.n	8005dcc <_strtol_l.constprop.0+0x20>
 8005ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8005dde:	d132      	bne.n	8005e46 <_strtol_l.constprop.0+0x9a>
 8005de0:	782c      	ldrb	r4, [r5, #0]
 8005de2:	2701      	movs	r7, #1
 8005de4:	1cb5      	adds	r5, r6, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d05b      	beq.n	8005ea2 <_strtol_l.constprop.0+0xf6>
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d109      	bne.n	8005e02 <_strtol_l.constprop.0+0x56>
 8005dee:	2c30      	cmp	r4, #48	; 0x30
 8005df0:	d107      	bne.n	8005e02 <_strtol_l.constprop.0+0x56>
 8005df2:	782c      	ldrb	r4, [r5, #0]
 8005df4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005df8:	2c58      	cmp	r4, #88	; 0x58
 8005dfa:	d14d      	bne.n	8005e98 <_strtol_l.constprop.0+0xec>
 8005dfc:	786c      	ldrb	r4, [r5, #1]
 8005dfe:	2310      	movs	r3, #16
 8005e00:	3502      	adds	r5, #2
 8005e02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005e06:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e0a:	f04f 0e00 	mov.w	lr, #0
 8005e0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005e12:	4676      	mov	r6, lr
 8005e14:	fb03 8a19 	mls	sl, r3, r9, r8
 8005e18:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005e1c:	f1bc 0f09 	cmp.w	ip, #9
 8005e20:	d816      	bhi.n	8005e50 <_strtol_l.constprop.0+0xa4>
 8005e22:	4664      	mov	r4, ip
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	dd24      	ble.n	8005e72 <_strtol_l.constprop.0+0xc6>
 8005e28:	f1be 3fff 	cmp.w	lr, #4294967295
 8005e2c:	d008      	beq.n	8005e40 <_strtol_l.constprop.0+0x94>
 8005e2e:	45b1      	cmp	r9, r6
 8005e30:	d31c      	bcc.n	8005e6c <_strtol_l.constprop.0+0xc0>
 8005e32:	d101      	bne.n	8005e38 <_strtol_l.constprop.0+0x8c>
 8005e34:	45a2      	cmp	sl, r4
 8005e36:	db19      	blt.n	8005e6c <_strtol_l.constprop.0+0xc0>
 8005e38:	fb06 4603 	mla	r6, r6, r3, r4
 8005e3c:	f04f 0e01 	mov.w	lr, #1
 8005e40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e44:	e7e8      	b.n	8005e18 <_strtol_l.constprop.0+0x6c>
 8005e46:	2c2b      	cmp	r4, #43	; 0x2b
 8005e48:	bf04      	itt	eq
 8005e4a:	782c      	ldrbeq	r4, [r5, #0]
 8005e4c:	1cb5      	addeq	r5, r6, #2
 8005e4e:	e7ca      	b.n	8005de6 <_strtol_l.constprop.0+0x3a>
 8005e50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005e54:	f1bc 0f19 	cmp.w	ip, #25
 8005e58:	d801      	bhi.n	8005e5e <_strtol_l.constprop.0+0xb2>
 8005e5a:	3c37      	subs	r4, #55	; 0x37
 8005e5c:	e7e2      	b.n	8005e24 <_strtol_l.constprop.0+0x78>
 8005e5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005e62:	f1bc 0f19 	cmp.w	ip, #25
 8005e66:	d804      	bhi.n	8005e72 <_strtol_l.constprop.0+0xc6>
 8005e68:	3c57      	subs	r4, #87	; 0x57
 8005e6a:	e7db      	b.n	8005e24 <_strtol_l.constprop.0+0x78>
 8005e6c:	f04f 3eff 	mov.w	lr, #4294967295
 8005e70:	e7e6      	b.n	8005e40 <_strtol_l.constprop.0+0x94>
 8005e72:	f1be 3fff 	cmp.w	lr, #4294967295
 8005e76:	d105      	bne.n	8005e84 <_strtol_l.constprop.0+0xd8>
 8005e78:	2322      	movs	r3, #34	; 0x22
 8005e7a:	6003      	str	r3, [r0, #0]
 8005e7c:	4646      	mov	r6, r8
 8005e7e:	b942      	cbnz	r2, 8005e92 <_strtol_l.constprop.0+0xe6>
 8005e80:	4630      	mov	r0, r6
 8005e82:	e79e      	b.n	8005dc2 <_strtol_l.constprop.0+0x16>
 8005e84:	b107      	cbz	r7, 8005e88 <_strtol_l.constprop.0+0xdc>
 8005e86:	4276      	negs	r6, r6
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	d0f9      	beq.n	8005e80 <_strtol_l.constprop.0+0xd4>
 8005e8c:	f1be 0f00 	cmp.w	lr, #0
 8005e90:	d000      	beq.n	8005e94 <_strtol_l.constprop.0+0xe8>
 8005e92:	1e69      	subs	r1, r5, #1
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	e7f3      	b.n	8005e80 <_strtol_l.constprop.0+0xd4>
 8005e98:	2430      	movs	r4, #48	; 0x30
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1b1      	bne.n	8005e02 <_strtol_l.constprop.0+0x56>
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	e7af      	b.n	8005e02 <_strtol_l.constprop.0+0x56>
 8005ea2:	2c30      	cmp	r4, #48	; 0x30
 8005ea4:	d0a5      	beq.n	8005df2 <_strtol_l.constprop.0+0x46>
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	e7ab      	b.n	8005e02 <_strtol_l.constprop.0+0x56>
 8005eaa:	bf00      	nop
 8005eac:	08007a0d 	.word	0x08007a0d

08005eb0 <strtol>:
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	4601      	mov	r1, r0
 8005eb6:	4802      	ldr	r0, [pc, #8]	; (8005ec0 <strtol+0x10>)
 8005eb8:	6800      	ldr	r0, [r0, #0]
 8005eba:	f7ff bf77 	b.w	8005dac <_strtol_l.constprop.0>
 8005ebe:	bf00      	nop
 8005ec0:	20000068 	.word	0x20000068

08005ec4 <std>:
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	4604      	mov	r4, r0
 8005eca:	e9c0 3300 	strd	r3, r3, [r0]
 8005ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ed2:	6083      	str	r3, [r0, #8]
 8005ed4:	8181      	strh	r1, [r0, #12]
 8005ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ed8:	81c2      	strh	r2, [r0, #14]
 8005eda:	6183      	str	r3, [r0, #24]
 8005edc:	4619      	mov	r1, r3
 8005ede:	2208      	movs	r2, #8
 8005ee0:	305c      	adds	r0, #92	; 0x5c
 8005ee2:	f000 f935 	bl	8006150 <memset>
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <std+0x58>)
 8005ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8005eea:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <std+0x5c>)
 8005eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eee:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <std+0x60>)
 8005ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <std+0x64>)
 8005ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <std+0x68>)
 8005ef8:	6224      	str	r4, [r4, #32]
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d006      	beq.n	8005f0c <std+0x48>
 8005efe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f02:	4294      	cmp	r4, r2
 8005f04:	d002      	beq.n	8005f0c <std+0x48>
 8005f06:	33d0      	adds	r3, #208	; 0xd0
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d105      	bne.n	8005f18 <std+0x54>
 8005f0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	f000 ba16 	b.w	8006344 <__retarget_lock_init_recursive>
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	bf00      	nop
 8005f1c:	08006089 	.word	0x08006089
 8005f20:	080060ab 	.word	0x080060ab
 8005f24:	080060e3 	.word	0x080060e3
 8005f28:	08006107 	.word	0x08006107
 8005f2c:	20000938 	.word	0x20000938

08005f30 <stdio_exit_handler>:
 8005f30:	4a02      	ldr	r2, [pc, #8]	; (8005f3c <stdio_exit_handler+0xc>)
 8005f32:	4903      	ldr	r1, [pc, #12]	; (8005f40 <stdio_exit_handler+0x10>)
 8005f34:	4803      	ldr	r0, [pc, #12]	; (8005f44 <stdio_exit_handler+0x14>)
 8005f36:	f000 b869 	b.w	800600c <_fwalk_sglue>
 8005f3a:	bf00      	nop
 8005f3c:	20000010 	.word	0x20000010
 8005f40:	08006c65 	.word	0x08006c65
 8005f44:	2000001c 	.word	0x2000001c

08005f48 <cleanup_stdio>:
 8005f48:	6841      	ldr	r1, [r0, #4]
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <cleanup_stdio+0x34>)
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	b510      	push	{r4, lr}
 8005f50:	4604      	mov	r4, r0
 8005f52:	d001      	beq.n	8005f58 <cleanup_stdio+0x10>
 8005f54:	f000 fe86 	bl	8006c64 <_fflush_r>
 8005f58:	68a1      	ldr	r1, [r4, #8]
 8005f5a:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <cleanup_stdio+0x38>)
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	d002      	beq.n	8005f66 <cleanup_stdio+0x1e>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 fe7f 	bl	8006c64 <_fflush_r>
 8005f66:	68e1      	ldr	r1, [r4, #12]
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <cleanup_stdio+0x3c>)
 8005f6a:	4299      	cmp	r1, r3
 8005f6c:	d004      	beq.n	8005f78 <cleanup_stdio+0x30>
 8005f6e:	4620      	mov	r0, r4
 8005f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f74:	f000 be76 	b.w	8006c64 <_fflush_r>
 8005f78:	bd10      	pop	{r4, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000938 	.word	0x20000938
 8005f80:	200009a0 	.word	0x200009a0
 8005f84:	20000a08 	.word	0x20000a08

08005f88 <global_stdio_init.part.0>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <global_stdio_init.part.0+0x30>)
 8005f8c:	4c0b      	ldr	r4, [pc, #44]	; (8005fbc <global_stdio_init.part.0+0x34>)
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <global_stdio_init.part.0+0x38>)
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	4620      	mov	r0, r4
 8005f94:	2200      	movs	r2, #0
 8005f96:	2104      	movs	r1, #4
 8005f98:	f7ff ff94 	bl	8005ec4 <std>
 8005f9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2109      	movs	r1, #9
 8005fa4:	f7ff ff8e 	bl	8005ec4 <std>
 8005fa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005fac:	2202      	movs	r2, #2
 8005fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb2:	2112      	movs	r1, #18
 8005fb4:	f7ff bf86 	b.w	8005ec4 <std>
 8005fb8:	20000a70 	.word	0x20000a70
 8005fbc:	20000938 	.word	0x20000938
 8005fc0:	08005f31 	.word	0x08005f31

08005fc4 <__sfp_lock_acquire>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	; (8005fcc <__sfp_lock_acquire+0x8>)
 8005fc6:	f000 b9be 	b.w	8006346 <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	20000a79 	.word	0x20000a79

08005fd0 <__sfp_lock_release>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__sfp_lock_release+0x8>)
 8005fd2:	f000 b9b9 	b.w	8006348 <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000a79 	.word	0x20000a79

08005fdc <__sinit>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	4604      	mov	r4, r0
 8005fe0:	f7ff fff0 	bl	8005fc4 <__sfp_lock_acquire>
 8005fe4:	6a23      	ldr	r3, [r4, #32]
 8005fe6:	b11b      	cbz	r3, 8005ff0 <__sinit+0x14>
 8005fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fec:	f7ff bff0 	b.w	8005fd0 <__sfp_lock_release>
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <__sinit+0x28>)
 8005ff2:	6223      	str	r3, [r4, #32]
 8005ff4:	4b04      	ldr	r3, [pc, #16]	; (8006008 <__sinit+0x2c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f5      	bne.n	8005fe8 <__sinit+0xc>
 8005ffc:	f7ff ffc4 	bl	8005f88 <global_stdio_init.part.0>
 8006000:	e7f2      	b.n	8005fe8 <__sinit+0xc>
 8006002:	bf00      	nop
 8006004:	08005f49 	.word	0x08005f49
 8006008:	20000a70 	.word	0x20000a70

0800600c <_fwalk_sglue>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	4607      	mov	r7, r0
 8006012:	4688      	mov	r8, r1
 8006014:	4614      	mov	r4, r2
 8006016:	2600      	movs	r6, #0
 8006018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800601c:	f1b9 0901 	subs.w	r9, r9, #1
 8006020:	d505      	bpl.n	800602e <_fwalk_sglue+0x22>
 8006022:	6824      	ldr	r4, [r4, #0]
 8006024:	2c00      	cmp	r4, #0
 8006026:	d1f7      	bne.n	8006018 <_fwalk_sglue+0xc>
 8006028:	4630      	mov	r0, r6
 800602a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602e:	89ab      	ldrh	r3, [r5, #12]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d907      	bls.n	8006044 <_fwalk_sglue+0x38>
 8006034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006038:	3301      	adds	r3, #1
 800603a:	d003      	beq.n	8006044 <_fwalk_sglue+0x38>
 800603c:	4629      	mov	r1, r5
 800603e:	4638      	mov	r0, r7
 8006040:	47c0      	blx	r8
 8006042:	4306      	orrs	r6, r0
 8006044:	3568      	adds	r5, #104	; 0x68
 8006046:	e7e9      	b.n	800601c <_fwalk_sglue+0x10>

08006048 <siprintf>:
 8006048:	b40e      	push	{r1, r2, r3}
 800604a:	b500      	push	{lr}
 800604c:	b09c      	sub	sp, #112	; 0x70
 800604e:	ab1d      	add	r3, sp, #116	; 0x74
 8006050:	9002      	str	r0, [sp, #8]
 8006052:	9006      	str	r0, [sp, #24]
 8006054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006058:	4809      	ldr	r0, [pc, #36]	; (8006080 <siprintf+0x38>)
 800605a:	9107      	str	r1, [sp, #28]
 800605c:	9104      	str	r1, [sp, #16]
 800605e:	4909      	ldr	r1, [pc, #36]	; (8006084 <siprintf+0x3c>)
 8006060:	f853 2b04 	ldr.w	r2, [r3], #4
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	6800      	ldr	r0, [r0, #0]
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	a902      	add	r1, sp, #8
 800606c:	f000 fae6 	bl	800663c <_svfiprintf_r>
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	b01c      	add	sp, #112	; 0x70
 8006078:	f85d eb04 	ldr.w	lr, [sp], #4
 800607c:	b003      	add	sp, #12
 800607e:	4770      	bx	lr
 8006080:	20000068 	.word	0x20000068
 8006084:	ffff0208 	.word	0xffff0208

08006088 <__sread>:
 8006088:	b510      	push	{r4, lr}
 800608a:	460c      	mov	r4, r1
 800608c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006090:	f000 f90a 	bl	80062a8 <_read_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	bfab      	itete	ge
 8006098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800609a:	89a3      	ldrhlt	r3, [r4, #12]
 800609c:	181b      	addge	r3, r3, r0
 800609e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060a2:	bfac      	ite	ge
 80060a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060a6:	81a3      	strhlt	r3, [r4, #12]
 80060a8:	bd10      	pop	{r4, pc}

080060aa <__swrite>:
 80060aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	461f      	mov	r7, r3
 80060b0:	898b      	ldrh	r3, [r1, #12]
 80060b2:	05db      	lsls	r3, r3, #23
 80060b4:	4605      	mov	r5, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	4616      	mov	r6, r2
 80060ba:	d505      	bpl.n	80060c8 <__swrite+0x1e>
 80060bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c0:	2302      	movs	r3, #2
 80060c2:	2200      	movs	r2, #0
 80060c4:	f000 f8de 	bl	8006284 <_lseek_r>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	4628      	mov	r0, r5
 80060da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060de:	f000 b8f5 	b.w	80062cc <_write_r>

080060e2 <__sseek>:
 80060e2:	b510      	push	{r4, lr}
 80060e4:	460c      	mov	r4, r1
 80060e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ea:	f000 f8cb 	bl	8006284 <_lseek_r>
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	bf15      	itete	ne
 80060f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060fe:	81a3      	strheq	r3, [r4, #12]
 8006100:	bf18      	it	ne
 8006102:	81a3      	strhne	r3, [r4, #12]
 8006104:	bd10      	pop	{r4, pc}

08006106 <__sclose>:
 8006106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610a:	f000 b8ab 	b.w	8006264 <_close_r>
	...

08006110 <_vsiprintf_r>:
 8006110:	b500      	push	{lr}
 8006112:	b09b      	sub	sp, #108	; 0x6c
 8006114:	9100      	str	r1, [sp, #0]
 8006116:	9104      	str	r1, [sp, #16]
 8006118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800611c:	9105      	str	r1, [sp, #20]
 800611e:	9102      	str	r1, [sp, #8]
 8006120:	4905      	ldr	r1, [pc, #20]	; (8006138 <_vsiprintf_r+0x28>)
 8006122:	9103      	str	r1, [sp, #12]
 8006124:	4669      	mov	r1, sp
 8006126:	f000 fa89 	bl	800663c <_svfiprintf_r>
 800612a:	9b00      	ldr	r3, [sp, #0]
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	b01b      	add	sp, #108	; 0x6c
 8006132:	f85d fb04 	ldr.w	pc, [sp], #4
 8006136:	bf00      	nop
 8006138:	ffff0208 	.word	0xffff0208

0800613c <vsiprintf>:
 800613c:	4613      	mov	r3, r2
 800613e:	460a      	mov	r2, r1
 8006140:	4601      	mov	r1, r0
 8006142:	4802      	ldr	r0, [pc, #8]	; (800614c <vsiprintf+0x10>)
 8006144:	6800      	ldr	r0, [r0, #0]
 8006146:	f7ff bfe3 	b.w	8006110 <_vsiprintf_r>
 800614a:	bf00      	nop
 800614c:	20000068 	.word	0x20000068

08006150 <memset>:
 8006150:	4402      	add	r2, r0
 8006152:	4603      	mov	r3, r0
 8006154:	4293      	cmp	r3, r2
 8006156:	d100      	bne.n	800615a <memset+0xa>
 8006158:	4770      	bx	lr
 800615a:	f803 1b01 	strb.w	r1, [r3], #1
 800615e:	e7f9      	b.n	8006154 <memset+0x4>

08006160 <strncmp>:
 8006160:	b510      	push	{r4, lr}
 8006162:	b16a      	cbz	r2, 8006180 <strncmp+0x20>
 8006164:	3901      	subs	r1, #1
 8006166:	1884      	adds	r4, r0, r2
 8006168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800616c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006170:	429a      	cmp	r2, r3
 8006172:	d103      	bne.n	800617c <strncmp+0x1c>
 8006174:	42a0      	cmp	r0, r4
 8006176:	d001      	beq.n	800617c <strncmp+0x1c>
 8006178:	2a00      	cmp	r2, #0
 800617a:	d1f5      	bne.n	8006168 <strncmp+0x8>
 800617c:	1ad0      	subs	r0, r2, r3
 800617e:	bd10      	pop	{r4, pc}
 8006180:	4610      	mov	r0, r2
 8006182:	e7fc      	b.n	800617e <strncmp+0x1e>

08006184 <strncpy>:
 8006184:	b510      	push	{r4, lr}
 8006186:	3901      	subs	r1, #1
 8006188:	4603      	mov	r3, r0
 800618a:	b132      	cbz	r2, 800619a <strncpy+0x16>
 800618c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006190:	f803 4b01 	strb.w	r4, [r3], #1
 8006194:	3a01      	subs	r2, #1
 8006196:	2c00      	cmp	r4, #0
 8006198:	d1f7      	bne.n	800618a <strncpy+0x6>
 800619a:	441a      	add	r2, r3
 800619c:	2100      	movs	r1, #0
 800619e:	4293      	cmp	r3, r2
 80061a0:	d100      	bne.n	80061a4 <strncpy+0x20>
 80061a2:	bd10      	pop	{r4, pc}
 80061a4:	f803 1b01 	strb.w	r1, [r3], #1
 80061a8:	e7f9      	b.n	800619e <strncpy+0x1a>
	...

080061ac <strtok>:
 80061ac:	4b16      	ldr	r3, [pc, #88]	; (8006208 <strtok+0x5c>)
 80061ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b0:	681e      	ldr	r6, [r3, #0]
 80061b2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80061b4:	4605      	mov	r5, r0
 80061b6:	b9fc      	cbnz	r4, 80061f8 <strtok+0x4c>
 80061b8:	2050      	movs	r0, #80	; 0x50
 80061ba:	9101      	str	r1, [sp, #4]
 80061bc:	f000 f930 	bl	8006420 <malloc>
 80061c0:	9901      	ldr	r1, [sp, #4]
 80061c2:	6470      	str	r0, [r6, #68]	; 0x44
 80061c4:	4602      	mov	r2, r0
 80061c6:	b920      	cbnz	r0, 80061d2 <strtok+0x26>
 80061c8:	4b10      	ldr	r3, [pc, #64]	; (800620c <strtok+0x60>)
 80061ca:	4811      	ldr	r0, [pc, #68]	; (8006210 <strtok+0x64>)
 80061cc:	215b      	movs	r1, #91	; 0x5b
 80061ce:	f000 f8bd 	bl	800634c <__assert_func>
 80061d2:	e9c0 4400 	strd	r4, r4, [r0]
 80061d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80061da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80061de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80061e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80061e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80061ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80061ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80061f2:	6184      	str	r4, [r0, #24]
 80061f4:	7704      	strb	r4, [r0, #28]
 80061f6:	6244      	str	r4, [r0, #36]	; 0x24
 80061f8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80061fa:	2301      	movs	r3, #1
 80061fc:	4628      	mov	r0, r5
 80061fe:	b002      	add	sp, #8
 8006200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006204:	f000 b806 	b.w	8006214 <__strtok_r>
 8006208:	20000068 	.word	0x20000068
 800620c:	08007b0d 	.word	0x08007b0d
 8006210:	08007b24 	.word	0x08007b24

08006214 <__strtok_r>:
 8006214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006216:	b908      	cbnz	r0, 800621c <__strtok_r+0x8>
 8006218:	6810      	ldr	r0, [r2, #0]
 800621a:	b188      	cbz	r0, 8006240 <__strtok_r+0x2c>
 800621c:	4604      	mov	r4, r0
 800621e:	4620      	mov	r0, r4
 8006220:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006224:	460f      	mov	r7, r1
 8006226:	f817 6b01 	ldrb.w	r6, [r7], #1
 800622a:	b91e      	cbnz	r6, 8006234 <__strtok_r+0x20>
 800622c:	b965      	cbnz	r5, 8006248 <__strtok_r+0x34>
 800622e:	6015      	str	r5, [r2, #0]
 8006230:	4628      	mov	r0, r5
 8006232:	e005      	b.n	8006240 <__strtok_r+0x2c>
 8006234:	42b5      	cmp	r5, r6
 8006236:	d1f6      	bne.n	8006226 <__strtok_r+0x12>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f0      	bne.n	800621e <__strtok_r+0xa>
 800623c:	6014      	str	r4, [r2, #0]
 800623e:	7003      	strb	r3, [r0, #0]
 8006240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006242:	461c      	mov	r4, r3
 8006244:	e00c      	b.n	8006260 <__strtok_r+0x4c>
 8006246:	b915      	cbnz	r5, 800624e <__strtok_r+0x3a>
 8006248:	f814 3b01 	ldrb.w	r3, [r4], #1
 800624c:	460e      	mov	r6, r1
 800624e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006252:	42ab      	cmp	r3, r5
 8006254:	d1f7      	bne.n	8006246 <__strtok_r+0x32>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f3      	beq.n	8006242 <__strtok_r+0x2e>
 800625a:	2300      	movs	r3, #0
 800625c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006260:	6014      	str	r4, [r2, #0]
 8006262:	e7ed      	b.n	8006240 <__strtok_r+0x2c>

08006264 <_close_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4d06      	ldr	r5, [pc, #24]	; (8006280 <_close_r+0x1c>)
 8006268:	2300      	movs	r3, #0
 800626a:	4604      	mov	r4, r0
 800626c:	4608      	mov	r0, r1
 800626e:	602b      	str	r3, [r5, #0]
 8006270:	f7fb fdad 	bl	8001dce <_close>
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	d102      	bne.n	800627e <_close_r+0x1a>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	b103      	cbz	r3, 800627e <_close_r+0x1a>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	20000a74 	.word	0x20000a74

08006284 <_lseek_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d07      	ldr	r5, [pc, #28]	; (80062a4 <_lseek_r+0x20>)
 8006288:	4604      	mov	r4, r0
 800628a:	4608      	mov	r0, r1
 800628c:	4611      	mov	r1, r2
 800628e:	2200      	movs	r2, #0
 8006290:	602a      	str	r2, [r5, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	f7fb fdc2 	bl	8001e1c <_lseek>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_lseek_r+0x1e>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_lseek_r+0x1e>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	20000a74 	.word	0x20000a74

080062a8 <_read_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d07      	ldr	r5, [pc, #28]	; (80062c8 <_read_r+0x20>)
 80062ac:	4604      	mov	r4, r0
 80062ae:	4608      	mov	r0, r1
 80062b0:	4611      	mov	r1, r2
 80062b2:	2200      	movs	r2, #0
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fb fd50 	bl	8001d5c <_read>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_read_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_read_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	20000a74 	.word	0x20000a74

080062cc <_write_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4d07      	ldr	r5, [pc, #28]	; (80062ec <_write_r+0x20>)
 80062d0:	4604      	mov	r4, r0
 80062d2:	4608      	mov	r0, r1
 80062d4:	4611      	mov	r1, r2
 80062d6:	2200      	movs	r2, #0
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fb fd5b 	bl	8001d96 <_write>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_write_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_write_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000a74 	.word	0x20000a74

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000068 	.word	0x20000068

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4d0d      	ldr	r5, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4c0d      	ldr	r4, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b64      	subs	r4, r4, r5
 8006304:	10a4      	asrs	r4, r4, #2
 8006306:	2600      	movs	r6, #0
 8006308:	42a6      	cmp	r6, r4
 800630a:	d109      	bne.n	8006320 <__libc_init_array+0x24>
 800630c:	4d0b      	ldr	r5, [pc, #44]	; (800633c <__libc_init_array+0x40>)
 800630e:	4c0c      	ldr	r4, [pc, #48]	; (8006340 <__libc_init_array+0x44>)
 8006310:	f001 fa88 	bl	8007824 <_init>
 8006314:	1b64      	subs	r4, r4, r5
 8006316:	10a4      	asrs	r4, r4, #2
 8006318:	2600      	movs	r6, #0
 800631a:	42a6      	cmp	r6, r4
 800631c:	d105      	bne.n	800632a <__libc_init_array+0x2e>
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	f855 3b04 	ldr.w	r3, [r5], #4
 8006324:	4798      	blx	r3
 8006326:	3601      	adds	r6, #1
 8006328:	e7ee      	b.n	8006308 <__libc_init_array+0xc>
 800632a:	f855 3b04 	ldr.w	r3, [r5], #4
 800632e:	4798      	blx	r3
 8006330:	3601      	adds	r6, #1
 8006332:	e7f2      	b.n	800631a <__libc_init_array+0x1e>
 8006334:	08007bf8 	.word	0x08007bf8
 8006338:	08007bf8 	.word	0x08007bf8
 800633c:	08007bf8 	.word	0x08007bf8
 8006340:	08007bfc 	.word	0x08007bfc

08006344 <__retarget_lock_init_recursive>:
 8006344:	4770      	bx	lr

08006346 <__retarget_lock_acquire_recursive>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_release_recursive>:
 8006348:	4770      	bx	lr
	...

0800634c <__assert_func>:
 800634c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800634e:	4614      	mov	r4, r2
 8006350:	461a      	mov	r2, r3
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <__assert_func+0x2c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4605      	mov	r5, r0
 8006358:	68d8      	ldr	r0, [r3, #12]
 800635a:	b14c      	cbz	r4, 8006370 <__assert_func+0x24>
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <__assert_func+0x30>)
 800635e:	9100      	str	r1, [sp, #0]
 8006360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006364:	4906      	ldr	r1, [pc, #24]	; (8006380 <__assert_func+0x34>)
 8006366:	462b      	mov	r3, r5
 8006368:	f000 fca4 	bl	8006cb4 <fiprintf>
 800636c:	f000 fcec 	bl	8006d48 <abort>
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <__assert_func+0x38>)
 8006372:	461c      	mov	r4, r3
 8006374:	e7f3      	b.n	800635e <__assert_func+0x12>
 8006376:	bf00      	nop
 8006378:	20000068 	.word	0x20000068
 800637c:	08007b7e 	.word	0x08007b7e
 8006380:	08007b8b 	.word	0x08007b8b
 8006384:	08007bb9 	.word	0x08007bb9

08006388 <_free_r>:
 8006388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800638a:	2900      	cmp	r1, #0
 800638c:	d044      	beq.n	8006418 <_free_r+0x90>
 800638e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006392:	9001      	str	r0, [sp, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f1a1 0404 	sub.w	r4, r1, #4
 800639a:	bfb8      	it	lt
 800639c:	18e4      	addlt	r4, r4, r3
 800639e:	f000 f8e7 	bl	8006570 <__malloc_lock>
 80063a2:	4a1e      	ldr	r2, [pc, #120]	; (800641c <_free_r+0x94>)
 80063a4:	9801      	ldr	r0, [sp, #4]
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	b933      	cbnz	r3, 80063b8 <_free_r+0x30>
 80063aa:	6063      	str	r3, [r4, #4]
 80063ac:	6014      	str	r4, [r2, #0]
 80063ae:	b003      	add	sp, #12
 80063b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063b4:	f000 b8e2 	b.w	800657c <__malloc_unlock>
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	d908      	bls.n	80063ce <_free_r+0x46>
 80063bc:	6825      	ldr	r5, [r4, #0]
 80063be:	1961      	adds	r1, r4, r5
 80063c0:	428b      	cmp	r3, r1
 80063c2:	bf01      	itttt	eq
 80063c4:	6819      	ldreq	r1, [r3, #0]
 80063c6:	685b      	ldreq	r3, [r3, #4]
 80063c8:	1949      	addeq	r1, r1, r5
 80063ca:	6021      	streq	r1, [r4, #0]
 80063cc:	e7ed      	b.n	80063aa <_free_r+0x22>
 80063ce:	461a      	mov	r2, r3
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	b10b      	cbz	r3, 80063d8 <_free_r+0x50>
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	d9fa      	bls.n	80063ce <_free_r+0x46>
 80063d8:	6811      	ldr	r1, [r2, #0]
 80063da:	1855      	adds	r5, r2, r1
 80063dc:	42a5      	cmp	r5, r4
 80063de:	d10b      	bne.n	80063f8 <_free_r+0x70>
 80063e0:	6824      	ldr	r4, [r4, #0]
 80063e2:	4421      	add	r1, r4
 80063e4:	1854      	adds	r4, r2, r1
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	6011      	str	r1, [r2, #0]
 80063ea:	d1e0      	bne.n	80063ae <_free_r+0x26>
 80063ec:	681c      	ldr	r4, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	6053      	str	r3, [r2, #4]
 80063f2:	440c      	add	r4, r1
 80063f4:	6014      	str	r4, [r2, #0]
 80063f6:	e7da      	b.n	80063ae <_free_r+0x26>
 80063f8:	d902      	bls.n	8006400 <_free_r+0x78>
 80063fa:	230c      	movs	r3, #12
 80063fc:	6003      	str	r3, [r0, #0]
 80063fe:	e7d6      	b.n	80063ae <_free_r+0x26>
 8006400:	6825      	ldr	r5, [r4, #0]
 8006402:	1961      	adds	r1, r4, r5
 8006404:	428b      	cmp	r3, r1
 8006406:	bf04      	itt	eq
 8006408:	6819      	ldreq	r1, [r3, #0]
 800640a:	685b      	ldreq	r3, [r3, #4]
 800640c:	6063      	str	r3, [r4, #4]
 800640e:	bf04      	itt	eq
 8006410:	1949      	addeq	r1, r1, r5
 8006412:	6021      	streq	r1, [r4, #0]
 8006414:	6054      	str	r4, [r2, #4]
 8006416:	e7ca      	b.n	80063ae <_free_r+0x26>
 8006418:	b003      	add	sp, #12
 800641a:	bd30      	pop	{r4, r5, pc}
 800641c:	20000a7c 	.word	0x20000a7c

08006420 <malloc>:
 8006420:	4b02      	ldr	r3, [pc, #8]	; (800642c <malloc+0xc>)
 8006422:	4601      	mov	r1, r0
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	f000 b823 	b.w	8006470 <_malloc_r>
 800642a:	bf00      	nop
 800642c:	20000068 	.word	0x20000068

08006430 <sbrk_aligned>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4e0e      	ldr	r6, [pc, #56]	; (800646c <sbrk_aligned+0x3c>)
 8006434:	460c      	mov	r4, r1
 8006436:	6831      	ldr	r1, [r6, #0]
 8006438:	4605      	mov	r5, r0
 800643a:	b911      	cbnz	r1, 8006442 <sbrk_aligned+0x12>
 800643c:	f000 fc66 	bl	8006d0c <_sbrk_r>
 8006440:	6030      	str	r0, [r6, #0]
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
 8006446:	f000 fc61 	bl	8006d0c <_sbrk_r>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d00a      	beq.n	8006464 <sbrk_aligned+0x34>
 800644e:	1cc4      	adds	r4, r0, #3
 8006450:	f024 0403 	bic.w	r4, r4, #3
 8006454:	42a0      	cmp	r0, r4
 8006456:	d007      	beq.n	8006468 <sbrk_aligned+0x38>
 8006458:	1a21      	subs	r1, r4, r0
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fc56 	bl	8006d0c <_sbrk_r>
 8006460:	3001      	adds	r0, #1
 8006462:	d101      	bne.n	8006468 <sbrk_aligned+0x38>
 8006464:	f04f 34ff 	mov.w	r4, #4294967295
 8006468:	4620      	mov	r0, r4
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	20000a80 	.word	0x20000a80

08006470 <_malloc_r>:
 8006470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006474:	1ccd      	adds	r5, r1, #3
 8006476:	f025 0503 	bic.w	r5, r5, #3
 800647a:	3508      	adds	r5, #8
 800647c:	2d0c      	cmp	r5, #12
 800647e:	bf38      	it	cc
 8006480:	250c      	movcc	r5, #12
 8006482:	2d00      	cmp	r5, #0
 8006484:	4607      	mov	r7, r0
 8006486:	db01      	blt.n	800648c <_malloc_r+0x1c>
 8006488:	42a9      	cmp	r1, r5
 800648a:	d905      	bls.n	8006498 <_malloc_r+0x28>
 800648c:	230c      	movs	r3, #12
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	2600      	movs	r6, #0
 8006492:	4630      	mov	r0, r6
 8006494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800656c <_malloc_r+0xfc>
 800649c:	f000 f868 	bl	8006570 <__malloc_lock>
 80064a0:	f8d8 3000 	ldr.w	r3, [r8]
 80064a4:	461c      	mov	r4, r3
 80064a6:	bb5c      	cbnz	r4, 8006500 <_malloc_r+0x90>
 80064a8:	4629      	mov	r1, r5
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7ff ffc0 	bl	8006430 <sbrk_aligned>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	4604      	mov	r4, r0
 80064b4:	d155      	bne.n	8006562 <_malloc_r+0xf2>
 80064b6:	f8d8 4000 	ldr.w	r4, [r8]
 80064ba:	4626      	mov	r6, r4
 80064bc:	2e00      	cmp	r6, #0
 80064be:	d145      	bne.n	800654c <_malloc_r+0xdc>
 80064c0:	2c00      	cmp	r4, #0
 80064c2:	d048      	beq.n	8006556 <_malloc_r+0xe6>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	4631      	mov	r1, r6
 80064c8:	4638      	mov	r0, r7
 80064ca:	eb04 0903 	add.w	r9, r4, r3
 80064ce:	f000 fc1d 	bl	8006d0c <_sbrk_r>
 80064d2:	4581      	cmp	r9, r0
 80064d4:	d13f      	bne.n	8006556 <_malloc_r+0xe6>
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	1a6d      	subs	r5, r5, r1
 80064da:	4629      	mov	r1, r5
 80064dc:	4638      	mov	r0, r7
 80064de:	f7ff ffa7 	bl	8006430 <sbrk_aligned>
 80064e2:	3001      	adds	r0, #1
 80064e4:	d037      	beq.n	8006556 <_malloc_r+0xe6>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	442b      	add	r3, r5
 80064ea:	6023      	str	r3, [r4, #0]
 80064ec:	f8d8 3000 	ldr.w	r3, [r8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d038      	beq.n	8006566 <_malloc_r+0xf6>
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	42a2      	cmp	r2, r4
 80064f8:	d12b      	bne.n	8006552 <_malloc_r+0xe2>
 80064fa:	2200      	movs	r2, #0
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	e00f      	b.n	8006520 <_malloc_r+0xb0>
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	1b52      	subs	r2, r2, r5
 8006504:	d41f      	bmi.n	8006546 <_malloc_r+0xd6>
 8006506:	2a0b      	cmp	r2, #11
 8006508:	d917      	bls.n	800653a <_malloc_r+0xca>
 800650a:	1961      	adds	r1, r4, r5
 800650c:	42a3      	cmp	r3, r4
 800650e:	6025      	str	r5, [r4, #0]
 8006510:	bf18      	it	ne
 8006512:	6059      	strne	r1, [r3, #4]
 8006514:	6863      	ldr	r3, [r4, #4]
 8006516:	bf08      	it	eq
 8006518:	f8c8 1000 	streq.w	r1, [r8]
 800651c:	5162      	str	r2, [r4, r5]
 800651e:	604b      	str	r3, [r1, #4]
 8006520:	4638      	mov	r0, r7
 8006522:	f104 060b 	add.w	r6, r4, #11
 8006526:	f000 f829 	bl	800657c <__malloc_unlock>
 800652a:	f026 0607 	bic.w	r6, r6, #7
 800652e:	1d23      	adds	r3, r4, #4
 8006530:	1af2      	subs	r2, r6, r3
 8006532:	d0ae      	beq.n	8006492 <_malloc_r+0x22>
 8006534:	1b9b      	subs	r3, r3, r6
 8006536:	50a3      	str	r3, [r4, r2]
 8006538:	e7ab      	b.n	8006492 <_malloc_r+0x22>
 800653a:	42a3      	cmp	r3, r4
 800653c:	6862      	ldr	r2, [r4, #4]
 800653e:	d1dd      	bne.n	80064fc <_malloc_r+0x8c>
 8006540:	f8c8 2000 	str.w	r2, [r8]
 8006544:	e7ec      	b.n	8006520 <_malloc_r+0xb0>
 8006546:	4623      	mov	r3, r4
 8006548:	6864      	ldr	r4, [r4, #4]
 800654a:	e7ac      	b.n	80064a6 <_malloc_r+0x36>
 800654c:	4634      	mov	r4, r6
 800654e:	6876      	ldr	r6, [r6, #4]
 8006550:	e7b4      	b.n	80064bc <_malloc_r+0x4c>
 8006552:	4613      	mov	r3, r2
 8006554:	e7cc      	b.n	80064f0 <_malloc_r+0x80>
 8006556:	230c      	movs	r3, #12
 8006558:	603b      	str	r3, [r7, #0]
 800655a:	4638      	mov	r0, r7
 800655c:	f000 f80e 	bl	800657c <__malloc_unlock>
 8006560:	e797      	b.n	8006492 <_malloc_r+0x22>
 8006562:	6025      	str	r5, [r4, #0]
 8006564:	e7dc      	b.n	8006520 <_malloc_r+0xb0>
 8006566:	605b      	str	r3, [r3, #4]
 8006568:	deff      	udf	#255	; 0xff
 800656a:	bf00      	nop
 800656c:	20000a7c 	.word	0x20000a7c

08006570 <__malloc_lock>:
 8006570:	4801      	ldr	r0, [pc, #4]	; (8006578 <__malloc_lock+0x8>)
 8006572:	f7ff bee8 	b.w	8006346 <__retarget_lock_acquire_recursive>
 8006576:	bf00      	nop
 8006578:	20000a78 	.word	0x20000a78

0800657c <__malloc_unlock>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__malloc_unlock+0x8>)
 800657e:	f7ff bee3 	b.w	8006348 <__retarget_lock_release_recursive>
 8006582:	bf00      	nop
 8006584:	20000a78 	.word	0x20000a78

08006588 <__ssputs_r>:
 8006588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	688e      	ldr	r6, [r1, #8]
 800658e:	461f      	mov	r7, r3
 8006590:	42be      	cmp	r6, r7
 8006592:	680b      	ldr	r3, [r1, #0]
 8006594:	4682      	mov	sl, r0
 8006596:	460c      	mov	r4, r1
 8006598:	4690      	mov	r8, r2
 800659a:	d82c      	bhi.n	80065f6 <__ssputs_r+0x6e>
 800659c:	898a      	ldrh	r2, [r1, #12]
 800659e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065a2:	d026      	beq.n	80065f2 <__ssputs_r+0x6a>
 80065a4:	6965      	ldr	r5, [r4, #20]
 80065a6:	6909      	ldr	r1, [r1, #16]
 80065a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065ac:	eba3 0901 	sub.w	r9, r3, r1
 80065b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065b4:	1c7b      	adds	r3, r7, #1
 80065b6:	444b      	add	r3, r9
 80065b8:	106d      	asrs	r5, r5, #1
 80065ba:	429d      	cmp	r5, r3
 80065bc:	bf38      	it	cc
 80065be:	461d      	movcc	r5, r3
 80065c0:	0553      	lsls	r3, r2, #21
 80065c2:	d527      	bpl.n	8006614 <__ssputs_r+0x8c>
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7ff ff53 	bl	8006470 <_malloc_r>
 80065ca:	4606      	mov	r6, r0
 80065cc:	b360      	cbz	r0, 8006628 <__ssputs_r+0xa0>
 80065ce:	6921      	ldr	r1, [r4, #16]
 80065d0:	464a      	mov	r2, r9
 80065d2:	f000 fbab 	bl	8006d2c <memcpy>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	6126      	str	r6, [r4, #16]
 80065e4:	6165      	str	r5, [r4, #20]
 80065e6:	444e      	add	r6, r9
 80065e8:	eba5 0509 	sub.w	r5, r5, r9
 80065ec:	6026      	str	r6, [r4, #0]
 80065ee:	60a5      	str	r5, [r4, #8]
 80065f0:	463e      	mov	r6, r7
 80065f2:	42be      	cmp	r6, r7
 80065f4:	d900      	bls.n	80065f8 <__ssputs_r+0x70>
 80065f6:	463e      	mov	r6, r7
 80065f8:	6820      	ldr	r0, [r4, #0]
 80065fa:	4632      	mov	r2, r6
 80065fc:	4641      	mov	r1, r8
 80065fe:	f000 fb6b 	bl	8006cd8 <memmove>
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	1b9b      	subs	r3, r3, r6
 8006606:	60a3      	str	r3, [r4, #8]
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	4433      	add	r3, r6
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	2000      	movs	r0, #0
 8006610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006614:	462a      	mov	r2, r5
 8006616:	f000 fb9e 	bl	8006d56 <_realloc_r>
 800661a:	4606      	mov	r6, r0
 800661c:	2800      	cmp	r0, #0
 800661e:	d1e0      	bne.n	80065e2 <__ssputs_r+0x5a>
 8006620:	6921      	ldr	r1, [r4, #16]
 8006622:	4650      	mov	r0, sl
 8006624:	f7ff feb0 	bl	8006388 <_free_r>
 8006628:	230c      	movs	r3, #12
 800662a:	f8ca 3000 	str.w	r3, [sl]
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006634:	81a3      	strh	r3, [r4, #12]
 8006636:	f04f 30ff 	mov.w	r0, #4294967295
 800663a:	e7e9      	b.n	8006610 <__ssputs_r+0x88>

0800663c <_svfiprintf_r>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	4698      	mov	r8, r3
 8006642:	898b      	ldrh	r3, [r1, #12]
 8006644:	061b      	lsls	r3, r3, #24
 8006646:	b09d      	sub	sp, #116	; 0x74
 8006648:	4607      	mov	r7, r0
 800664a:	460d      	mov	r5, r1
 800664c:	4614      	mov	r4, r2
 800664e:	d50e      	bpl.n	800666e <_svfiprintf_r+0x32>
 8006650:	690b      	ldr	r3, [r1, #16]
 8006652:	b963      	cbnz	r3, 800666e <_svfiprintf_r+0x32>
 8006654:	2140      	movs	r1, #64	; 0x40
 8006656:	f7ff ff0b 	bl	8006470 <_malloc_r>
 800665a:	6028      	str	r0, [r5, #0]
 800665c:	6128      	str	r0, [r5, #16]
 800665e:	b920      	cbnz	r0, 800666a <_svfiprintf_r+0x2e>
 8006660:	230c      	movs	r3, #12
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	e0d0      	b.n	800680c <_svfiprintf_r+0x1d0>
 800666a:	2340      	movs	r3, #64	; 0x40
 800666c:	616b      	str	r3, [r5, #20]
 800666e:	2300      	movs	r3, #0
 8006670:	9309      	str	r3, [sp, #36]	; 0x24
 8006672:	2320      	movs	r3, #32
 8006674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006678:	f8cd 800c 	str.w	r8, [sp, #12]
 800667c:	2330      	movs	r3, #48	; 0x30
 800667e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006824 <_svfiprintf_r+0x1e8>
 8006682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006686:	f04f 0901 	mov.w	r9, #1
 800668a:	4623      	mov	r3, r4
 800668c:	469a      	mov	sl, r3
 800668e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006692:	b10a      	cbz	r2, 8006698 <_svfiprintf_r+0x5c>
 8006694:	2a25      	cmp	r2, #37	; 0x25
 8006696:	d1f9      	bne.n	800668c <_svfiprintf_r+0x50>
 8006698:	ebba 0b04 	subs.w	fp, sl, r4
 800669c:	d00b      	beq.n	80066b6 <_svfiprintf_r+0x7a>
 800669e:	465b      	mov	r3, fp
 80066a0:	4622      	mov	r2, r4
 80066a2:	4629      	mov	r1, r5
 80066a4:	4638      	mov	r0, r7
 80066a6:	f7ff ff6f 	bl	8006588 <__ssputs_r>
 80066aa:	3001      	adds	r0, #1
 80066ac:	f000 80a9 	beq.w	8006802 <_svfiprintf_r+0x1c6>
 80066b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b2:	445a      	add	r2, fp
 80066b4:	9209      	str	r2, [sp, #36]	; 0x24
 80066b6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80a1 	beq.w	8006802 <_svfiprintf_r+0x1c6>
 80066c0:	2300      	movs	r3, #0
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ca:	f10a 0a01 	add.w	sl, sl, #1
 80066ce:	9304      	str	r3, [sp, #16]
 80066d0:	9307      	str	r3, [sp, #28]
 80066d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066d6:	931a      	str	r3, [sp, #104]	; 0x68
 80066d8:	4654      	mov	r4, sl
 80066da:	2205      	movs	r2, #5
 80066dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e0:	4850      	ldr	r0, [pc, #320]	; (8006824 <_svfiprintf_r+0x1e8>)
 80066e2:	f7f9 fd95 	bl	8000210 <memchr>
 80066e6:	9a04      	ldr	r2, [sp, #16]
 80066e8:	b9d8      	cbnz	r0, 8006722 <_svfiprintf_r+0xe6>
 80066ea:	06d0      	lsls	r0, r2, #27
 80066ec:	bf44      	itt	mi
 80066ee:	2320      	movmi	r3, #32
 80066f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f4:	0711      	lsls	r1, r2, #28
 80066f6:	bf44      	itt	mi
 80066f8:	232b      	movmi	r3, #43	; 0x2b
 80066fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006702:	2b2a      	cmp	r3, #42	; 0x2a
 8006704:	d015      	beq.n	8006732 <_svfiprintf_r+0xf6>
 8006706:	9a07      	ldr	r2, [sp, #28]
 8006708:	4654      	mov	r4, sl
 800670a:	2000      	movs	r0, #0
 800670c:	f04f 0c0a 	mov.w	ip, #10
 8006710:	4621      	mov	r1, r4
 8006712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006716:	3b30      	subs	r3, #48	; 0x30
 8006718:	2b09      	cmp	r3, #9
 800671a:	d94d      	bls.n	80067b8 <_svfiprintf_r+0x17c>
 800671c:	b1b0      	cbz	r0, 800674c <_svfiprintf_r+0x110>
 800671e:	9207      	str	r2, [sp, #28]
 8006720:	e014      	b.n	800674c <_svfiprintf_r+0x110>
 8006722:	eba0 0308 	sub.w	r3, r0, r8
 8006726:	fa09 f303 	lsl.w	r3, r9, r3
 800672a:	4313      	orrs	r3, r2
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	46a2      	mov	sl, r4
 8006730:	e7d2      	b.n	80066d8 <_svfiprintf_r+0x9c>
 8006732:	9b03      	ldr	r3, [sp, #12]
 8006734:	1d19      	adds	r1, r3, #4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	9103      	str	r1, [sp, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	bfbb      	ittet	lt
 800673e:	425b      	neglt	r3, r3
 8006740:	f042 0202 	orrlt.w	r2, r2, #2
 8006744:	9307      	strge	r3, [sp, #28]
 8006746:	9307      	strlt	r3, [sp, #28]
 8006748:	bfb8      	it	lt
 800674a:	9204      	strlt	r2, [sp, #16]
 800674c:	7823      	ldrb	r3, [r4, #0]
 800674e:	2b2e      	cmp	r3, #46	; 0x2e
 8006750:	d10c      	bne.n	800676c <_svfiprintf_r+0x130>
 8006752:	7863      	ldrb	r3, [r4, #1]
 8006754:	2b2a      	cmp	r3, #42	; 0x2a
 8006756:	d134      	bne.n	80067c2 <_svfiprintf_r+0x186>
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	1d1a      	adds	r2, r3, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	9203      	str	r2, [sp, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	bfb8      	it	lt
 8006764:	f04f 33ff 	movlt.w	r3, #4294967295
 8006768:	3402      	adds	r4, #2
 800676a:	9305      	str	r3, [sp, #20]
 800676c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006834 <_svfiprintf_r+0x1f8>
 8006770:	7821      	ldrb	r1, [r4, #0]
 8006772:	2203      	movs	r2, #3
 8006774:	4650      	mov	r0, sl
 8006776:	f7f9 fd4b 	bl	8000210 <memchr>
 800677a:	b138      	cbz	r0, 800678c <_svfiprintf_r+0x150>
 800677c:	9b04      	ldr	r3, [sp, #16]
 800677e:	eba0 000a 	sub.w	r0, r0, sl
 8006782:	2240      	movs	r2, #64	; 0x40
 8006784:	4082      	lsls	r2, r0
 8006786:	4313      	orrs	r3, r2
 8006788:	3401      	adds	r4, #1
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006790:	4825      	ldr	r0, [pc, #148]	; (8006828 <_svfiprintf_r+0x1ec>)
 8006792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006796:	2206      	movs	r2, #6
 8006798:	f7f9 fd3a 	bl	8000210 <memchr>
 800679c:	2800      	cmp	r0, #0
 800679e:	d038      	beq.n	8006812 <_svfiprintf_r+0x1d6>
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <_svfiprintf_r+0x1f0>)
 80067a2:	bb1b      	cbnz	r3, 80067ec <_svfiprintf_r+0x1b0>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	3307      	adds	r3, #7
 80067a8:	f023 0307 	bic.w	r3, r3, #7
 80067ac:	3308      	adds	r3, #8
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b2:	4433      	add	r3, r6
 80067b4:	9309      	str	r3, [sp, #36]	; 0x24
 80067b6:	e768      	b.n	800668a <_svfiprintf_r+0x4e>
 80067b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80067bc:	460c      	mov	r4, r1
 80067be:	2001      	movs	r0, #1
 80067c0:	e7a6      	b.n	8006710 <_svfiprintf_r+0xd4>
 80067c2:	2300      	movs	r3, #0
 80067c4:	3401      	adds	r4, #1
 80067c6:	9305      	str	r3, [sp, #20]
 80067c8:	4619      	mov	r1, r3
 80067ca:	f04f 0c0a 	mov.w	ip, #10
 80067ce:	4620      	mov	r0, r4
 80067d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d4:	3a30      	subs	r2, #48	; 0x30
 80067d6:	2a09      	cmp	r2, #9
 80067d8:	d903      	bls.n	80067e2 <_svfiprintf_r+0x1a6>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0c6      	beq.n	800676c <_svfiprintf_r+0x130>
 80067de:	9105      	str	r1, [sp, #20]
 80067e0:	e7c4      	b.n	800676c <_svfiprintf_r+0x130>
 80067e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80067e6:	4604      	mov	r4, r0
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7f0      	b.n	80067ce <_svfiprintf_r+0x192>
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	462a      	mov	r2, r5
 80067f2:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <_svfiprintf_r+0x1f4>)
 80067f4:	a904      	add	r1, sp, #16
 80067f6:	4638      	mov	r0, r7
 80067f8:	f3af 8000 	nop.w
 80067fc:	1c42      	adds	r2, r0, #1
 80067fe:	4606      	mov	r6, r0
 8006800:	d1d6      	bne.n	80067b0 <_svfiprintf_r+0x174>
 8006802:	89ab      	ldrh	r3, [r5, #12]
 8006804:	065b      	lsls	r3, r3, #25
 8006806:	f53f af2d 	bmi.w	8006664 <_svfiprintf_r+0x28>
 800680a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800680c:	b01d      	add	sp, #116	; 0x74
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	ab03      	add	r3, sp, #12
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	462a      	mov	r2, r5
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <_svfiprintf_r+0x1f4>)
 800681a:	a904      	add	r1, sp, #16
 800681c:	4638      	mov	r0, r7
 800681e:	f000 f879 	bl	8006914 <_printf_i>
 8006822:	e7eb      	b.n	80067fc <_svfiprintf_r+0x1c0>
 8006824:	08007bba 	.word	0x08007bba
 8006828:	08007bc4 	.word	0x08007bc4
 800682c:	00000000 	.word	0x00000000
 8006830:	08006589 	.word	0x08006589
 8006834:	08007bc0 	.word	0x08007bc0

08006838 <_printf_common>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	4616      	mov	r6, r2
 800683e:	4699      	mov	r9, r3
 8006840:	688a      	ldr	r2, [r1, #8]
 8006842:	690b      	ldr	r3, [r1, #16]
 8006844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006848:	4293      	cmp	r3, r2
 800684a:	bfb8      	it	lt
 800684c:	4613      	movlt	r3, r2
 800684e:	6033      	str	r3, [r6, #0]
 8006850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006854:	4607      	mov	r7, r0
 8006856:	460c      	mov	r4, r1
 8006858:	b10a      	cbz	r2, 800685e <_printf_common+0x26>
 800685a:	3301      	adds	r3, #1
 800685c:	6033      	str	r3, [r6, #0]
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	0699      	lsls	r1, r3, #26
 8006862:	bf42      	ittt	mi
 8006864:	6833      	ldrmi	r3, [r6, #0]
 8006866:	3302      	addmi	r3, #2
 8006868:	6033      	strmi	r3, [r6, #0]
 800686a:	6825      	ldr	r5, [r4, #0]
 800686c:	f015 0506 	ands.w	r5, r5, #6
 8006870:	d106      	bne.n	8006880 <_printf_common+0x48>
 8006872:	f104 0a19 	add.w	sl, r4, #25
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	6832      	ldr	r2, [r6, #0]
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	42ab      	cmp	r3, r5
 800687e:	dc26      	bgt.n	80068ce <_printf_common+0x96>
 8006880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006884:	1e13      	subs	r3, r2, #0
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	bf18      	it	ne
 800688a:	2301      	movne	r3, #1
 800688c:	0692      	lsls	r2, r2, #26
 800688e:	d42b      	bmi.n	80068e8 <_printf_common+0xb0>
 8006890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006894:	4649      	mov	r1, r9
 8006896:	4638      	mov	r0, r7
 8006898:	47c0      	blx	r8
 800689a:	3001      	adds	r0, #1
 800689c:	d01e      	beq.n	80068dc <_printf_common+0xa4>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	6922      	ldr	r2, [r4, #16]
 80068a2:	f003 0306 	and.w	r3, r3, #6
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	bf02      	ittt	eq
 80068aa:	68e5      	ldreq	r5, [r4, #12]
 80068ac:	6833      	ldreq	r3, [r6, #0]
 80068ae:	1aed      	subeq	r5, r5, r3
 80068b0:	68a3      	ldr	r3, [r4, #8]
 80068b2:	bf0c      	ite	eq
 80068b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b8:	2500      	movne	r5, #0
 80068ba:	4293      	cmp	r3, r2
 80068bc:	bfc4      	itt	gt
 80068be:	1a9b      	subgt	r3, r3, r2
 80068c0:	18ed      	addgt	r5, r5, r3
 80068c2:	2600      	movs	r6, #0
 80068c4:	341a      	adds	r4, #26
 80068c6:	42b5      	cmp	r5, r6
 80068c8:	d11a      	bne.n	8006900 <_printf_common+0xc8>
 80068ca:	2000      	movs	r0, #0
 80068cc:	e008      	b.n	80068e0 <_printf_common+0xa8>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4652      	mov	r2, sl
 80068d2:	4649      	mov	r1, r9
 80068d4:	4638      	mov	r0, r7
 80068d6:	47c0      	blx	r8
 80068d8:	3001      	adds	r0, #1
 80068da:	d103      	bne.n	80068e4 <_printf_common+0xac>
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e4:	3501      	adds	r5, #1
 80068e6:	e7c6      	b.n	8006876 <_printf_common+0x3e>
 80068e8:	18e1      	adds	r1, r4, r3
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	2030      	movs	r0, #48	; 0x30
 80068ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068f2:	4422      	add	r2, r4
 80068f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068fc:	3302      	adds	r3, #2
 80068fe:	e7c7      	b.n	8006890 <_printf_common+0x58>
 8006900:	2301      	movs	r3, #1
 8006902:	4622      	mov	r2, r4
 8006904:	4649      	mov	r1, r9
 8006906:	4638      	mov	r0, r7
 8006908:	47c0      	blx	r8
 800690a:	3001      	adds	r0, #1
 800690c:	d0e6      	beq.n	80068dc <_printf_common+0xa4>
 800690e:	3601      	adds	r6, #1
 8006910:	e7d9      	b.n	80068c6 <_printf_common+0x8e>
	...

08006914 <_printf_i>:
 8006914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	7e0f      	ldrb	r7, [r1, #24]
 800691a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800691c:	2f78      	cmp	r7, #120	; 0x78
 800691e:	4691      	mov	r9, r2
 8006920:	4680      	mov	r8, r0
 8006922:	460c      	mov	r4, r1
 8006924:	469a      	mov	sl, r3
 8006926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800692a:	d807      	bhi.n	800693c <_printf_i+0x28>
 800692c:	2f62      	cmp	r7, #98	; 0x62
 800692e:	d80a      	bhi.n	8006946 <_printf_i+0x32>
 8006930:	2f00      	cmp	r7, #0
 8006932:	f000 80d4 	beq.w	8006ade <_printf_i+0x1ca>
 8006936:	2f58      	cmp	r7, #88	; 0x58
 8006938:	f000 80c0 	beq.w	8006abc <_printf_i+0x1a8>
 800693c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006944:	e03a      	b.n	80069bc <_printf_i+0xa8>
 8006946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800694a:	2b15      	cmp	r3, #21
 800694c:	d8f6      	bhi.n	800693c <_printf_i+0x28>
 800694e:	a101      	add	r1, pc, #4	; (adr r1, 8006954 <_printf_i+0x40>)
 8006950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006954:	080069ad 	.word	0x080069ad
 8006958:	080069c1 	.word	0x080069c1
 800695c:	0800693d 	.word	0x0800693d
 8006960:	0800693d 	.word	0x0800693d
 8006964:	0800693d 	.word	0x0800693d
 8006968:	0800693d 	.word	0x0800693d
 800696c:	080069c1 	.word	0x080069c1
 8006970:	0800693d 	.word	0x0800693d
 8006974:	0800693d 	.word	0x0800693d
 8006978:	0800693d 	.word	0x0800693d
 800697c:	0800693d 	.word	0x0800693d
 8006980:	08006ac5 	.word	0x08006ac5
 8006984:	080069ed 	.word	0x080069ed
 8006988:	08006a7f 	.word	0x08006a7f
 800698c:	0800693d 	.word	0x0800693d
 8006990:	0800693d 	.word	0x0800693d
 8006994:	08006ae7 	.word	0x08006ae7
 8006998:	0800693d 	.word	0x0800693d
 800699c:	080069ed 	.word	0x080069ed
 80069a0:	0800693d 	.word	0x0800693d
 80069a4:	0800693d 	.word	0x0800693d
 80069a8:	08006a87 	.word	0x08006a87
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	1d1a      	adds	r2, r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	602a      	str	r2, [r5, #0]
 80069b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069bc:	2301      	movs	r3, #1
 80069be:	e09f      	b.n	8006b00 <_printf_i+0x1ec>
 80069c0:	6820      	ldr	r0, [r4, #0]
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	0607      	lsls	r7, r0, #24
 80069c6:	f103 0104 	add.w	r1, r3, #4
 80069ca:	6029      	str	r1, [r5, #0]
 80069cc:	d501      	bpl.n	80069d2 <_printf_i+0xbe>
 80069ce:	681e      	ldr	r6, [r3, #0]
 80069d0:	e003      	b.n	80069da <_printf_i+0xc6>
 80069d2:	0646      	lsls	r6, r0, #25
 80069d4:	d5fb      	bpl.n	80069ce <_printf_i+0xba>
 80069d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069da:	2e00      	cmp	r6, #0
 80069dc:	da03      	bge.n	80069e6 <_printf_i+0xd2>
 80069de:	232d      	movs	r3, #45	; 0x2d
 80069e0:	4276      	negs	r6, r6
 80069e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e6:	485a      	ldr	r0, [pc, #360]	; (8006b50 <_printf_i+0x23c>)
 80069e8:	230a      	movs	r3, #10
 80069ea:	e012      	b.n	8006a12 <_printf_i+0xfe>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	6820      	ldr	r0, [r4, #0]
 80069f0:	1d19      	adds	r1, r3, #4
 80069f2:	6029      	str	r1, [r5, #0]
 80069f4:	0605      	lsls	r5, r0, #24
 80069f6:	d501      	bpl.n	80069fc <_printf_i+0xe8>
 80069f8:	681e      	ldr	r6, [r3, #0]
 80069fa:	e002      	b.n	8006a02 <_printf_i+0xee>
 80069fc:	0641      	lsls	r1, r0, #25
 80069fe:	d5fb      	bpl.n	80069f8 <_printf_i+0xe4>
 8006a00:	881e      	ldrh	r6, [r3, #0]
 8006a02:	4853      	ldr	r0, [pc, #332]	; (8006b50 <_printf_i+0x23c>)
 8006a04:	2f6f      	cmp	r7, #111	; 0x6f
 8006a06:	bf0c      	ite	eq
 8006a08:	2308      	moveq	r3, #8
 8006a0a:	230a      	movne	r3, #10
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a12:	6865      	ldr	r5, [r4, #4]
 8006a14:	60a5      	str	r5, [r4, #8]
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	bfa2      	ittt	ge
 8006a1a:	6821      	ldrge	r1, [r4, #0]
 8006a1c:	f021 0104 	bicge.w	r1, r1, #4
 8006a20:	6021      	strge	r1, [r4, #0]
 8006a22:	b90e      	cbnz	r6, 8006a28 <_printf_i+0x114>
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	d04b      	beq.n	8006ac0 <_printf_i+0x1ac>
 8006a28:	4615      	mov	r5, r2
 8006a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a32:	5dc7      	ldrb	r7, [r0, r7]
 8006a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a38:	4637      	mov	r7, r6
 8006a3a:	42bb      	cmp	r3, r7
 8006a3c:	460e      	mov	r6, r1
 8006a3e:	d9f4      	bls.n	8006a2a <_printf_i+0x116>
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d10b      	bne.n	8006a5c <_printf_i+0x148>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	07de      	lsls	r6, r3, #31
 8006a48:	d508      	bpl.n	8006a5c <_printf_i+0x148>
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	6861      	ldr	r1, [r4, #4]
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	bfde      	ittt	le
 8006a52:	2330      	movle	r3, #48	; 0x30
 8006a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a5c:	1b52      	subs	r2, r2, r5
 8006a5e:	6122      	str	r2, [r4, #16]
 8006a60:	f8cd a000 	str.w	sl, [sp]
 8006a64:	464b      	mov	r3, r9
 8006a66:	aa03      	add	r2, sp, #12
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	f7ff fee4 	bl	8006838 <_printf_common>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d14a      	bne.n	8006b0a <_printf_i+0x1f6>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	b004      	add	sp, #16
 8006a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	f043 0320 	orr.w	r3, r3, #32
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	4833      	ldr	r0, [pc, #204]	; (8006b54 <_printf_i+0x240>)
 8006a88:	2778      	movs	r7, #120	; 0x78
 8006a8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	6829      	ldr	r1, [r5, #0]
 8006a92:	061f      	lsls	r7, r3, #24
 8006a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a98:	d402      	bmi.n	8006aa0 <_printf_i+0x18c>
 8006a9a:	065f      	lsls	r7, r3, #25
 8006a9c:	bf48      	it	mi
 8006a9e:	b2b6      	uxthmi	r6, r6
 8006aa0:	07df      	lsls	r7, r3, #31
 8006aa2:	bf48      	it	mi
 8006aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8006aa8:	6029      	str	r1, [r5, #0]
 8006aaa:	bf48      	it	mi
 8006aac:	6023      	strmi	r3, [r4, #0]
 8006aae:	b91e      	cbnz	r6, 8006ab8 <_printf_i+0x1a4>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	f023 0320 	bic.w	r3, r3, #32
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	2310      	movs	r3, #16
 8006aba:	e7a7      	b.n	8006a0c <_printf_i+0xf8>
 8006abc:	4824      	ldr	r0, [pc, #144]	; (8006b50 <_printf_i+0x23c>)
 8006abe:	e7e4      	b.n	8006a8a <_printf_i+0x176>
 8006ac0:	4615      	mov	r5, r2
 8006ac2:	e7bd      	b.n	8006a40 <_printf_i+0x12c>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	6826      	ldr	r6, [r4, #0]
 8006ac8:	6961      	ldr	r1, [r4, #20]
 8006aca:	1d18      	adds	r0, r3, #4
 8006acc:	6028      	str	r0, [r5, #0]
 8006ace:	0635      	lsls	r5, r6, #24
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_i+0x1c4>
 8006ad4:	6019      	str	r1, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <_printf_i+0x1ca>
 8006ad8:	0670      	lsls	r0, r6, #25
 8006ada:	d5fb      	bpl.n	8006ad4 <_printf_i+0x1c0>
 8006adc:	8019      	strh	r1, [r3, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6123      	str	r3, [r4, #16]
 8006ae2:	4615      	mov	r5, r2
 8006ae4:	e7bc      	b.n	8006a60 <_printf_i+0x14c>
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	602a      	str	r2, [r5, #0]
 8006aec:	681d      	ldr	r5, [r3, #0]
 8006aee:	6862      	ldr	r2, [r4, #4]
 8006af0:	2100      	movs	r1, #0
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7f9 fb8c 	bl	8000210 <memchr>
 8006af8:	b108      	cbz	r0, 8006afe <_printf_i+0x1ea>
 8006afa:	1b40      	subs	r0, r0, r5
 8006afc:	6060      	str	r0, [r4, #4]
 8006afe:	6863      	ldr	r3, [r4, #4]
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	2300      	movs	r3, #0
 8006b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b08:	e7aa      	b.n	8006a60 <_printf_i+0x14c>
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4640      	mov	r0, r8
 8006b12:	47d0      	blx	sl
 8006b14:	3001      	adds	r0, #1
 8006b16:	d0ad      	beq.n	8006a74 <_printf_i+0x160>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	079b      	lsls	r3, r3, #30
 8006b1c:	d413      	bmi.n	8006b46 <_printf_i+0x232>
 8006b1e:	68e0      	ldr	r0, [r4, #12]
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	4298      	cmp	r0, r3
 8006b24:	bfb8      	it	lt
 8006b26:	4618      	movlt	r0, r3
 8006b28:	e7a6      	b.n	8006a78 <_printf_i+0x164>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	47d0      	blx	sl
 8006b34:	3001      	adds	r0, #1
 8006b36:	d09d      	beq.n	8006a74 <_printf_i+0x160>
 8006b38:	3501      	adds	r5, #1
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	9903      	ldr	r1, [sp, #12]
 8006b3e:	1a5b      	subs	r3, r3, r1
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dcf2      	bgt.n	8006b2a <_printf_i+0x216>
 8006b44:	e7eb      	b.n	8006b1e <_printf_i+0x20a>
 8006b46:	2500      	movs	r5, #0
 8006b48:	f104 0619 	add.w	r6, r4, #25
 8006b4c:	e7f5      	b.n	8006b3a <_printf_i+0x226>
 8006b4e:	bf00      	nop
 8006b50:	08007bcb 	.word	0x08007bcb
 8006b54:	08007bdc 	.word	0x08007bdc

08006b58 <__sflush_r>:
 8006b58:	898a      	ldrh	r2, [r1, #12]
 8006b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5e:	4605      	mov	r5, r0
 8006b60:	0710      	lsls	r0, r2, #28
 8006b62:	460c      	mov	r4, r1
 8006b64:	d458      	bmi.n	8006c18 <__sflush_r+0xc0>
 8006b66:	684b      	ldr	r3, [r1, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dc05      	bgt.n	8006b78 <__sflush_r+0x20>
 8006b6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dc02      	bgt.n	8006b78 <__sflush_r+0x20>
 8006b72:	2000      	movs	r0, #0
 8006b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d0f9      	beq.n	8006b72 <__sflush_r+0x1a>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b84:	682f      	ldr	r7, [r5, #0]
 8006b86:	6a21      	ldr	r1, [r4, #32]
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	d032      	beq.n	8006bf2 <__sflush_r+0x9a>
 8006b8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	075a      	lsls	r2, r3, #29
 8006b92:	d505      	bpl.n	8006ba0 <__sflush_r+0x48>
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	1ac0      	subs	r0, r0, r3
 8006b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b9a:	b10b      	cbz	r3, 8006ba0 <__sflush_r+0x48>
 8006b9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b9e:	1ac0      	subs	r0, r0, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ba6:	6a21      	ldr	r1, [r4, #32]
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b0      	blx	r6
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	89a3      	ldrh	r3, [r4, #12]
 8006bb0:	d106      	bne.n	8006bc0 <__sflush_r+0x68>
 8006bb2:	6829      	ldr	r1, [r5, #0]
 8006bb4:	291d      	cmp	r1, #29
 8006bb6:	d82b      	bhi.n	8006c10 <__sflush_r+0xb8>
 8006bb8:	4a29      	ldr	r2, [pc, #164]	; (8006c60 <__sflush_r+0x108>)
 8006bba:	410a      	asrs	r2, r1
 8006bbc:	07d6      	lsls	r6, r2, #31
 8006bbe:	d427      	bmi.n	8006c10 <__sflush_r+0xb8>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	6062      	str	r2, [r4, #4]
 8006bc4:	04d9      	lsls	r1, r3, #19
 8006bc6:	6922      	ldr	r2, [r4, #16]
 8006bc8:	6022      	str	r2, [r4, #0]
 8006bca:	d504      	bpl.n	8006bd6 <__sflush_r+0x7e>
 8006bcc:	1c42      	adds	r2, r0, #1
 8006bce:	d101      	bne.n	8006bd4 <__sflush_r+0x7c>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b903      	cbnz	r3, 8006bd6 <__sflush_r+0x7e>
 8006bd4:	6560      	str	r0, [r4, #84]	; 0x54
 8006bd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bd8:	602f      	str	r7, [r5, #0]
 8006bda:	2900      	cmp	r1, #0
 8006bdc:	d0c9      	beq.n	8006b72 <__sflush_r+0x1a>
 8006bde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006be2:	4299      	cmp	r1, r3
 8006be4:	d002      	beq.n	8006bec <__sflush_r+0x94>
 8006be6:	4628      	mov	r0, r5
 8006be8:	f7ff fbce 	bl	8006388 <_free_r>
 8006bec:	2000      	movs	r0, #0
 8006bee:	6360      	str	r0, [r4, #52]	; 0x34
 8006bf0:	e7c0      	b.n	8006b74 <__sflush_r+0x1c>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b0      	blx	r6
 8006bf8:	1c41      	adds	r1, r0, #1
 8006bfa:	d1c8      	bne.n	8006b8e <__sflush_r+0x36>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0c5      	beq.n	8006b8e <__sflush_r+0x36>
 8006c02:	2b1d      	cmp	r3, #29
 8006c04:	d001      	beq.n	8006c0a <__sflush_r+0xb2>
 8006c06:	2b16      	cmp	r3, #22
 8006c08:	d101      	bne.n	8006c0e <__sflush_r+0xb6>
 8006c0a:	602f      	str	r7, [r5, #0]
 8006c0c:	e7b1      	b.n	8006b72 <__sflush_r+0x1a>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	e7ad      	b.n	8006b74 <__sflush_r+0x1c>
 8006c18:	690f      	ldr	r7, [r1, #16]
 8006c1a:	2f00      	cmp	r7, #0
 8006c1c:	d0a9      	beq.n	8006b72 <__sflush_r+0x1a>
 8006c1e:	0793      	lsls	r3, r2, #30
 8006c20:	680e      	ldr	r6, [r1, #0]
 8006c22:	bf08      	it	eq
 8006c24:	694b      	ldreq	r3, [r1, #20]
 8006c26:	600f      	str	r7, [r1, #0]
 8006c28:	bf18      	it	ne
 8006c2a:	2300      	movne	r3, #0
 8006c2c:	eba6 0807 	sub.w	r8, r6, r7
 8006c30:	608b      	str	r3, [r1, #8]
 8006c32:	f1b8 0f00 	cmp.w	r8, #0
 8006c36:	dd9c      	ble.n	8006b72 <__sflush_r+0x1a>
 8006c38:	6a21      	ldr	r1, [r4, #32]
 8006c3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c3c:	4643      	mov	r3, r8
 8006c3e:	463a      	mov	r2, r7
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b0      	blx	r6
 8006c44:	2800      	cmp	r0, #0
 8006c46:	dc06      	bgt.n	8006c56 <__sflush_r+0xfe>
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	e78e      	b.n	8006b74 <__sflush_r+0x1c>
 8006c56:	4407      	add	r7, r0
 8006c58:	eba8 0800 	sub.w	r8, r8, r0
 8006c5c:	e7e9      	b.n	8006c32 <__sflush_r+0xda>
 8006c5e:	bf00      	nop
 8006c60:	dfbffffe 	.word	0xdfbffffe

08006c64 <_fflush_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	690b      	ldr	r3, [r1, #16]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	b913      	cbnz	r3, 8006c74 <_fflush_r+0x10>
 8006c6e:	2500      	movs	r5, #0
 8006c70:	4628      	mov	r0, r5
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	b118      	cbz	r0, 8006c7e <_fflush_r+0x1a>
 8006c76:	6a03      	ldr	r3, [r0, #32]
 8006c78:	b90b      	cbnz	r3, 8006c7e <_fflush_r+0x1a>
 8006c7a:	f7ff f9af 	bl	8005fdc <__sinit>
 8006c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f3      	beq.n	8006c6e <_fflush_r+0xa>
 8006c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c88:	07d0      	lsls	r0, r2, #31
 8006c8a:	d404      	bmi.n	8006c96 <_fflush_r+0x32>
 8006c8c:	0599      	lsls	r1, r3, #22
 8006c8e:	d402      	bmi.n	8006c96 <_fflush_r+0x32>
 8006c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c92:	f7ff fb58 	bl	8006346 <__retarget_lock_acquire_recursive>
 8006c96:	4628      	mov	r0, r5
 8006c98:	4621      	mov	r1, r4
 8006c9a:	f7ff ff5d 	bl	8006b58 <__sflush_r>
 8006c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca0:	07da      	lsls	r2, r3, #31
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	d4e4      	bmi.n	8006c70 <_fflush_r+0xc>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	059b      	lsls	r3, r3, #22
 8006caa:	d4e1      	bmi.n	8006c70 <_fflush_r+0xc>
 8006cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cae:	f7ff fb4b 	bl	8006348 <__retarget_lock_release_recursive>
 8006cb2:	e7dd      	b.n	8006c70 <_fflush_r+0xc>

08006cb4 <fiprintf>:
 8006cb4:	b40e      	push	{r1, r2, r3}
 8006cb6:	b503      	push	{r0, r1, lr}
 8006cb8:	4601      	mov	r1, r0
 8006cba:	ab03      	add	r3, sp, #12
 8006cbc:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <fiprintf+0x20>)
 8006cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc2:	6800      	ldr	r0, [r0, #0]
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f000 f89f 	bl	8006e08 <_vfiprintf_r>
 8006cca:	b002      	add	sp, #8
 8006ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cd0:	b003      	add	sp, #12
 8006cd2:	4770      	bx	lr
 8006cd4:	20000068 	.word	0x20000068

08006cd8 <memmove>:
 8006cd8:	4288      	cmp	r0, r1
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	eb01 0402 	add.w	r4, r1, r2
 8006ce0:	d902      	bls.n	8006ce8 <memmove+0x10>
 8006ce2:	4284      	cmp	r4, r0
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	d807      	bhi.n	8006cf8 <memmove+0x20>
 8006ce8:	1e43      	subs	r3, r0, #1
 8006cea:	42a1      	cmp	r1, r4
 8006cec:	d008      	beq.n	8006d00 <memmove+0x28>
 8006cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cf6:	e7f8      	b.n	8006cea <memmove+0x12>
 8006cf8:	4402      	add	r2, r0
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	428a      	cmp	r2, r1
 8006cfe:	d100      	bne.n	8006d02 <memmove+0x2a>
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d0a:	e7f7      	b.n	8006cfc <memmove+0x24>

08006d0c <_sbrk_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	; (8006d28 <_sbrk_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fb f88e 	bl	8001e38 <_sbrk>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_sbrk_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_sbrk_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20000a74 	.word	0x20000a74

08006d2c <memcpy>:
 8006d2c:	440a      	add	r2, r1
 8006d2e:	4291      	cmp	r1, r2
 8006d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d34:	d100      	bne.n	8006d38 <memcpy+0xc>
 8006d36:	4770      	bx	lr
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d42:	4291      	cmp	r1, r2
 8006d44:	d1f9      	bne.n	8006d3a <memcpy+0xe>
 8006d46:	bd10      	pop	{r4, pc}

08006d48 <abort>:
 8006d48:	b508      	push	{r3, lr}
 8006d4a:	2006      	movs	r0, #6
 8006d4c:	f000 fa34 	bl	80071b8 <raise>
 8006d50:	2001      	movs	r0, #1
 8006d52:	f7fa fff9 	bl	8001d48 <_exit>

08006d56 <_realloc_r>:
 8006d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	460e      	mov	r6, r1
 8006d60:	b921      	cbnz	r1, 8006d6c <_realloc_r+0x16>
 8006d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	4611      	mov	r1, r2
 8006d68:	f7ff bb82 	b.w	8006470 <_malloc_r>
 8006d6c:	b92a      	cbnz	r2, 8006d7a <_realloc_r+0x24>
 8006d6e:	f7ff fb0b 	bl	8006388 <_free_r>
 8006d72:	4625      	mov	r5, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d7a:	f000 fa39 	bl	80071f0 <_malloc_usable_size_r>
 8006d7e:	4284      	cmp	r4, r0
 8006d80:	4607      	mov	r7, r0
 8006d82:	d802      	bhi.n	8006d8a <_realloc_r+0x34>
 8006d84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d88:	d812      	bhi.n	8006db0 <_realloc_r+0x5a>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	f7ff fb6f 	bl	8006470 <_malloc_r>
 8006d92:	4605      	mov	r5, r0
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d0ed      	beq.n	8006d74 <_realloc_r+0x1e>
 8006d98:	42bc      	cmp	r4, r7
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	bf28      	it	cs
 8006da0:	463a      	movcs	r2, r7
 8006da2:	f7ff ffc3 	bl	8006d2c <memcpy>
 8006da6:	4631      	mov	r1, r6
 8006da8:	4640      	mov	r0, r8
 8006daa:	f7ff faed 	bl	8006388 <_free_r>
 8006dae:	e7e1      	b.n	8006d74 <_realloc_r+0x1e>
 8006db0:	4635      	mov	r5, r6
 8006db2:	e7df      	b.n	8006d74 <_realloc_r+0x1e>

08006db4 <__sfputc_r>:
 8006db4:	6893      	ldr	r3, [r2, #8]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	b410      	push	{r4}
 8006dbc:	6093      	str	r3, [r2, #8]
 8006dbe:	da08      	bge.n	8006dd2 <__sfputc_r+0x1e>
 8006dc0:	6994      	ldr	r4, [r2, #24]
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	db01      	blt.n	8006dca <__sfputc_r+0x16>
 8006dc6:	290a      	cmp	r1, #10
 8006dc8:	d103      	bne.n	8006dd2 <__sfputc_r+0x1e>
 8006dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dce:	f000 b935 	b.w	800703c <__swbuf_r>
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	1c58      	adds	r0, r3, #1
 8006dd6:	6010      	str	r0, [r2, #0]
 8006dd8:	7019      	strb	r1, [r3, #0]
 8006dda:	4608      	mov	r0, r1
 8006ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <__sfputs_r>:
 8006de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de4:	4606      	mov	r6, r0
 8006de6:	460f      	mov	r7, r1
 8006de8:	4614      	mov	r4, r2
 8006dea:	18d5      	adds	r5, r2, r3
 8006dec:	42ac      	cmp	r4, r5
 8006dee:	d101      	bne.n	8006df4 <__sfputs_r+0x12>
 8006df0:	2000      	movs	r0, #0
 8006df2:	e007      	b.n	8006e04 <__sfputs_r+0x22>
 8006df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df8:	463a      	mov	r2, r7
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7ff ffda 	bl	8006db4 <__sfputc_r>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d1f3      	bne.n	8006dec <__sfputs_r+0xa>
 8006e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e08 <_vfiprintf_r>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	b09d      	sub	sp, #116	; 0x74
 8006e10:	4614      	mov	r4, r2
 8006e12:	4698      	mov	r8, r3
 8006e14:	4606      	mov	r6, r0
 8006e16:	b118      	cbz	r0, 8006e20 <_vfiprintf_r+0x18>
 8006e18:	6a03      	ldr	r3, [r0, #32]
 8006e1a:	b90b      	cbnz	r3, 8006e20 <_vfiprintf_r+0x18>
 8006e1c:	f7ff f8de 	bl	8005fdc <__sinit>
 8006e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d405      	bmi.n	8006e32 <_vfiprintf_r+0x2a>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	059a      	lsls	r2, r3, #22
 8006e2a:	d402      	bmi.n	8006e32 <_vfiprintf_r+0x2a>
 8006e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e2e:	f7ff fa8a 	bl	8006346 <__retarget_lock_acquire_recursive>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	071b      	lsls	r3, r3, #28
 8006e36:	d501      	bpl.n	8006e3c <_vfiprintf_r+0x34>
 8006e38:	692b      	ldr	r3, [r5, #16]
 8006e3a:	b99b      	cbnz	r3, 8006e64 <_vfiprintf_r+0x5c>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f000 f93a 	bl	80070b8 <__swsetup_r>
 8006e44:	b170      	cbz	r0, 8006e64 <_vfiprintf_r+0x5c>
 8006e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e48:	07dc      	lsls	r4, r3, #31
 8006e4a:	d504      	bpl.n	8006e56 <_vfiprintf_r+0x4e>
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	b01d      	add	sp, #116	; 0x74
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	89ab      	ldrh	r3, [r5, #12]
 8006e58:	0598      	lsls	r0, r3, #22
 8006e5a:	d4f7      	bmi.n	8006e4c <_vfiprintf_r+0x44>
 8006e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e5e:	f7ff fa73 	bl	8006348 <__retarget_lock_release_recursive>
 8006e62:	e7f3      	b.n	8006e4c <_vfiprintf_r+0x44>
 8006e64:	2300      	movs	r3, #0
 8006e66:	9309      	str	r3, [sp, #36]	; 0x24
 8006e68:	2320      	movs	r3, #32
 8006e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e72:	2330      	movs	r3, #48	; 0x30
 8006e74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007028 <_vfiprintf_r+0x220>
 8006e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e7c:	f04f 0901 	mov.w	r9, #1
 8006e80:	4623      	mov	r3, r4
 8006e82:	469a      	mov	sl, r3
 8006e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e88:	b10a      	cbz	r2, 8006e8e <_vfiprintf_r+0x86>
 8006e8a:	2a25      	cmp	r2, #37	; 0x25
 8006e8c:	d1f9      	bne.n	8006e82 <_vfiprintf_r+0x7a>
 8006e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006e92:	d00b      	beq.n	8006eac <_vfiprintf_r+0xa4>
 8006e94:	465b      	mov	r3, fp
 8006e96:	4622      	mov	r2, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ffa1 	bl	8006de2 <__sfputs_r>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f000 80a9 	beq.w	8006ff8 <_vfiprintf_r+0x1f0>
 8006ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ea8:	445a      	add	r2, fp
 8006eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8006eac:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80a1 	beq.w	8006ff8 <_vfiprintf_r+0x1f0>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec0:	f10a 0a01 	add.w	sl, sl, #1
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ece:	4654      	mov	r4, sl
 8006ed0:	2205      	movs	r2, #5
 8006ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed6:	4854      	ldr	r0, [pc, #336]	; (8007028 <_vfiprintf_r+0x220>)
 8006ed8:	f7f9 f99a 	bl	8000210 <memchr>
 8006edc:	9a04      	ldr	r2, [sp, #16]
 8006ede:	b9d8      	cbnz	r0, 8006f18 <_vfiprintf_r+0x110>
 8006ee0:	06d1      	lsls	r1, r2, #27
 8006ee2:	bf44      	itt	mi
 8006ee4:	2320      	movmi	r3, #32
 8006ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eea:	0713      	lsls	r3, r2, #28
 8006eec:	bf44      	itt	mi
 8006eee:	232b      	movmi	r3, #43	; 0x2b
 8006ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8006efa:	d015      	beq.n	8006f28 <_vfiprintf_r+0x120>
 8006efc:	9a07      	ldr	r2, [sp, #28]
 8006efe:	4654      	mov	r4, sl
 8006f00:	2000      	movs	r0, #0
 8006f02:	f04f 0c0a 	mov.w	ip, #10
 8006f06:	4621      	mov	r1, r4
 8006f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f0c:	3b30      	subs	r3, #48	; 0x30
 8006f0e:	2b09      	cmp	r3, #9
 8006f10:	d94d      	bls.n	8006fae <_vfiprintf_r+0x1a6>
 8006f12:	b1b0      	cbz	r0, 8006f42 <_vfiprintf_r+0x13a>
 8006f14:	9207      	str	r2, [sp, #28]
 8006f16:	e014      	b.n	8006f42 <_vfiprintf_r+0x13a>
 8006f18:	eba0 0308 	sub.w	r3, r0, r8
 8006f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f20:	4313      	orrs	r3, r2
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	46a2      	mov	sl, r4
 8006f26:	e7d2      	b.n	8006ece <_vfiprintf_r+0xc6>
 8006f28:	9b03      	ldr	r3, [sp, #12]
 8006f2a:	1d19      	adds	r1, r3, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	9103      	str	r1, [sp, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfbb      	ittet	lt
 8006f34:	425b      	neglt	r3, r3
 8006f36:	f042 0202 	orrlt.w	r2, r2, #2
 8006f3a:	9307      	strge	r3, [sp, #28]
 8006f3c:	9307      	strlt	r3, [sp, #28]
 8006f3e:	bfb8      	it	lt
 8006f40:	9204      	strlt	r2, [sp, #16]
 8006f42:	7823      	ldrb	r3, [r4, #0]
 8006f44:	2b2e      	cmp	r3, #46	; 0x2e
 8006f46:	d10c      	bne.n	8006f62 <_vfiprintf_r+0x15a>
 8006f48:	7863      	ldrb	r3, [r4, #1]
 8006f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4c:	d134      	bne.n	8006fb8 <_vfiprintf_r+0x1b0>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	1d1a      	adds	r2, r3, #4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	9203      	str	r2, [sp, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	bfb8      	it	lt
 8006f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f5e:	3402      	adds	r4, #2
 8006f60:	9305      	str	r3, [sp, #20]
 8006f62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007038 <_vfiprintf_r+0x230>
 8006f66:	7821      	ldrb	r1, [r4, #0]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	f7f9 f950 	bl	8000210 <memchr>
 8006f70:	b138      	cbz	r0, 8006f82 <_vfiprintf_r+0x17a>
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	eba0 000a 	sub.w	r0, r0, sl
 8006f78:	2240      	movs	r2, #64	; 0x40
 8006f7a:	4082      	lsls	r2, r0
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	3401      	adds	r4, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f86:	4829      	ldr	r0, [pc, #164]	; (800702c <_vfiprintf_r+0x224>)
 8006f88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f8c:	2206      	movs	r2, #6
 8006f8e:	f7f9 f93f 	bl	8000210 <memchr>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d03f      	beq.n	8007016 <_vfiprintf_r+0x20e>
 8006f96:	4b26      	ldr	r3, [pc, #152]	; (8007030 <_vfiprintf_r+0x228>)
 8006f98:	bb1b      	cbnz	r3, 8006fe2 <_vfiprintf_r+0x1da>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	3307      	adds	r3, #7
 8006f9e:	f023 0307 	bic.w	r3, r3, #7
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa8:	443b      	add	r3, r7
 8006faa:	9309      	str	r3, [sp, #36]	; 0x24
 8006fac:	e768      	b.n	8006e80 <_vfiprintf_r+0x78>
 8006fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	e7a6      	b.n	8006f06 <_vfiprintf_r+0xfe>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	3401      	adds	r4, #1
 8006fbc:	9305      	str	r3, [sp, #20]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f04f 0c0a 	mov.w	ip, #10
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fca:	3a30      	subs	r2, #48	; 0x30
 8006fcc:	2a09      	cmp	r2, #9
 8006fce:	d903      	bls.n	8006fd8 <_vfiprintf_r+0x1d0>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0c6      	beq.n	8006f62 <_vfiprintf_r+0x15a>
 8006fd4:	9105      	str	r1, [sp, #20]
 8006fd6:	e7c4      	b.n	8006f62 <_vfiprintf_r+0x15a>
 8006fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e7f0      	b.n	8006fc4 <_vfiprintf_r+0x1bc>
 8006fe2:	ab03      	add	r3, sp, #12
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	4b12      	ldr	r3, [pc, #72]	; (8007034 <_vfiprintf_r+0x22c>)
 8006fea:	a904      	add	r1, sp, #16
 8006fec:	4630      	mov	r0, r6
 8006fee:	f3af 8000 	nop.w
 8006ff2:	4607      	mov	r7, r0
 8006ff4:	1c78      	adds	r0, r7, #1
 8006ff6:	d1d6      	bne.n	8006fa6 <_vfiprintf_r+0x19e>
 8006ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ffa:	07d9      	lsls	r1, r3, #31
 8006ffc:	d405      	bmi.n	800700a <_vfiprintf_r+0x202>
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	059a      	lsls	r2, r3, #22
 8007002:	d402      	bmi.n	800700a <_vfiprintf_r+0x202>
 8007004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007006:	f7ff f99f 	bl	8006348 <__retarget_lock_release_recursive>
 800700a:	89ab      	ldrh	r3, [r5, #12]
 800700c:	065b      	lsls	r3, r3, #25
 800700e:	f53f af1d 	bmi.w	8006e4c <_vfiprintf_r+0x44>
 8007012:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007014:	e71c      	b.n	8006e50 <_vfiprintf_r+0x48>
 8007016:	ab03      	add	r3, sp, #12
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	462a      	mov	r2, r5
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <_vfiprintf_r+0x22c>)
 800701e:	a904      	add	r1, sp, #16
 8007020:	4630      	mov	r0, r6
 8007022:	f7ff fc77 	bl	8006914 <_printf_i>
 8007026:	e7e4      	b.n	8006ff2 <_vfiprintf_r+0x1ea>
 8007028:	08007bba 	.word	0x08007bba
 800702c:	08007bc4 	.word	0x08007bc4
 8007030:	00000000 	.word	0x00000000
 8007034:	08006de3 	.word	0x08006de3
 8007038:	08007bc0 	.word	0x08007bc0

0800703c <__swbuf_r>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	460e      	mov	r6, r1
 8007040:	4614      	mov	r4, r2
 8007042:	4605      	mov	r5, r0
 8007044:	b118      	cbz	r0, 800704e <__swbuf_r+0x12>
 8007046:	6a03      	ldr	r3, [r0, #32]
 8007048:	b90b      	cbnz	r3, 800704e <__swbuf_r+0x12>
 800704a:	f7fe ffc7 	bl	8005fdc <__sinit>
 800704e:	69a3      	ldr	r3, [r4, #24]
 8007050:	60a3      	str	r3, [r4, #8]
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	071a      	lsls	r2, r3, #28
 8007056:	d525      	bpl.n	80070a4 <__swbuf_r+0x68>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	b31b      	cbz	r3, 80070a4 <__swbuf_r+0x68>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	6922      	ldr	r2, [r4, #16]
 8007060:	1a98      	subs	r0, r3, r2
 8007062:	6963      	ldr	r3, [r4, #20]
 8007064:	b2f6      	uxtb	r6, r6
 8007066:	4283      	cmp	r3, r0
 8007068:	4637      	mov	r7, r6
 800706a:	dc04      	bgt.n	8007076 <__swbuf_r+0x3a>
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f7ff fdf8 	bl	8006c64 <_fflush_r>
 8007074:	b9e0      	cbnz	r0, 80070b0 <__swbuf_r+0x74>
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	3b01      	subs	r3, #1
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	6022      	str	r2, [r4, #0]
 8007082:	701e      	strb	r6, [r3, #0]
 8007084:	6962      	ldr	r2, [r4, #20]
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	429a      	cmp	r2, r3
 800708a:	d004      	beq.n	8007096 <__swbuf_r+0x5a>
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	07db      	lsls	r3, r3, #31
 8007090:	d506      	bpl.n	80070a0 <__swbuf_r+0x64>
 8007092:	2e0a      	cmp	r6, #10
 8007094:	d104      	bne.n	80070a0 <__swbuf_r+0x64>
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff fde3 	bl	8006c64 <_fflush_r>
 800709e:	b938      	cbnz	r0, 80070b0 <__swbuf_r+0x74>
 80070a0:	4638      	mov	r0, r7
 80070a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a4:	4621      	mov	r1, r4
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f806 	bl	80070b8 <__swsetup_r>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d0d5      	beq.n	800705c <__swbuf_r+0x20>
 80070b0:	f04f 37ff 	mov.w	r7, #4294967295
 80070b4:	e7f4      	b.n	80070a0 <__swbuf_r+0x64>
	...

080070b8 <__swsetup_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4b2a      	ldr	r3, [pc, #168]	; (8007164 <__swsetup_r+0xac>)
 80070bc:	4605      	mov	r5, r0
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	460c      	mov	r4, r1
 80070c2:	b118      	cbz	r0, 80070cc <__swsetup_r+0x14>
 80070c4:	6a03      	ldr	r3, [r0, #32]
 80070c6:	b90b      	cbnz	r3, 80070cc <__swsetup_r+0x14>
 80070c8:	f7fe ff88 	bl	8005fdc <__sinit>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070d2:	0718      	lsls	r0, r3, #28
 80070d4:	d422      	bmi.n	800711c <__swsetup_r+0x64>
 80070d6:	06d9      	lsls	r1, r3, #27
 80070d8:	d407      	bmi.n	80070ea <__swsetup_r+0x32>
 80070da:	2309      	movs	r3, #9
 80070dc:	602b      	str	r3, [r5, #0]
 80070de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070e2:	81a3      	strh	r3, [r4, #12]
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	e034      	b.n	8007154 <__swsetup_r+0x9c>
 80070ea:	0758      	lsls	r0, r3, #29
 80070ec:	d512      	bpl.n	8007114 <__swsetup_r+0x5c>
 80070ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070f0:	b141      	cbz	r1, 8007104 <__swsetup_r+0x4c>
 80070f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070f6:	4299      	cmp	r1, r3
 80070f8:	d002      	beq.n	8007100 <__swsetup_r+0x48>
 80070fa:	4628      	mov	r0, r5
 80070fc:	f7ff f944 	bl	8006388 <_free_r>
 8007100:	2300      	movs	r3, #0
 8007102:	6363      	str	r3, [r4, #52]	; 0x34
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	2300      	movs	r3, #0
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	6023      	str	r3, [r4, #0]
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	f043 0308 	orr.w	r3, r3, #8
 800711a:	81a3      	strh	r3, [r4, #12]
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	b94b      	cbnz	r3, 8007134 <__swsetup_r+0x7c>
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712a:	d003      	beq.n	8007134 <__swsetup_r+0x7c>
 800712c:	4621      	mov	r1, r4
 800712e:	4628      	mov	r0, r5
 8007130:	f000 f88c 	bl	800724c <__smakebuf_r>
 8007134:	89a0      	ldrh	r0, [r4, #12]
 8007136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800713a:	f010 0301 	ands.w	r3, r0, #1
 800713e:	d00a      	beq.n	8007156 <__swsetup_r+0x9e>
 8007140:	2300      	movs	r3, #0
 8007142:	60a3      	str	r3, [r4, #8]
 8007144:	6963      	ldr	r3, [r4, #20]
 8007146:	425b      	negs	r3, r3
 8007148:	61a3      	str	r3, [r4, #24]
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	b943      	cbnz	r3, 8007160 <__swsetup_r+0xa8>
 800714e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007152:	d1c4      	bne.n	80070de <__swsetup_r+0x26>
 8007154:	bd38      	pop	{r3, r4, r5, pc}
 8007156:	0781      	lsls	r1, r0, #30
 8007158:	bf58      	it	pl
 800715a:	6963      	ldrpl	r3, [r4, #20]
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	e7f4      	b.n	800714a <__swsetup_r+0x92>
 8007160:	2000      	movs	r0, #0
 8007162:	e7f7      	b.n	8007154 <__swsetup_r+0x9c>
 8007164:	20000068 	.word	0x20000068

08007168 <_raise_r>:
 8007168:	291f      	cmp	r1, #31
 800716a:	b538      	push	{r3, r4, r5, lr}
 800716c:	4604      	mov	r4, r0
 800716e:	460d      	mov	r5, r1
 8007170:	d904      	bls.n	800717c <_raise_r+0x14>
 8007172:	2316      	movs	r3, #22
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800717e:	b112      	cbz	r2, 8007186 <_raise_r+0x1e>
 8007180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007184:	b94b      	cbnz	r3, 800719a <_raise_r+0x32>
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f830 	bl	80071ec <_getpid_r>
 800718c:	462a      	mov	r2, r5
 800718e:	4601      	mov	r1, r0
 8007190:	4620      	mov	r0, r4
 8007192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007196:	f000 b817 	b.w	80071c8 <_kill_r>
 800719a:	2b01      	cmp	r3, #1
 800719c:	d00a      	beq.n	80071b4 <_raise_r+0x4c>
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	d103      	bne.n	80071aa <_raise_r+0x42>
 80071a2:	2316      	movs	r3, #22
 80071a4:	6003      	str	r3, [r0, #0]
 80071a6:	2001      	movs	r0, #1
 80071a8:	e7e7      	b.n	800717a <_raise_r+0x12>
 80071aa:	2400      	movs	r4, #0
 80071ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80071b0:	4628      	mov	r0, r5
 80071b2:	4798      	blx	r3
 80071b4:	2000      	movs	r0, #0
 80071b6:	e7e0      	b.n	800717a <_raise_r+0x12>

080071b8 <raise>:
 80071b8:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <raise+0xc>)
 80071ba:	4601      	mov	r1, r0
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f7ff bfd3 	b.w	8007168 <_raise_r>
 80071c2:	bf00      	nop
 80071c4:	20000068 	.word	0x20000068

080071c8 <_kill_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4d07      	ldr	r5, [pc, #28]	; (80071e8 <_kill_r+0x20>)
 80071cc:	2300      	movs	r3, #0
 80071ce:	4604      	mov	r4, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	f7fa fda7 	bl	8001d28 <_kill>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d102      	bne.n	80071e4 <_kill_r+0x1c>
 80071de:	682b      	ldr	r3, [r5, #0]
 80071e0:	b103      	cbz	r3, 80071e4 <_kill_r+0x1c>
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	bf00      	nop
 80071e8:	20000a74 	.word	0x20000a74

080071ec <_getpid_r>:
 80071ec:	f7fa bd94 	b.w	8001d18 <_getpid>

080071f0 <_malloc_usable_size_r>:
 80071f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f4:	1f18      	subs	r0, r3, #4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bfbc      	itt	lt
 80071fa:	580b      	ldrlt	r3, [r1, r0]
 80071fc:	18c0      	addlt	r0, r0, r3
 80071fe:	4770      	bx	lr

08007200 <__swhatbuf_r>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	460c      	mov	r4, r1
 8007204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007208:	2900      	cmp	r1, #0
 800720a:	b096      	sub	sp, #88	; 0x58
 800720c:	4615      	mov	r5, r2
 800720e:	461e      	mov	r6, r3
 8007210:	da0d      	bge.n	800722e <__swhatbuf_r+0x2e>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007218:	f04f 0100 	mov.w	r1, #0
 800721c:	bf0c      	ite	eq
 800721e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007222:	2340      	movne	r3, #64	; 0x40
 8007224:	2000      	movs	r0, #0
 8007226:	6031      	str	r1, [r6, #0]
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	b016      	add	sp, #88	; 0x58
 800722c:	bd70      	pop	{r4, r5, r6, pc}
 800722e:	466a      	mov	r2, sp
 8007230:	f000 f848 	bl	80072c4 <_fstat_r>
 8007234:	2800      	cmp	r0, #0
 8007236:	dbec      	blt.n	8007212 <__swhatbuf_r+0x12>
 8007238:	9901      	ldr	r1, [sp, #4]
 800723a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800723e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007242:	4259      	negs	r1, r3
 8007244:	4159      	adcs	r1, r3
 8007246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800724a:	e7eb      	b.n	8007224 <__swhatbuf_r+0x24>

0800724c <__smakebuf_r>:
 800724c:	898b      	ldrh	r3, [r1, #12]
 800724e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007250:	079d      	lsls	r5, r3, #30
 8007252:	4606      	mov	r6, r0
 8007254:	460c      	mov	r4, r1
 8007256:	d507      	bpl.n	8007268 <__smakebuf_r+0x1c>
 8007258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	6123      	str	r3, [r4, #16]
 8007260:	2301      	movs	r3, #1
 8007262:	6163      	str	r3, [r4, #20]
 8007264:	b002      	add	sp, #8
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	ab01      	add	r3, sp, #4
 800726a:	466a      	mov	r2, sp
 800726c:	f7ff ffc8 	bl	8007200 <__swhatbuf_r>
 8007270:	9900      	ldr	r1, [sp, #0]
 8007272:	4605      	mov	r5, r0
 8007274:	4630      	mov	r0, r6
 8007276:	f7ff f8fb 	bl	8006470 <_malloc_r>
 800727a:	b948      	cbnz	r0, 8007290 <__smakebuf_r+0x44>
 800727c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007280:	059a      	lsls	r2, r3, #22
 8007282:	d4ef      	bmi.n	8007264 <__smakebuf_r+0x18>
 8007284:	f023 0303 	bic.w	r3, r3, #3
 8007288:	f043 0302 	orr.w	r3, r3, #2
 800728c:	81a3      	strh	r3, [r4, #12]
 800728e:	e7e3      	b.n	8007258 <__smakebuf_r+0xc>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	6020      	str	r0, [r4, #0]
 8007294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	9b00      	ldr	r3, [sp, #0]
 800729c:	6163      	str	r3, [r4, #20]
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	6120      	str	r0, [r4, #16]
 80072a2:	b15b      	cbz	r3, 80072bc <__smakebuf_r+0x70>
 80072a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a8:	4630      	mov	r0, r6
 80072aa:	f000 f81d 	bl	80072e8 <_isatty_r>
 80072ae:	b128      	cbz	r0, 80072bc <__smakebuf_r+0x70>
 80072b0:	89a3      	ldrh	r3, [r4, #12]
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	431d      	orrs	r5, r3
 80072c0:	81a5      	strh	r5, [r4, #12]
 80072c2:	e7cf      	b.n	8007264 <__smakebuf_r+0x18>

080072c4 <_fstat_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d07      	ldr	r5, [pc, #28]	; (80072e4 <_fstat_r+0x20>)
 80072c8:	2300      	movs	r3, #0
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	f7fa fd88 	bl	8001de6 <_fstat>
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	d102      	bne.n	80072e0 <_fstat_r+0x1c>
 80072da:	682b      	ldr	r3, [r5, #0]
 80072dc:	b103      	cbz	r3, 80072e0 <_fstat_r+0x1c>
 80072de:	6023      	str	r3, [r4, #0]
 80072e0:	bd38      	pop	{r3, r4, r5, pc}
 80072e2:	bf00      	nop
 80072e4:	20000a74 	.word	0x20000a74

080072e8 <_isatty_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d06      	ldr	r5, [pc, #24]	; (8007304 <_isatty_r+0x1c>)
 80072ec:	2300      	movs	r3, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	f7fa fd87 	bl	8001e06 <_isatty>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_isatty_r+0x1a>
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_isatty_r+0x1a>
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	20000a74 	.word	0x20000a74

08007308 <log10>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	ed2d 8b02 	vpush	{d8}
 800730e:	ec55 4b10 	vmov	r4, r5, d0
 8007312:	f000 f841 	bl	8007398 <__ieee754_log10>
 8007316:	4622      	mov	r2, r4
 8007318:	462b      	mov	r3, r5
 800731a:	4620      	mov	r0, r4
 800731c:	4629      	mov	r1, r5
 800731e:	eeb0 8a40 	vmov.f32	s16, s0
 8007322:	eef0 8a60 	vmov.f32	s17, s1
 8007326:	f7f9 fc19 	bl	8000b5c <__aeabi_dcmpun>
 800732a:	b998      	cbnz	r0, 8007354 <log10+0x4c>
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	4620      	mov	r0, r4
 8007332:	4629      	mov	r1, r5
 8007334:	f7f9 fbf4 	bl	8000b20 <__aeabi_dcmple>
 8007338:	b160      	cbz	r0, 8007354 <log10+0x4c>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 fbd9 	bl	8000af8 <__aeabi_dcmpeq>
 8007346:	b160      	cbz	r0, 8007362 <log10+0x5a>
 8007348:	f7fe ffd2 	bl	80062f0 <__errno>
 800734c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007378 <log10+0x70>
 8007350:	2322      	movs	r3, #34	; 0x22
 8007352:	6003      	str	r3, [r0, #0]
 8007354:	eeb0 0a48 	vmov.f32	s0, s16
 8007358:	eef0 0a68 	vmov.f32	s1, s17
 800735c:	ecbd 8b02 	vpop	{d8}
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	f7fe ffc5 	bl	80062f0 <__errno>
 8007366:	ecbd 8b02 	vpop	{d8}
 800736a:	2321      	movs	r3, #33	; 0x21
 800736c:	6003      	str	r3, [r0, #0]
 800736e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007372:	4803      	ldr	r0, [pc, #12]	; (8007380 <log10+0x78>)
 8007374:	f000 b808 	b.w	8007388 <nan>
 8007378:	00000000 	.word	0x00000000
 800737c:	fff00000 	.word	0xfff00000
 8007380:	08007bb9 	.word	0x08007bb9
 8007384:	00000000 	.word	0x00000000

08007388 <nan>:
 8007388:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007390 <nan+0x8>
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	00000000 	.word	0x00000000
 8007394:	7ff80000 	.word	0x7ff80000

08007398 <__ieee754_log10>:
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	ec55 4b10 	vmov	r4, r5, d0
 80073a0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80073a4:	462b      	mov	r3, r5
 80073a6:	da2f      	bge.n	8007408 <__ieee754_log10+0x70>
 80073a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80073ac:	4322      	orrs	r2, r4
 80073ae:	d109      	bne.n	80073c4 <__ieee754_log10+0x2c>
 80073b0:	493b      	ldr	r1, [pc, #236]	; (80074a0 <__ieee754_log10+0x108>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	2000      	movs	r0, #0
 80073b8:	f7f9 fa60 	bl	800087c <__aeabi_ddiv>
 80073bc:	ec41 0b10 	vmov	d0, r0, r1
 80073c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c4:	2d00      	cmp	r5, #0
 80073c6:	da09      	bge.n	80073dc <__ieee754_log10+0x44>
 80073c8:	ee10 2a10 	vmov	r2, s0
 80073cc:	ee10 0a10 	vmov	r0, s0
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7f8 ff71 	bl	80002b8 <__aeabi_dsub>
 80073d6:	2200      	movs	r2, #0
 80073d8:	2300      	movs	r3, #0
 80073da:	e7ed      	b.n	80073b8 <__ieee754_log10+0x20>
 80073dc:	4b31      	ldr	r3, [pc, #196]	; (80074a4 <__ieee754_log10+0x10c>)
 80073de:	2200      	movs	r2, #0
 80073e0:	4629      	mov	r1, r5
 80073e2:	ee10 0a10 	vmov	r0, s0
 80073e6:	f7f9 f91f 	bl	8000628 <__aeabi_dmul>
 80073ea:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80073ee:	4604      	mov	r4, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	460b      	mov	r3, r1
 80073f4:	492c      	ldr	r1, [pc, #176]	; (80074a8 <__ieee754_log10+0x110>)
 80073f6:	428b      	cmp	r3, r1
 80073f8:	dd08      	ble.n	800740c <__ieee754_log10+0x74>
 80073fa:	4622      	mov	r2, r4
 80073fc:	462b      	mov	r3, r5
 80073fe:	4620      	mov	r0, r4
 8007400:	4629      	mov	r1, r5
 8007402:	f7f8 ff5b 	bl	80002bc <__adddf3>
 8007406:	e7d9      	b.n	80073bc <__ieee754_log10+0x24>
 8007408:	2200      	movs	r2, #0
 800740a:	e7f3      	b.n	80073f4 <__ieee754_log10+0x5c>
 800740c:	1518      	asrs	r0, r3, #20
 800740e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8007412:	4410      	add	r0, r2
 8007414:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8007418:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800741c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8007420:	f7f9 f898 	bl	8000554 <__aeabi_i2d>
 8007424:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8007428:	3303      	adds	r3, #3
 800742a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800742e:	ec45 4b10 	vmov	d0, r4, r5
 8007432:	4606      	mov	r6, r0
 8007434:	460f      	mov	r7, r1
 8007436:	f000 f83b 	bl	80074b0 <__ieee754_log>
 800743a:	a313      	add	r3, pc, #76	; (adr r3, 8007488 <__ieee754_log10+0xf0>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	ec59 8b10 	vmov	r8, r9, d0
 8007448:	f7f9 f8ee 	bl	8000628 <__aeabi_dmul>
 800744c:	a310      	add	r3, pc, #64	; (adr r3, 8007490 <__ieee754_log10+0xf8>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	4604      	mov	r4, r0
 8007454:	460d      	mov	r5, r1
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f9 f8e5 	bl	8000628 <__aeabi_dmul>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f8 ff29 	bl	80002bc <__adddf3>
 800746a:	a30b      	add	r3, pc, #44	; (adr r3, 8007498 <__ieee754_log10+0x100>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	4604      	mov	r4, r0
 8007472:	460d      	mov	r5, r1
 8007474:	4630      	mov	r0, r6
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 f8d6 	bl	8000628 <__aeabi_dmul>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4620      	mov	r0, r4
 8007482:	4629      	mov	r1, r5
 8007484:	e7bd      	b.n	8007402 <__ieee754_log10+0x6a>
 8007486:	bf00      	nop
 8007488:	11f12b36 	.word	0x11f12b36
 800748c:	3d59fef3 	.word	0x3d59fef3
 8007490:	1526e50e 	.word	0x1526e50e
 8007494:	3fdbcb7b 	.word	0x3fdbcb7b
 8007498:	509f6000 	.word	0x509f6000
 800749c:	3fd34413 	.word	0x3fd34413
 80074a0:	c3500000 	.word	0xc3500000
 80074a4:	43500000 	.word	0x43500000
 80074a8:	7fefffff 	.word	0x7fefffff
 80074ac:	00000000 	.word	0x00000000

080074b0 <__ieee754_log>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	ec51 0b10 	vmov	r0, r1, d0
 80074b8:	ed2d 8b04 	vpush	{d8-d9}
 80074bc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80074c0:	b083      	sub	sp, #12
 80074c2:	460d      	mov	r5, r1
 80074c4:	da29      	bge.n	800751a <__ieee754_log+0x6a>
 80074c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074ca:	4303      	orrs	r3, r0
 80074cc:	ee10 2a10 	vmov	r2, s0
 80074d0:	d10c      	bne.n	80074ec <__ieee754_log+0x3c>
 80074d2:	49cf      	ldr	r1, [pc, #828]	; (8007810 <__ieee754_log+0x360>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	2300      	movs	r3, #0
 80074d8:	2000      	movs	r0, #0
 80074da:	f7f9 f9cf 	bl	800087c <__aeabi_ddiv>
 80074de:	ec41 0b10 	vmov	d0, r0, r1
 80074e2:	b003      	add	sp, #12
 80074e4:	ecbd 8b04 	vpop	{d8-d9}
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ec:	2900      	cmp	r1, #0
 80074ee:	da05      	bge.n	80074fc <__ieee754_log+0x4c>
 80074f0:	460b      	mov	r3, r1
 80074f2:	f7f8 fee1 	bl	80002b8 <__aeabi_dsub>
 80074f6:	2200      	movs	r2, #0
 80074f8:	2300      	movs	r3, #0
 80074fa:	e7ee      	b.n	80074da <__ieee754_log+0x2a>
 80074fc:	4bc5      	ldr	r3, [pc, #788]	; (8007814 <__ieee754_log+0x364>)
 80074fe:	2200      	movs	r2, #0
 8007500:	f7f9 f892 	bl	8000628 <__aeabi_dmul>
 8007504:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007508:	460d      	mov	r5, r1
 800750a:	4ac3      	ldr	r2, [pc, #780]	; (8007818 <__ieee754_log+0x368>)
 800750c:	4295      	cmp	r5, r2
 800750e:	dd06      	ble.n	800751e <__ieee754_log+0x6e>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	f7f8 fed2 	bl	80002bc <__adddf3>
 8007518:	e7e1      	b.n	80074de <__ieee754_log+0x2e>
 800751a:	2300      	movs	r3, #0
 800751c:	e7f5      	b.n	800750a <__ieee754_log+0x5a>
 800751e:	152c      	asrs	r4, r5, #20
 8007520:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007524:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007528:	441c      	add	r4, r3
 800752a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800752e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007536:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800753a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800753e:	ea42 0105 	orr.w	r1, r2, r5
 8007542:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007546:	2200      	movs	r2, #0
 8007548:	4bb4      	ldr	r3, [pc, #720]	; (800781c <__ieee754_log+0x36c>)
 800754a:	f7f8 feb5 	bl	80002b8 <__aeabi_dsub>
 800754e:	1cab      	adds	r3, r5, #2
 8007550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007554:	2b02      	cmp	r3, #2
 8007556:	4682      	mov	sl, r0
 8007558:	468b      	mov	fp, r1
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	dc53      	bgt.n	8007608 <__ieee754_log+0x158>
 8007560:	2300      	movs	r3, #0
 8007562:	f7f9 fac9 	bl	8000af8 <__aeabi_dcmpeq>
 8007566:	b1d0      	cbz	r0, 800759e <__ieee754_log+0xee>
 8007568:	2c00      	cmp	r4, #0
 800756a:	f000 8122 	beq.w	80077b2 <__ieee754_log+0x302>
 800756e:	4620      	mov	r0, r4
 8007570:	f7f8 fff0 	bl	8000554 <__aeabi_i2d>
 8007574:	a390      	add	r3, pc, #576	; (adr r3, 80077b8 <__ieee754_log+0x308>)
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	4606      	mov	r6, r0
 800757c:	460f      	mov	r7, r1
 800757e:	f7f9 f853 	bl	8000628 <__aeabi_dmul>
 8007582:	a38f      	add	r3, pc, #572	; (adr r3, 80077c0 <__ieee754_log+0x310>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	4604      	mov	r4, r0
 800758a:	460d      	mov	r5, r1
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f9 f84a 	bl	8000628 <__aeabi_dmul>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4620      	mov	r0, r4
 800759a:	4629      	mov	r1, r5
 800759c:	e7ba      	b.n	8007514 <__ieee754_log+0x64>
 800759e:	a38a      	add	r3, pc, #552	; (adr r3, 80077c8 <__ieee754_log+0x318>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	4650      	mov	r0, sl
 80075a6:	4659      	mov	r1, fp
 80075a8:	f7f9 f83e 	bl	8000628 <__aeabi_dmul>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	2000      	movs	r0, #0
 80075b2:	499b      	ldr	r1, [pc, #620]	; (8007820 <__ieee754_log+0x370>)
 80075b4:	f7f8 fe80 	bl	80002b8 <__aeabi_dsub>
 80075b8:	4652      	mov	r2, sl
 80075ba:	4606      	mov	r6, r0
 80075bc:	460f      	mov	r7, r1
 80075be:	465b      	mov	r3, fp
 80075c0:	4650      	mov	r0, sl
 80075c2:	4659      	mov	r1, fp
 80075c4:	f7f9 f830 	bl	8000628 <__aeabi_dmul>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4630      	mov	r0, r6
 80075ce:	4639      	mov	r1, r7
 80075d0:	f7f9 f82a 	bl	8000628 <__aeabi_dmul>
 80075d4:	4606      	mov	r6, r0
 80075d6:	460f      	mov	r7, r1
 80075d8:	b914      	cbnz	r4, 80075e0 <__ieee754_log+0x130>
 80075da:	4632      	mov	r2, r6
 80075dc:	463b      	mov	r3, r7
 80075de:	e0a2      	b.n	8007726 <__ieee754_log+0x276>
 80075e0:	4620      	mov	r0, r4
 80075e2:	f7f8 ffb7 	bl	8000554 <__aeabi_i2d>
 80075e6:	a374      	add	r3, pc, #464	; (adr r3, 80077b8 <__ieee754_log+0x308>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	4680      	mov	r8, r0
 80075ee:	4689      	mov	r9, r1
 80075f0:	f7f9 f81a 	bl	8000628 <__aeabi_dmul>
 80075f4:	a372      	add	r3, pc, #456	; (adr r3, 80077c0 <__ieee754_log+0x310>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	4604      	mov	r4, r0
 80075fc:	460d      	mov	r5, r1
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	f7f9 f811 	bl	8000628 <__aeabi_dmul>
 8007606:	e0a7      	b.n	8007758 <__ieee754_log+0x2a8>
 8007608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800760c:	f7f8 fe56 	bl	80002bc <__adddf3>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4650      	mov	r0, sl
 8007616:	4659      	mov	r1, fp
 8007618:	f7f9 f930 	bl	800087c <__aeabi_ddiv>
 800761c:	ec41 0b18 	vmov	d8, r0, r1
 8007620:	4620      	mov	r0, r4
 8007622:	f7f8 ff97 	bl	8000554 <__aeabi_i2d>
 8007626:	ec53 2b18 	vmov	r2, r3, d8
 800762a:	ec41 0b19 	vmov	d9, r0, r1
 800762e:	ec51 0b18 	vmov	r0, r1, d8
 8007632:	f7f8 fff9 	bl	8000628 <__aeabi_dmul>
 8007636:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800763a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4680      	mov	r8, r0
 8007646:	4689      	mov	r9, r1
 8007648:	f7f8 ffee 	bl	8000628 <__aeabi_dmul>
 800764c:	a360      	add	r3, pc, #384	; (adr r3, 80077d0 <__ieee754_log+0x320>)
 800764e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007652:	4606      	mov	r6, r0
 8007654:	460f      	mov	r7, r1
 8007656:	f7f8 ffe7 	bl	8000628 <__aeabi_dmul>
 800765a:	a35f      	add	r3, pc, #380	; (adr r3, 80077d8 <__ieee754_log+0x328>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7f8 fe2c 	bl	80002bc <__adddf3>
 8007664:	4632      	mov	r2, r6
 8007666:	463b      	mov	r3, r7
 8007668:	f7f8 ffde 	bl	8000628 <__aeabi_dmul>
 800766c:	a35c      	add	r3, pc, #368	; (adr r3, 80077e0 <__ieee754_log+0x330>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 fe23 	bl	80002bc <__adddf3>
 8007676:	4632      	mov	r2, r6
 8007678:	463b      	mov	r3, r7
 800767a:	f7f8 ffd5 	bl	8000628 <__aeabi_dmul>
 800767e:	a35a      	add	r3, pc, #360	; (adr r3, 80077e8 <__ieee754_log+0x338>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	f7f8 fe1a 	bl	80002bc <__adddf3>
 8007688:	4642      	mov	r2, r8
 800768a:	464b      	mov	r3, r9
 800768c:	f7f8 ffcc 	bl	8000628 <__aeabi_dmul>
 8007690:	a357      	add	r3, pc, #348	; (adr r3, 80077f0 <__ieee754_log+0x340>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	4680      	mov	r8, r0
 8007698:	4689      	mov	r9, r1
 800769a:	4630      	mov	r0, r6
 800769c:	4639      	mov	r1, r7
 800769e:	f7f8 ffc3 	bl	8000628 <__aeabi_dmul>
 80076a2:	a355      	add	r3, pc, #340	; (adr r3, 80077f8 <__ieee754_log+0x348>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 fe08 	bl	80002bc <__adddf3>
 80076ac:	4632      	mov	r2, r6
 80076ae:	463b      	mov	r3, r7
 80076b0:	f7f8 ffba 	bl	8000628 <__aeabi_dmul>
 80076b4:	a352      	add	r3, pc, #328	; (adr r3, 8007800 <__ieee754_log+0x350>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f8 fdff 	bl	80002bc <__adddf3>
 80076be:	4632      	mov	r2, r6
 80076c0:	463b      	mov	r3, r7
 80076c2:	f7f8 ffb1 	bl	8000628 <__aeabi_dmul>
 80076c6:	460b      	mov	r3, r1
 80076c8:	4602      	mov	r2, r0
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	f7f8 fdf5 	bl	80002bc <__adddf3>
 80076d2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80076d6:	9b01      	ldr	r3, [sp, #4]
 80076d8:	3551      	adds	r5, #81	; 0x51
 80076da:	431d      	orrs	r5, r3
 80076dc:	2d00      	cmp	r5, #0
 80076de:	4680      	mov	r8, r0
 80076e0:	4689      	mov	r9, r1
 80076e2:	dd48      	ble.n	8007776 <__ieee754_log+0x2c6>
 80076e4:	4b4e      	ldr	r3, [pc, #312]	; (8007820 <__ieee754_log+0x370>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	4650      	mov	r0, sl
 80076ea:	4659      	mov	r1, fp
 80076ec:	f7f8 ff9c 	bl	8000628 <__aeabi_dmul>
 80076f0:	4652      	mov	r2, sl
 80076f2:	465b      	mov	r3, fp
 80076f4:	f7f8 ff98 	bl	8000628 <__aeabi_dmul>
 80076f8:	4602      	mov	r2, r0
 80076fa:	460b      	mov	r3, r1
 80076fc:	4606      	mov	r6, r0
 80076fe:	460f      	mov	r7, r1
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f8 fdda 	bl	80002bc <__adddf3>
 8007708:	ec53 2b18 	vmov	r2, r3, d8
 800770c:	f7f8 ff8c 	bl	8000628 <__aeabi_dmul>
 8007710:	4680      	mov	r8, r0
 8007712:	4689      	mov	r9, r1
 8007714:	b964      	cbnz	r4, 8007730 <__ieee754_log+0x280>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f8 fdcb 	bl	80002b8 <__aeabi_dsub>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4650      	mov	r0, sl
 8007728:	4659      	mov	r1, fp
 800772a:	f7f8 fdc5 	bl	80002b8 <__aeabi_dsub>
 800772e:	e6d6      	b.n	80074de <__ieee754_log+0x2e>
 8007730:	a321      	add	r3, pc, #132	; (adr r3, 80077b8 <__ieee754_log+0x308>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	ec51 0b19 	vmov	r0, r1, d9
 800773a:	f7f8 ff75 	bl	8000628 <__aeabi_dmul>
 800773e:	a320      	add	r3, pc, #128	; (adr r3, 80077c0 <__ieee754_log+0x310>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	ec51 0b19 	vmov	r0, r1, d9
 800774c:	f7f8 ff6c 	bl	8000628 <__aeabi_dmul>
 8007750:	4642      	mov	r2, r8
 8007752:	464b      	mov	r3, r9
 8007754:	f7f8 fdb2 	bl	80002bc <__adddf3>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f8 fdaa 	bl	80002b8 <__aeabi_dsub>
 8007764:	4652      	mov	r2, sl
 8007766:	465b      	mov	r3, fp
 8007768:	f7f8 fda6 	bl	80002b8 <__aeabi_dsub>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	e7d9      	b.n	800772a <__ieee754_log+0x27a>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	f7f8 fd9b 	bl	80002b8 <__aeabi_dsub>
 8007782:	ec53 2b18 	vmov	r2, r3, d8
 8007786:	f7f8 ff4f 	bl	8000628 <__aeabi_dmul>
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	2c00      	cmp	r4, #0
 8007790:	f43f af23 	beq.w	80075da <__ieee754_log+0x12a>
 8007794:	a308      	add	r3, pc, #32	; (adr r3, 80077b8 <__ieee754_log+0x308>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	ec51 0b19 	vmov	r0, r1, d9
 800779e:	f7f8 ff43 	bl	8000628 <__aeabi_dmul>
 80077a2:	a307      	add	r3, pc, #28	; (adr r3, 80077c0 <__ieee754_log+0x310>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	4604      	mov	r4, r0
 80077aa:	460d      	mov	r5, r1
 80077ac:	ec51 0b19 	vmov	r0, r1, d9
 80077b0:	e727      	b.n	8007602 <__ieee754_log+0x152>
 80077b2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007808 <__ieee754_log+0x358>
 80077b6:	e694      	b.n	80074e2 <__ieee754_log+0x32>
 80077b8:	fee00000 	.word	0xfee00000
 80077bc:	3fe62e42 	.word	0x3fe62e42
 80077c0:	35793c76 	.word	0x35793c76
 80077c4:	3dea39ef 	.word	0x3dea39ef
 80077c8:	55555555 	.word	0x55555555
 80077cc:	3fd55555 	.word	0x3fd55555
 80077d0:	df3e5244 	.word	0xdf3e5244
 80077d4:	3fc2f112 	.word	0x3fc2f112
 80077d8:	96cb03de 	.word	0x96cb03de
 80077dc:	3fc74664 	.word	0x3fc74664
 80077e0:	94229359 	.word	0x94229359
 80077e4:	3fd24924 	.word	0x3fd24924
 80077e8:	55555593 	.word	0x55555593
 80077ec:	3fe55555 	.word	0x3fe55555
 80077f0:	d078c69f 	.word	0xd078c69f
 80077f4:	3fc39a09 	.word	0x3fc39a09
 80077f8:	1d8e78af 	.word	0x1d8e78af
 80077fc:	3fcc71c5 	.word	0x3fcc71c5
 8007800:	9997fa04 	.word	0x9997fa04
 8007804:	3fd99999 	.word	0x3fd99999
	...
 8007810:	c3500000 	.word	0xc3500000
 8007814:	43500000 	.word	0x43500000
 8007818:	7fefffff 	.word	0x7fefffff
 800781c:	3ff00000 	.word	0x3ff00000
 8007820:	3fe00000 	.word	0x3fe00000

08007824 <_init>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr

08007830 <_fini>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr
