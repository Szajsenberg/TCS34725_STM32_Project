
TCS34725_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000823c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008770  08008770  00020e7c  2**0
                  CONTENTS
  4 .ARM          00000008  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008778  08008778  00020e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008778  08008778  00018778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e7c  20000000  08008780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000e7c  080095fc  00020e7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  080095fc  00021898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020e7c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020eac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf54  00000000  00000000  00020eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000210b  00000000  00000000  0002de43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002ff50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000884  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017214  00000000  00000000  000312cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebd2  00000000  00000000  000484e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a409  00000000  00000000  000570b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c74  00000000  00000000  000e14bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e5130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000e7c 	.word	0x20000e7c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083c4 	.word	0x080083c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000e80 	.word	0x20000e80
 80001dc:	080083c4 	.word	0x080083c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <I2C_Write8BIT>:
extern I2C_HandleTypeDef hi2c1;


//Funkcja ustawiająca wartość rejestru 8-bitowego
void I2C_Write8BIT (uint8_t reg, uint32_t value)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  uint8_t pkt[2];
  pkt[0] = (TCS34725_COMMAND_BIT | reg);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	733b      	strb	r3, [r7, #12]
  pkt[1] = (value & 0xFF);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, pkt, 2, HAL_MAX_DELAY);
 8000f30:	f107 020c 	add.w	r2, r7, #12
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	2152      	movs	r1, #82	; 0x52
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <I2C_Write8BIT+0x38>)
 8000f40:	f001 fdb2 	bl	8002aa8 <HAL_I2C_Master_Transmit>
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200016a4 	.word	0x200016a4

08000f50 <I2C_Read16BIT>:
	return pkt;
}


//Funkcja odczytująca dwa rejestry 8-bitowe do jednej zmiennej 16-bitowej
uint16_t I2C_Read16BIT(uint8_t reg) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	uint16_t ret;
	uint8_t data[2];

	data[0] = (TCS34725_COMMAND_BIT | reg);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, TCS34725_ADDRESS, data, 1, HAL_MAX_DELAY);
 8000f64:	f107 020c 	add.w	r2, r7, #12
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2152      	movs	r1, #82	; 0x52
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <I2C_Read16BIT+0x5c>)
 8000f74:	f001 fd98 	bl	8002aa8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, TCS34725_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000f78:	f107 020c 	add.w	r2, r7, #12
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2302      	movs	r3, #2
 8000f84:	2152      	movs	r1, #82	; 0x52
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <I2C_Read16BIT+0x5c>)
 8000f88:	f001 fe8c 	bl	8002ca4 <HAL_I2C_Master_Receive>

	ret = (uint16_t) data[1];
 8000f8c:	7b7b      	ldrb	r3, [r7, #13]
 8000f8e:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	81fb      	strh	r3, [r7, #14]
	ret |= (uint16_t) data[0];
 8000f96:	7b3b      	ldrb	r3, [r7, #12]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	81fb      	strh	r3, [r7, #14]
	return ret;
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200016a4 	.word	0x200016a4

08000fb0 <I2C_GetColor>:


//Funkcja służąca do pobrania koloru o danym adresie
uint16_t I2C_GetColor(uint8_t reg){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint16_t ret=-1;
 8000fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fbe:	81fb      	strh	r3, [r7, #14]
	uint32_t clear = I2C_Read16BIT(0x14);
 8000fc0:	2014      	movs	r0, #20
 8000fc2:	f7ff ffc5 	bl	8000f50 <I2C_Read16BIT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60bb      	str	r3, [r7, #8]
	switch (reg){
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	3b14      	subs	r3, #20
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d837      	bhi.n	8001042 <I2C_GetColor+0x92>
 8000fd2:	a201      	add	r2, pc, #4	; (adr r2, 8000fd8 <I2C_GetColor+0x28>)
 8000fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd8:	0800103d 	.word	0x0800103d
 8000fdc:	08001043 	.word	0x08001043
 8000fe0:	08000ff5 	.word	0x08000ff5
 8000fe4:	08001043 	.word	0x08001043
 8000fe8:	08000ff5 	.word	0x08000ff5
 8000fec:	08001043 	.word	0x08001043
 8000ff0:	08000ff5 	.word	0x08000ff5
		case 0x16:
		case 0x18:
		case 0x1A:
			ret=I2C_Read16BIT(reg);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffaa 	bl	8000f50 <I2C_Read16BIT>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	81fb      	strh	r3, [r7, #14]
			ret = (float)ret / clear * 255.0;
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	ee07 3a90 	vmov	s15, r3
 8001010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001014:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001018:	ee16 0a90 	vmov	r0, s13
 800101c:	f7ff faac 	bl	8000578 <__aeabi_f2d>
 8001020:	a30b      	add	r3, pc, #44	; (adr r3, 8001050 <I2C_GetColor+0xa0>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faff 	bl	8000628 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fdd1 	bl	8000bd8 <__aeabi_d2uiz>
 8001036:	4603      	mov	r3, r0
 8001038:	81fb      	strh	r3, [r7, #14]
		break;
 800103a:	e002      	b.n	8001042 <I2C_GetColor+0x92>

		case 0x14:
			ret=clear;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	81fb      	strh	r3, [r7, #14]
		break;
 8001040:	bf00      	nop

	}
	return ret;
 8001042:	89fb      	ldrh	r3, [r7, #14]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	f3af 8000 	nop.w
 8001050:	00000000 	.word	0x00000000
 8001054:	406fe000 	.word	0x406fe000

08001058 <USART_start>:
__IO int USART_TX_Busy=0;
__IO int USART_RX_Empty=0;
__IO int USART_RX_Busy=0;


void USART_start(){
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2,&USART_RxBuf[0],1);
 800105c:	2201      	movs	r2, #1
 800105e:	4903      	ldr	r1, [pc, #12]	; (800106c <USART_start+0x14>)
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <USART_start+0x18>)
 8001062:	f004 fd4f 	bl	8005b04 <HAL_UART_Receive_IT>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20001480 	.word	0x20001480
 8001070:	200016f8 	.word	0x200016f8

08001074 <BX_haveData>:

uint8_t BX_haveData(){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	if(USART_RX_Empty==USART_RX_Busy)
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <BX_haveData+0x20>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <BX_haveData+0x24>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d101      	bne.n	8001088 <BX_haveData+0x14>
		return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <BX_haveData+0x16>
	else return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20001590 	.word	0x20001590
 8001098:	20001594 	.word	0x20001594

0800109c <USART_getchar>:

//Funkcja pobierająca znak z buforu kołowego
uint8_t USART_getchar(){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
uint8_t tmp;
	if(BX_haveData()){
 80010a2:	f7ff ffe7 	bl	8001074 <BX_haveData>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d013      	beq.n	80010d4 <USART_getchar+0x38>
		 tmp=USART_RxBuf[USART_RX_Busy];
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <USART_getchar+0x44>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <USART_getchar+0x48>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	71fb      	strb	r3, [r7, #7]
		 USART_RX_Busy++;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <USART_getchar+0x44>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <USART_getchar+0x44>)
 80010be:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Busy >= MAX_FRAME_SIZE)USART_RX_Busy=0;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <USART_getchar+0x44>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010c8:	dd02      	ble.n	80010d0 <USART_getchar+0x34>
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <USART_getchar+0x44>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
		 return tmp;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	e000      	b.n	80010d6 <USART_getchar+0x3a>
	}else return -1;
 80010d4:	23ff      	movs	r3, #255	; 0xff
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20001594 	.word	0x20001594
 80010e4:	20001480 	.word	0x20001480

080010e8 <CALCULATE_CRC>:

uint8_t CALCULATE_CRC(char *data, uint16_t length) {
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
    const uint8_t WIELOMIAN = 0x9B;
 80010f4:	239b      	movs	r3, #155	; 0x9b
 80010f6:	73fb      	strb	r3, [r7, #15]
    uint8_t MY_CRC = 0xFF;
 80010f8:	23ff      	movs	r3, #255	; 0xff
 80010fa:	75fb      	strb	r3, [r7, #23]

    for (uint16_t i = 0; i < length; ++i) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	82bb      	strh	r3, [r7, #20]
 8001100:	e022      	b.n	8001148 <CALCULATE_CRC+0x60>
    	MY_CRC ^= data[i];
 8001102:	8abb      	ldrh	r3, [r7, #20]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	4053      	eors	r3, r2
 800110e:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	e012      	b.n	800113c <CALCULATE_CRC+0x54>
            if (MY_CRC & 0x80)
 8001116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800111a:	2b00      	cmp	r3, #0
 800111c:	da08      	bge.n	8001130 <CALCULATE_CRC+0x48>
            	MY_CRC = (MY_CRC << 1) ^ WIELOMIAN;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	b25a      	sxtb	r2, r3
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001128:	4053      	eors	r3, r2
 800112a:	b25b      	sxtb	r3, r3
 800112c:	75fb      	strb	r3, [r7, #23]
 800112e:	e002      	b.n	8001136 <CALCULATE_CRC+0x4e>
            else
            	MY_CRC <<= 1;
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; ++j){
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b07      	cmp	r3, #7
 8001140:	dde9      	ble.n	8001116 <CALCULATE_CRC+0x2e>
    for (uint16_t i = 0; i < length; ++i) {
 8001142:	8abb      	ldrh	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	82bb      	strh	r3, [r7, #20]
 8001148:	8aba      	ldrh	r2, [r7, #20]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3d8      	bcc.n	8001102 <CALCULATE_CRC+0x1a>
        }
    }
    return MY_CRC;
 8001150:	7dfb      	ldrb	r3, [r7, #23]
}
 8001152:	4618      	mov	r0, r3
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <USART_fsend>:

void USART_fsend(char* format,...){ // Funkcja odpowiedzialna za przesyłanie tekstu do komputera
 8001160:	b40f      	push	{r0, r1, r2, r3}
 8001162:	b580      	push	{r7, lr}
 8001164:	b0ea      	sub	sp, #424	; 0x1a8
 8001166:	af02      	add	r7, sp, #8
	char tmp_rs[128];
	char FRAME[MAX_FRAME_SIZE];
	__IO int idx;
	va_list arglist; // Deklaracja listy argumentów
	va_start(arglist,format);
 8001168:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 800116c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001170:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001174:	601a      	str	r2, [r3, #0]
	vsprintf(tmp_rs,format,arglist); //Wpisanie do bufora tmp_rs sformatowanego tekstu
 8001176:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800117a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800117e:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8001188:	f005 fda8 	bl	8006cdc <vsiprintf>
	va_end(arglist); // Koniec przetwarzania zmienych argumentow
	idx=USART_TX_Empty; // Przypisanie do idx wartości wskaźnika
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <USART_fsend+0x174>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001194:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001198:	601a      	str	r2, [r3, #0]

	uint8_t CHECKSUM=CALCULATE_CRC(tmp_rs, strlen(tmp_rs));
 800119a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f828 	bl	80001f4 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80011ac:	4611      	mov	r1, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff9a 	bl	80010e8 <CALCULATE_CRC>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	sprintf(FRAME,"%c%s%02x%c\r\n",STX,tmp_rs,CHECKSUM,ETB);
 80011ba:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80011be:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80011c2:	f107 0010 	add.w	r0, r7, #16
 80011c6:	2117      	movs	r1, #23
 80011c8:	9101      	str	r1, [sp, #4]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	2202      	movs	r2, #2
 80011d0:	4941      	ldr	r1, [pc, #260]	; (80012d8 <USART_fsend+0x178>)
 80011d2:	f005 fd09 	bl	8006be8 <siprintf>

	for(int i=0;i<strlen(FRAME);i++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011dc:	e02c      	b.n	8001238 <USART_fsend+0xd8>
		USART_TxBuf[idx]=FRAME[i]; //Przypisujemy do bufora znaki z tmp_rs
 80011de:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80011ec:	f5a2 71c8 	sub.w	r1, r2, #400	; 0x190
 80011f0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011f4:	440a      	add	r2, r1
 80011f6:	7811      	ldrb	r1, [r2, #0]
 80011f8:	4a38      	ldr	r2, [pc, #224]	; (80012dc <USART_fsend+0x17c>)
 80011fa:	54d1      	strb	r1, [r2, r3]
		idx++; // Zwiększamy wskaźnik
 80011fc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001200:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800120c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001210:	601a      	str	r2, [r3, #0]
		if(idx >= USART_TXBUF_LEN)idx=0; // Jeżeli datarlśmy do końca bufora to zawijamy
 8001212:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001216:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001220:	db05      	blt.n	800122e <USART_fsend+0xce>
 8001222:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001226:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	for(int i=0;i<strlen(FRAME);i++){
 800122e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001232:	3301      	adds	r3, #1
 8001234:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4618      	mov	r0, r3
 800123e:	f7fe ffd9 	bl	80001f4 <strlen>
 8001242:	4602      	mov	r2, r0
 8001244:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001248:	429a      	cmp	r2, r3
 800124a:	d8c8      	bhi.n	80011de <USART_fsend+0x7e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
	}
	__disable_irq();
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <USART_fsend+0x174>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <USART_fsend+0x180>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d12a      	bne.n	80012b2 <USART_fsend+0x152>
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <USART_fsend+0x184>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001266:	2b80      	cmp	r3, #128	; 0x80
 8001268:	d123      	bne.n	80012b2 <USART_fsend+0x152>
		USART_TX_Empty=idx; //
 800126a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800126e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <USART_fsend+0x174>)
 8001276:	6013      	str	r3, [r2, #0]
		uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <USART_fsend+0x180>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a17      	ldr	r2, [pc, #92]	; (80012dc <USART_fsend+0x17c>)
 800127e:	5cd2      	ldrb	r2, [r2, r3]
 8001280:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001284:	f2a3 1399 	subw	r3, r3, #409	; 0x199
 8001288:	701a      	strb	r2, [r3, #0]
		USART_TX_Busy++;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <USART_fsend+0x180>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <USART_fsend+0x180>)
 8001292:	6013      	str	r3, [r2, #0]

		if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <USART_fsend+0x180>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 800129c:	db02      	blt.n	80012a4 <USART_fsend+0x144>
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <USART_fsend+0x180>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <USART_fsend+0x184>)
 80012ac:	f004 fbe5 	bl	8005a7a <HAL_UART_Transmit_IT>
	if((USART_TX_Empty==USART_TX_Busy)&&(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==SET)){
 80012b0:	e006      	b.n	80012c0 <USART_fsend+0x160>
	}else{
		USART_TX_Empty=idx;
 80012b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80012b6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <USART_fsend+0x174>)
 80012be:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012c0:	b662      	cpsie	i
}
 80012c2:	bf00      	nop
	}
	__enable_irq();
}
 80012c4:	bf00      	nop
 80012c6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80012ca:	46bd      	mov	sp, r7
 80012cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012d0:	b004      	add	sp, #16
 80012d2:	4770      	bx	lr
 80012d4:	20001588 	.word	0x20001588
 80012d8:	080083dc 	.word	0x080083dc
 80012dc:	20000e98 	.word	0x20000e98
 80012e0:	2000158c 	.word	0x2000158c
 80012e4:	200016f8 	.word	0x200016f8

080012e8 <USART_GETFRAME>:

uint8_t USART_GETFRAME(char *buf){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	static char FRAME[MAX_FRAME_SIZE];
	static uint8_t FRAME_STATE=0;
	static uint16_t FRAME_IDX=0;
	uint8_t ZNAK=USART_getchar();
 80012f0:	f7ff fed4 	bl	800109c <USART_getchar>
 80012f4:	4603      	mov	r3, r0
 80012f6:	74fb      	strb	r3, [r7, #19]


	switch(ZNAK){
 80012f8:	7cfb      	ldrb	r3, [r7, #19]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d002      	beq.n	8001304 <USART_GETFRAME+0x1c>
 80012fe:	2b17      	cmp	r3, #23
 8001300:	d013      	beq.n	800132a <USART_GETFRAME+0x42>
 8001302:	e089      	b.n	8001418 <USART_GETFRAME+0x130>
	case STX:
		FRAME_STATE=1;
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <USART_GETFRAME+0x17c>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
		FRAME_IDX=0;
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <USART_GETFRAME+0x180>)
 800130c:	2200      	movs	r2, #0
 800130e:	801a      	strh	r2, [r3, #0]
		FRAME[FRAME_IDX]=ZNAK;
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <USART_GETFRAME+0x180>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4a55      	ldr	r2, [pc, #340]	; (800146c <USART_GETFRAME+0x184>)
 8001318:	7cfb      	ldrb	r3, [r7, #19]
 800131a:	5453      	strb	r3, [r2, r1]
		FRAME_IDX++;
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <USART_GETFRAME+0x180>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b50      	ldr	r3, [pc, #320]	; (8001468 <USART_GETFRAME+0x180>)
 8001326:	801a      	strh	r2, [r3, #0]
	break;
 8001328:	e096      	b.n	8001458 <USART_GETFRAME+0x170>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	case ETB:
		if(FRAME_STATE==1){
 800132a:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <USART_GETFRAME+0x17c>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	f040 808d 	bne.w	800144e <USART_GETFRAME+0x166>
			FRAME_STATE=0;
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <USART_GETFRAME+0x17c>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
			FRAME[FRAME_IDX]=ZNAK;
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <USART_GETFRAME+0x180>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4a4a      	ldr	r2, [pc, #296]	; (800146c <USART_GETFRAME+0x184>)
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	5453      	strb	r3, [r2, r1]
			FRAME_IDX++;
 8001346:	4b48      	ldr	r3, [pc, #288]	; (8001468 <USART_GETFRAME+0x180>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b46      	ldr	r3, [pc, #280]	; (8001468 <USART_GETFRAME+0x180>)
 8001350:	801a      	strh	r2, [r3, #0]

			if (FRAME_IDX < 5){
 8001352:	4b45      	ldr	r3, [pc, #276]	; (8001468 <USART_GETFRAME+0x180>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d97b      	bls.n	8001452 <USART_GETFRAME+0x16a>
				break;
			}

			if(FRAME_IDX>=MAX_FRAME_SIZE-4){
 800135a:	4b43      	ldr	r3, [pc, #268]	; (8001468 <USART_GETFRAME+0x180>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001362:	d903      	bls.n	800136c <USART_GETFRAME+0x84>
				USART_fsend("FRAME RANGE EXCEEDED;");
 8001364:	4842      	ldr	r0, [pc, #264]	; (8001470 <USART_GETFRAME+0x188>)
 8001366:	f7ff fefb 	bl	8001160 <USART_fsend>
				break;
 800136a:	e075      	b.n	8001458 <USART_GETFRAME+0x170>
			}

			if(FRAME[FRAME_IDX-4]==SEPARATOR){
 800136c:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <USART_GETFRAME+0x180>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	3b04      	subs	r3, #4
 8001372:	4a3e      	ldr	r2, [pc, #248]	; (800146c <USART_GETFRAME+0x184>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	2b3b      	cmp	r3, #59	; 0x3b
 8001378:	d169      	bne.n	800144e <USART_GETFRAME+0x166>
				char GIVEN_CRC[3]={""};
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <USART_GETFRAME+0x18c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	743b      	strb	r3, [r7, #16]
 8001380:	f107 0311 	add.w	r3, r7, #17
 8001384:	2200      	movs	r2, #0
 8001386:	801a      	strh	r2, [r3, #0]
				char CALC_CRC[3]={""};
 8001388:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <USART_GETFRAME+0x18c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	733b      	strb	r3, [r7, #12]
 800138e:	f107 030d 	add.w	r3, r7, #13
 8001392:	2200      	movs	r2, #0
 8001394:	801a      	strh	r2, [r3, #0]

				sprintf(CALC_CRC,"%02x",CALCULATE_CRC(FRAME+1,FRAME_IDX-4));
 8001396:	4a38      	ldr	r2, [pc, #224]	; (8001478 <USART_GETFRAME+0x190>)
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <USART_GETFRAME+0x180>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	3b04      	subs	r3, #4
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f7ff fea0 	bl	80010e8 <CALCULATE_CRC>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4932      	ldr	r1, [pc, #200]	; (800147c <USART_GETFRAME+0x194>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 fc18 	bl	8006be8 <siprintf>
				strncpy(GIVEN_CRC,FRAME+(FRAME_IDX-3),2);
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <USART_GETFRAME+0x180>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	3b03      	subs	r3, #3
 80013be:	4a2b      	ldr	r2, [pc, #172]	; (800146c <USART_GETFRAME+0x184>)
 80013c0:	1899      	adds	r1, r3, r2
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2202      	movs	r2, #2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 fcab 	bl	8006d24 <strncpy>

				if(GIVEN_CRC[0]==CALC_CRC[0] && GIVEN_CRC[1]==CALC_CRC[1]){
 80013ce:	7c3a      	ldrb	r2, [r7, #16]
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d13b      	bne.n	800144e <USART_GETFRAME+0x166>
 80013d6:	7c7a      	ldrb	r2, [r7, #17]
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d137      	bne.n	800144e <USART_GETFRAME+0x166>
					for(int i=1;i<FRAME_IDX-3;i++){
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	e00b      	b.n	80013fc <USART_GETFRAME+0x114>
						buf[i-1]=FRAME[i];
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	491f      	ldr	r1, [pc, #124]	; (800146c <USART_GETFRAME+0x184>)
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	440a      	add	r2, r1
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
					for(int i=1;i<FRAME_IDX-3;i++){
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <USART_GETFRAME+0x180>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	3b03      	subs	r3, #3
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbed      	blt.n	80013e4 <USART_GETFRAME+0xfc>
					}
					buf[FRAME_IDX-4]=0;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <USART_GETFRAME+0x180>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	3b04      	subs	r3, #4
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	break;
 8001416:	e01a      	b.n	800144e <USART_GETFRAME+0x166>
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	default:
	if(FRAME_STATE==1){
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <USART_GETFRAME+0x17c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d11a      	bne.n	8001456 <USART_GETFRAME+0x16e>
		if (!(ZNAK > 0x21 && ZNAK < 0x7E)){
 8001420:	7cfb      	ldrb	r3, [r7, #19]
 8001422:	2b21      	cmp	r3, #33	; 0x21
 8001424:	d902      	bls.n	800142c <USART_GETFRAME+0x144>
 8001426:	7cfb      	ldrb	r3, [r7, #19]
 8001428:	2b7d      	cmp	r3, #125	; 0x7d
 800142a:	d903      	bls.n	8001434 <USART_GETFRAME+0x14c>
			FRAME_STATE = 0;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <USART_GETFRAME+0x17c>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
			break;
 8001432:	e011      	b.n	8001458 <USART_GETFRAME+0x170>
		}
		else{
			FRAME[FRAME_IDX] = ZNAK;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <USART_GETFRAME+0x180>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4a0c      	ldr	r2, [pc, #48]	; (800146c <USART_GETFRAME+0x184>)
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	5453      	strb	r3, [r2, r1]
			FRAME_IDX++;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <USART_GETFRAME+0x180>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <USART_GETFRAME+0x180>)
 800144a:	801a      	strh	r2, [r3, #0]
		}
	}
	break;
 800144c:	e003      	b.n	8001456 <USART_GETFRAME+0x16e>
	break;
 800144e:	bf00      	nop
 8001450:	e002      	b.n	8001458 <USART_GETFRAME+0x170>
				break;
 8001452:	bf00      	nop
 8001454:	e000      	b.n	8001458 <USART_GETFRAME+0x170>
	break;
 8001456:	bf00      	nop
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	}

	return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20001598 	.word	0x20001598
 8001468:	2000159a 	.word	0x2000159a
 800146c:	2000159c 	.word	0x2000159c
 8001470:	080083ec 	.word	0x080083ec
 8001474:	0800840c 	.word	0x0800840c
 8001478:	2000159d 	.word	0x2000159d
 800147c:	08008404 	.word	0x08008404

08001480 <ParseCommand>:


//Funkcja odpowiedzialna za rozpoznawanie komend
void ParseCommand(char *buf){
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	char * commBuff = strtok(buf,";");
 8001488:	496c      	ldr	r1, [pc, #432]	; (800163c <ParseCommand+0x1bc>)
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f005 fc5e 	bl	8006d4c <strtok>
 8001490:	60f8      	str	r0, [r7, #12]
	while(commBuff!=NULL){
 8001492:	e0c9      	b.n	8001628 <ParseCommand+0x1a8>
		if(strncmp(commBuff,"LIVE",4)==0){
 8001494:	2204      	movs	r2, #4
 8001496:	496a      	ldr	r1, [pc, #424]	; (8001640 <ParseCommand+0x1c0>)
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f005 fc31 	bl	8006d00 <strncmp>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d103      	bne.n	80014ac <ParseCommand+0x2c>
			LIVE_TOGGLE=1;
 80014a4:	4b67      	ldr	r3, [pc, #412]	; (8001644 <ParseCommand+0x1c4>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
 80014aa:	e0b8      	b.n	800161e <ParseCommand+0x19e>
		}
		else if(strncmp(commBuff,"STOP",4)==0){
 80014ac:	2204      	movs	r2, #4
 80014ae:	4966      	ldr	r1, [pc, #408]	; (8001648 <ParseCommand+0x1c8>)
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f005 fc25 	bl	8006d00 <strncmp>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d106      	bne.n	80014ca <ParseCommand+0x4a>
			LIVE_TOGGLE=0;
 80014bc:	4b61      	ldr	r3, [pc, #388]	; (8001644 <ParseCommand+0x1c4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			USART_fsend("STOPPED!;");
 80014c2:	4862      	ldr	r0, [pc, #392]	; (800164c <ParseCommand+0x1cc>)
 80014c4:	f7ff fe4c 	bl	8001160 <USART_fsend>
 80014c8:	e0a9      	b.n	800161e <ParseCommand+0x19e>
		}
		else if(strncmp(commBuff,"PREVIEW[ON]",12)==0){
 80014ca:	4961      	ldr	r1, [pc, #388]	; (8001650 <ParseCommand+0x1d0>)
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7fe fe87 	bl	80001e0 <strcmp>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d106      	bne.n	80014e6 <ParseCommand+0x66>
			PREVIEW_TOGGLE=1;
 80014d8:	4b5e      	ldr	r3, [pc, #376]	; (8001654 <ParseCommand+0x1d4>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
			USART_fsend("PREVIEW TURNED ON!;");
 80014de:	485e      	ldr	r0, [pc, #376]	; (8001658 <ParseCommand+0x1d8>)
 80014e0:	f7ff fe3e 	bl	8001160 <USART_fsend>
 80014e4:	e09b      	b.n	800161e <ParseCommand+0x19e>
		}
		else if(strncmp(commBuff,"PREVIEW[OFF]",12)==0){
 80014e6:	220c      	movs	r2, #12
 80014e8:	495c      	ldr	r1, [pc, #368]	; (800165c <ParseCommand+0x1dc>)
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f005 fc08 	bl	8006d00 <strncmp>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <ParseCommand+0x84>
			PREVIEW_TOGGLE=0;
 80014f6:	4b57      	ldr	r3, [pc, #348]	; (8001654 <ParseCommand+0x1d4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
			USART_fsend("PREVIEW TURNED OFF!;");
 80014fc:	4858      	ldr	r0, [pc, #352]	; (8001660 <ParseCommand+0x1e0>)
 80014fe:	f7ff fe2f 	bl	8001160 <USART_fsend>
 8001502:	e08c      	b.n	800161e <ParseCommand+0x19e>
		}
		else if (strncmp(commBuff, "SETINTERVAL[", 12) == 0 && buf[strlen(buf) - 1] == ']'){
 8001504:	220c      	movs	r2, #12
 8001506:	4957      	ldr	r1, [pc, #348]	; (8001664 <ParseCommand+0x1e4>)
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f005 fbf9 	bl	8006d00 <strncmp>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d139      	bne.n	8001588 <ParseCommand+0x108>
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7fe fe6d 	bl	80001f4 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	3b01      	subs	r3, #1
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b5d      	cmp	r3, #93	; 0x5d
 8001526:	d12f      	bne.n	8001588 <ParseCommand+0x108>
			if(atoi(buf + 12)<3){
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	330c      	adds	r3, #12
 800152c:	4618      	mov	r0, r3
 800152e:	f005 fa09 	bl	8006944 <atoi>
 8001532:	4603      	mov	r3, r0
 8001534:	2b02      	cmp	r3, #2
 8001536:	dc0a      	bgt.n	800154e <ParseCommand+0xce>
				USART_fsend("GIVEN VALUE IS TOO LOW: %d ;", atoi(buf + 12));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	330c      	adds	r3, #12
 800153c:	4618      	mov	r0, r3
 800153e:	f005 fa01 	bl	8006944 <atoi>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	4848      	ldr	r0, [pc, #288]	; (8001668 <ParseCommand+0x1e8>)
 8001548:	f7ff fe0a 	bl	8001160 <USART_fsend>
			if(atoi(buf + 12)<3){
 800154c:	e067      	b.n	800161e <ParseCommand+0x19e>
			}
			else if(atoi(buf + 12)>65535){
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	330c      	adds	r3, #12
 8001552:	4618      	mov	r0, r3
 8001554:	f005 f9f6 	bl	8006944 <atoi>
 8001558:	4603      	mov	r3, r0
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155e:	db03      	blt.n	8001568 <ParseCommand+0xe8>
				USART_fsend("INTERVAL LIMIT EXCEEDED;");
 8001560:	4842      	ldr	r0, [pc, #264]	; (800166c <ParseCommand+0x1ec>)
 8001562:	f7ff fdfd 	bl	8001160 <USART_fsend>
			if(atoi(buf + 12)<3){
 8001566:	e05a      	b.n	800161e <ParseCommand+0x19e>
			}
			else{
				Delay = atoi(buf + 12);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	330c      	adds	r3, #12
 800156c:	4618      	mov	r0, r3
 800156e:	f005 f9e9 	bl	8006944 <atoi>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <ParseCommand+0x1f0>)
 8001578:	801a      	strh	r2, [r3, #0]
				USART_fsend("INTERVAL SET TO %d MS;",Delay);
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <ParseCommand+0x1f0>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	483c      	ldr	r0, [pc, #240]	; (8001674 <ParseCommand+0x1f4>)
 8001582:	f7ff fded 	bl	8001160 <USART_fsend>
			if(atoi(buf + 12)<3){
 8001586:	e04a      	b.n	800161e <ParseCommand+0x19e>
				//I2C_RGBCTime(Delay);
			}
		}
		else if(strncmp(commBuff,"SHOWINT",7)==0){
 8001588:	2207      	movs	r2, #7
 800158a:	493b      	ldr	r1, [pc, #236]	; (8001678 <ParseCommand+0x1f8>)
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f005 fbb7 	bl	8006d00 <strncmp>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d106      	bne.n	80015a6 <ParseCommand+0x126>
			USART_fsend("INTERVAL= %dms",Delay);
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <ParseCommand+0x1f0>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	4837      	ldr	r0, [pc, #220]	; (800167c <ParseCommand+0x1fc>)
 80015a0:	f7ff fdde 	bl	8001160 <USART_fsend>
 80015a4:	e03b      	b.n	800161e <ParseCommand+0x19e>
		}
		else if (strncmp(commBuff, "SHOWARCHIVAL[", 13) == 0 && buf[strlen(buf) - 1] == ']'){
 80015a6:	220d      	movs	r2, #13
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <ParseCommand+0x200>)
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f005 fba8 	bl	8006d00 <strncmp>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d130      	bne.n	8001618 <ParseCommand+0x198>
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7fe fe1c 	bl	80001f4 <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	3b01      	subs	r3, #1
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b5d      	cmp	r3, #93	; 0x5d
 80015c8:	d126      	bne.n	8001618 <ParseCommand+0x198>
			uint16_t arg1 = atoi(commBuff+13);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	330d      	adds	r3, #13
 80015ce:	4618      	mov	r0, r3
 80015d0:	f005 f9b8 	bl	8006944 <atoi>
 80015d4:	4603      	mov	r3, r0
 80015d6:	817b      	strh	r3, [r7, #10]
			uint16_t arg2 = atoi(commBuff+14+((int)log10(arg1)+1));
 80015d8:	897b      	ldrh	r3, [r7, #10]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffaa 	bl	8000534 <__aeabi_ui2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	ec43 2b10 	vmov	d0, r2, r3
 80015e8:	f006 fc5e 	bl	8007ea8 <log10>
 80015ec:	ec53 2b10 	vmov	r2, r3, d0
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fac8 	bl	8000b88 <__aeabi_d2iz>
 80015f8:	4603      	mov	r3, r0
 80015fa:	330f      	adds	r3, #15
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f005 f99f 	bl	8006944 <atoi>
 8001606:	4603      	mov	r3, r0
 8001608:	813b      	strh	r3, [r7, #8]
			ShowArchivalData(arg1,arg2);
 800160a:	893a      	ldrh	r2, [r7, #8]
 800160c:	897b      	ldrh	r3, [r7, #10]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f839 	bl	8001688 <ShowArchivalData>
		else if (strncmp(commBuff, "SHOWARCHIVAL[", 13) == 0 && buf[strlen(buf) - 1] == ']'){
 8001616:	e002      	b.n	800161e <ParseCommand+0x19e>
		}
		else{
			USART_fsend("UNRECOGNIZED COMMAND!;");
 8001618:	481a      	ldr	r0, [pc, #104]	; (8001684 <ParseCommand+0x204>)
 800161a:	f7ff fda1 	bl	8001160 <USART_fsend>
		}
		commBuff = strtok( NULL,";");
 800161e:	4907      	ldr	r1, [pc, #28]	; (800163c <ParseCommand+0x1bc>)
 8001620:	2000      	movs	r0, #0
 8001622:	f005 fb93 	bl	8006d4c <strtok>
 8001626:	60f8      	str	r0, [r7, #12]
	while(commBuff!=NULL){
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f af32 	bne.w	8001494 <ParseCommand+0x14>
	}
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08008410 	.word	0x08008410
 8001640:	08008414 	.word	0x08008414
 8001644:	2000173c 	.word	0x2000173c
 8001648:	0800841c 	.word	0x0800841c
 800164c:	08008424 	.word	0x08008424
 8001650:	08008430 	.word	0x08008430
 8001654:	2000173d 	.word	0x2000173d
 8001658:	0800843c 	.word	0x0800843c
 800165c:	08008450 	.word	0x08008450
 8001660:	08008460 	.word	0x08008460
 8001664:	08008478 	.word	0x08008478
 8001668:	08008488 	.word	0x08008488
 800166c:	080084a8 	.word	0x080084a8
 8001670:	20000000 	.word	0x20000000
 8001674:	080084c4 	.word	0x080084c4
 8001678:	080084dc 	.word	0x080084dc
 800167c:	080084e4 	.word	0x080084e4
 8001680:	080084f4 	.word	0x080084f4
 8001684:	08008504 	.word	0x08008504

08001688 <ShowArchivalData>:


void ShowArchivalData(uint16_t x,uint16_t y){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	80fb      	strh	r3, [r7, #6]
 8001694:	4613      	mov	r3, r2
 8001696:	80bb      	strh	r3, [r7, #4]
	if((x > 0 && x <= 1200) && (y > 0 && y <= 1200)){
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d02f      	beq.n	80016fe <ShowArchivalData+0x76>
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016a4:	d82b      	bhi.n	80016fe <ShowArchivalData+0x76>
 80016a6:	88bb      	ldrh	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d028      	beq.n	80016fe <ShowArchivalData+0x76>
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016b2:	d824      	bhi.n	80016fe <ShowArchivalData+0x76>
		if(x>y){
 80016b4:	88fa      	ldrh	r2, [r7, #6]
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d910      	bls.n	80016de <ShowArchivalData+0x56>
			for(int i=x-1;i>=y-1;i--){
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	3b01      	subs	r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	e006      	b.n	80016d2 <ShowArchivalData+0x4a>
				if(ARCHIVED_DATA[i][0]>=0 && ARCHIVED_DATA[i][0]<257)
					USART_fsend("DATA NOT AVAIBLE AT INDEX=%d",i);
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <ShowArchivalData+0x88>)
 80016c8:	f7ff fd4a 	bl	8001160 <USART_fsend>
			for(int i=x-1;i>=y-1;i--){
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	88bb      	ldrh	r3, [r7, #4]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	429a      	cmp	r2, r3
 80016da:	daf3      	bge.n	80016c4 <ShowArchivalData+0x3c>
		if(x>y){
 80016dc:	e013      	b.n	8001706 <ShowArchivalData+0x7e>
				else
					USART_fsend("%d| \tR= %d\tG= %d\tB= %d;",i,ARCHIVED_DATA[i][0],ARCHIVED_DATA[i][1],ARCHIVED_DATA[i][2]);
			}
		}
		else{
			for(int i=x-1;i<=y-1;i++){
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e006      	b.n	80016f4 <ShowArchivalData+0x6c>
				if(ARCHIVED_DATA[i][0]>=0 && ARCHIVED_DATA[i][0]<257)
					USART_fsend("DATA NOT AVAIBLE AT INDEX=%d",i);
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <ShowArchivalData+0x88>)
 80016ea:	f7ff fd39 	bl	8001160 <USART_fsend>
			for(int i=x-1;i<=y-1;i++){
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	dbf4      	blt.n	80016e6 <ShowArchivalData+0x5e>
		if(x>y){
 80016fc:	e003      	b.n	8001706 <ShowArchivalData+0x7e>
				else
					USART_fsend("%d| \tR= %d\tG= %d\tB= %d;",i,ARCHIVED_DATA[i][0],ARCHIVED_DATA[i][1],ARCHIVED_DATA[i][2]);
			}
		}
	}else{USART_fsend("WRONG PARAMETER!");}
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <ShowArchivalData+0x8c>)
 8001700:	f7ff fd2e 	bl	8001160 <USART_fsend>
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800851c 	.word	0x0800851c
 8001714:	0800853c 	.word	0x0800853c

08001718 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
   if(huart==&huart2){
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_UART_TxCpltCallback+0x58>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d11e      	bne.n	8001766 <HAL_UART_TxCpltCallback+0x4e>
	   if(USART_TX_Empty!=USART_TX_Busy){
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_UART_TxCpltCallback+0x5c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_UART_TxCpltCallback+0x60>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d018      	beq.n	8001766 <HAL_UART_TxCpltCallback+0x4e>
		   uint8_t tmp=USART_TxBuf[USART_TX_Busy];
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_UART_TxCpltCallback+0x60>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_UART_TxCpltCallback+0x64>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	73fb      	strb	r3, [r7, #15]
		   USART_TX_Busy++;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_UART_TxCpltCallback+0x60>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3301      	adds	r3, #1
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_UART_TxCpltCallback+0x60>)
 8001746:	6013      	str	r3, [r2, #0]
		   if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0;
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_UART_TxCpltCallback+0x60>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f5b3 6fbd 	cmp.w	r3, #1512	; 0x5e8
 8001750:	db02      	blt.n	8001758 <HAL_UART_TxCpltCallback+0x40>
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_UART_TxCpltCallback+0x60>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
		   HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001758:	f107 030f 	add.w	r3, r7, #15
 800175c:	2201      	movs	r2, #1
 800175e:	4619      	mov	r1, r3
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <HAL_UART_TxCpltCallback+0x58>)
 8001762:	f004 f98a 	bl	8005a7a <HAL_UART_Transmit_IT>
	   }
   }
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200016f8 	.word	0x200016f8
 8001774:	20001588 	.word	0x20001588
 8001778:	2000158c 	.word	0x2000158c
 800177c:	20000e98 	.word	0x20000e98

08001780 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	 if(huart==&huart2){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_UART_RxCpltCallback+0x44>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d115      	bne.n	80017bc <HAL_UART_RxCpltCallback+0x3c>
		 USART_RX_Empty++;
 8001790:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_UART_RxCpltCallback+0x48>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_UART_RxCpltCallback+0x48>)
 8001798:	6013      	str	r3, [r2, #0]
		 if(USART_RX_Empty>=MAX_FRAME_SIZE)USART_RX_Empty=0;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_UART_RxCpltCallback+0x48>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017a2:	dd02      	ble.n	80017aa <HAL_UART_RxCpltCallback+0x2a>
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_UART_RxCpltCallback+0x48>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1);
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_UART_RxCpltCallback+0x48>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_UART_RxCpltCallback+0x4c>)
 80017b0:	4413      	add	r3, r2
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	4803      	ldr	r0, [pc, #12]	; (80017c4 <HAL_UART_RxCpltCallback+0x44>)
 80017b8:	f004 f9a4 	bl	8005b04 <HAL_UART_Receive_IT>

	 }
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200016f8 	.word	0x200016f8
 80017c8:	20001590 	.word	0x20001590
 80017cc:	20001480 	.word	0x20001480

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ffc2 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <ADD_ARCHIVE_DATA>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADD_ARCHIVE_DATA(uint8_t r,uint8_t g,uint8_t b){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	460b      	mov	r3, r1
 8001874:	71bb      	strb	r3, [r7, #6]
 8001876:	4613      	mov	r3, r2
 8001878:	717b      	strb	r3, [r7, #5]
	  ARCHIVED_DATA[ARCHIVE_RS][0]=r;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <ADD_ARCHIVE_DATA+0x74>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4918      	ldr	r1, [pc, #96]	; (80018e0 <ADD_ARCHIVE_DATA+0x78>)
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	440b      	add	r3, r1
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	701a      	strb	r2, [r3, #0]
	  ARCHIVED_DATA[ARCHIVE_RS][1]=g;
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <ADD_ARCHIVE_DATA+0x74>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4913      	ldr	r1, [pc, #76]	; (80018e0 <ADD_ARCHIVE_DATA+0x78>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	440b      	add	r3, r1
 800189a:	3301      	adds	r3, #1
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	701a      	strb	r2, [r3, #0]
	  ARCHIVED_DATA[ARCHIVE_RS][2]=b;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <ADD_ARCHIVE_DATA+0x74>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <ADD_ARCHIVE_DATA+0x78>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	3302      	adds	r3, #2
 80018b0:	797a      	ldrb	r2, [r7, #5]
 80018b2:	701a      	strb	r2, [r3, #0]
	  ARCHIVE_RS++;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <ADD_ARCHIVE_DATA+0x74>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <ADD_ARCHIVE_DATA+0x74>)
 80018bc:	6013      	str	r3, [r2, #0]
	  if(ARCHIVE_RS >= 1200) ARCHIVE_RS=0;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <ADD_ARCHIVE_DATA+0x74>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80018c6:	db02      	blt.n	80018ce <ADD_ARCHIVE_DATA+0x66>
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <ADD_ARCHIVE_DATA+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20001740 	.word	0x20001740
 80018e0:	20000004 	.word	0x20000004

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0c2      	sub	sp, #264	; 0x108
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ea:	f000 fbd7 	bl	800209c <HAL_Init>

  /* USER CODE BEGIN Init */
  SysTick_Config(84000000/1000);
 80018ee:	483c      	ldr	r0, [pc, #240]	; (80019e0 <main+0xfc>)
 80018f0:	f7ff ff98 	bl	8001824 <SysTick_Config>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f4:	f000 f880 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f8:	f000 f942 	bl	8001b80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80018fc:	f000 f916 	bl	8001b2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001900:	f000 f8e6 	bl	8001ad0 <MX_I2C1_Init>

  //########	Inicjalizacja czujnika	########

  //HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET); //Wyłączenie diody led

  I2C_Write8BIT(ATIME_REG,0); //Ustawienie czasu RGBC
 8001904:	2100      	movs	r1, #0
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fb04 	bl	8000f14 <I2C_Write8BIT>
  I2C_Write8BIT(CONTROL_REG,0); //Ustawienie Gainu
 800190c:	2100      	movs	r1, #0
 800190e:	200f      	movs	r0, #15
 8001910:	f7ff fb00 	bl	8000f14 <I2C_Write8BIT>
  I2C_Write8BIT(ENABLE_REG,3); //Włączenie czujnika
 8001914:	2103      	movs	r1, #3
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fafc 	bl	8000f14 <I2C_Write8BIT>


  //############################################

  USART_start();
 800191c:	f7ff fb9c 	bl	8001058 <USART_start>
  USART_fsend("Hello User!;");
 8001920:	4830      	ldr	r0, [pc, #192]	; (80019e4 <main+0x100>)
 8001922:	f7ff fc1d 	bl	8001160 <USART_fsend>
  char FRAME[MAX_FRAME_SIZE]={""};
 8001926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800192a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	3304      	adds	r3, #4
 8001934:	f240 1201 	movw	r2, #257	; 0x101
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f005 f9d8 	bl	8006cf0 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(BX_haveData()==1)
 8001940:	f7ff fb98 	bl	8001074 <BX_haveData>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	d103      	bne.n	8001952 <main+0x6e>
		  USART_GETFRAME(FRAME);
 800194a:	463b      	mov	r3, r7
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fccb 	bl	80012e8 <USART_GETFRAME>

	  if(strlen(FRAME)!=0){
 8001952:	463b      	mov	r3, r7
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <main+0x8a>
		  ParseCommand(FRAME);
 800195a:	463b      	mov	r3, r7
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd8f 	bl	8001480 <ParseCommand>
		  FRAME[0]=0;
 8001962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
	  }
	  if(LIVE_TOGGLE==1 && HAL_GetTick() % Delay == 0){
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <main+0x104>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d1e4      	bne.n	8001940 <main+0x5c>
 8001976:	f000 fbf7 	bl	8002168 <HAL_GetTick>
 800197a:	4603      	mov	r3, r0
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <main+0x108>)
 800197e:	8812      	ldrh	r2, [r2, #0]
 8001980:	fbb3 f1f2 	udiv	r1, r3, r2
 8001984:	fb01 f202 	mul.w	r2, r1, r2
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1d8      	bne.n	8001940 <main+0x5c>
		  uint8_t r=I2C_GetColor(RED);
 800198e:	2016      	movs	r0, #22
 8001990:	f7ff fb0e 	bl	8000fb0 <I2C_GetColor>
 8001994:	4603      	mov	r3, r0
 8001996:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		  uint8_t g=I2C_GetColor(GREEN);
 800199a:	2018      	movs	r0, #24
 800199c:	f7ff fb08 	bl	8000fb0 <I2C_GetColor>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		  uint8_t b=I2C_GetColor(BLUE);
 80019a6:	201a      	movs	r0, #26
 80019a8:	f7ff fb02 	bl	8000fb0 <I2C_GetColor>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

		  ADD_ARCHIVE_DATA(r,g,b);
 80019b2:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 80019b6:	f897 1106 	ldrb.w	r1, [r7, #262]	; 0x106
 80019ba:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff52 	bl	8001868 <ADD_ARCHIVE_DATA>

		  if(PREVIEW_TOGGLE==1)
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <main+0x10c>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d1b9      	bne.n	8001940 <main+0x5c>
			  USART_fsend("R= %d\tG= %d\tB= %d;",r,g,b);
 80019cc:	f897 1107 	ldrb.w	r1, [r7, #263]	; 0x107
 80019d0:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
 80019d4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <main+0x110>)
 80019da:	f7ff fbc1 	bl	8001160 <USART_fsend>
	  if(BX_haveData()==1)
 80019de:	e7af      	b.n	8001940 <main+0x5c>
 80019e0:	00014820 	.word	0x00014820
 80019e4:	08008550 	.word	0x08008550
 80019e8:	2000173c 	.word	0x2000173c
 80019ec:	20000000 	.word	0x20000000
 80019f0:	2000173d 	.word	0x2000173d
 80019f4:	08008560 	.word	0x08008560

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b094      	sub	sp, #80	; 0x50
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	2230      	movs	r2, #48	; 0x30
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f005 f972 	bl	8006cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <SystemClock_Config+0xd0>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <SystemClock_Config+0xd0>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2c:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <SystemClock_Config+0xd0>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <SystemClock_Config+0xd4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a44:	4a21      	ldr	r2, [pc, #132]	; (8001acc <SystemClock_Config+0xd4>)
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <SystemClock_Config+0xd4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a60:	2310      	movs	r3, #16
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a64:	2302      	movs	r3, #2
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a76:	2304      	movs	r3, #4
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fb14 	bl	80050b0 <HAL_RCC_OscConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a8e:	f000 f8e5 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a92:	230f      	movs	r3, #15
 8001a94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a96:	2302      	movs	r3, #2
 8001a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2102      	movs	r1, #2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 fd76 	bl	80055a0 <HAL_RCC_ClockConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aba:	f000 f8cf 	bl	8001c5c <Error_Handler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3750      	adds	r7, #80	; 0x50
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000

08001ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001ad6:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <MX_I2C1_Init+0x54>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001adc:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_I2C1_Init+0x58>)
 8001ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001aee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_I2C1_Init+0x50>)
 8001b0e:	f000 fe87 	bl	8002820 <HAL_I2C_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b18:	f000 f8a0 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200016a4 	.word	0x200016a4
 8001b24:	40005400 	.word	0x40005400
 8001b28:	000186a0 	.word	0x000186a0

08001b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_USART2_UART_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b64:	f003 ff3c 	bl	80059e0 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b6e:	f000 f875 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200016f8 	.word	0x200016f8
 8001b7c:	40004400 	.word	0x40004400

08001b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_GPIO_Init+0xd4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCSLED_GPIO_Port, TCSLED_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0c:	4812      	ldr	r0, [pc, #72]	; (8001c58 <MX_GPIO_Init+0xd8>)
 8001c0e:	f000 fded 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TCSLED_Pin */
  GPIO_InitStruct.Pin = TCSLED_Pin;
 8001c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TCSLED_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480b      	ldr	r0, [pc, #44]	; (8001c58 <MX_GPIO_Init+0xd8>)
 8001c2c:	f000 fc5a 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c30:	2310      	movs	r3, #16
 8001c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <MX_GPIO_Init+0xd8>)
 8001c46:	f000 fc4d 	bl	80024e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>
	...

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca6:	2007      	movs	r0, #7
 8001ca8:	f000 fb3a 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_I2C_MspInit+0xa4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d13b      	bne.n	8001d52 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_I2C_MspInit+0xa8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_I2C_MspInit+0xa8>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_I2C_MspInit+0xa8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cf6:	23c0      	movs	r3, #192	; 0xc0
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfa:	2312      	movs	r3, #18
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d06:	2304      	movs	r3, #4
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4814      	ldr	r0, [pc, #80]	; (8001d64 <HAL_I2C_MspInit+0xac>)
 8001d12:	f000 fbe7 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_I2C_MspInit+0xa8>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_I2C_MspInit+0xa8>)
 8001d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_I2C_MspInit+0xa8>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	201f      	movs	r0, #31
 8001d38:	f000 fafd 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d3c:	201f      	movs	r0, #31
 8001d3e:	f000 fb16 	bl	800236e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2020      	movs	r0, #32
 8001d48:	f000 faf5 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d4c:	2020      	movs	r0, #32
 8001d4e:	f000 fb0e 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3728      	adds	r7, #40	; 0x28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020400 	.word	0x40020400

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_UART_MspInit+0x94>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d133      	bne.n	8001df2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_UART_MspInit+0x98>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_UART_MspInit+0x98>)
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_UART_MspInit+0x98>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_UART_MspInit+0x98>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_UART_MspInit+0x98>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_UART_MspInit+0x98>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dc2:	230c      	movs	r3, #12
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <HAL_UART_MspInit+0x9c>)
 8001dde:	f000 fb81 	bl	80024e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2026      	movs	r0, #38	; 0x26
 8001de8:	f000 faa5 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dec:	2026      	movs	r0, #38	; 0x26
 8001dee:	f000 fabe 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	; 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40004400 	.word	0x40004400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 f974 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <I2C1_EV_IRQHandler+0x10>)
 8001e62:	f001 f945 	bl	80030f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200016a4 	.word	0x200016a4

08001e70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <I2C1_ER_IRQHandler+0x10>)
 8001e76:	f001 fa8e 	bl	8003396 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200016a4 	.word	0x200016a4

08001e84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <USART2_IRQHandler+0x10>)
 8001e8a:	f003 fe6b 	bl	8005b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200016f8 	.word	0x200016f8

08001e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_kill>:

int _kill(int pid, int sig)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eb2:	f004 ffed 	bl	8006e90 <__errno>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2216      	movs	r2, #22
 8001eba:	601a      	str	r2, [r3, #0]
  return -1;
 8001ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_exit>:

void _exit (int status)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ffe7 	bl	8001ea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eda:	e7fe      	b.n	8001eda <_exit+0x12>

08001edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e00a      	b.n	8001f04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eee:	f3af 8000 	nop.w
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	b2ca      	uxtb	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf0      	blt.n	8001eee <_read+0x12>
  }

  return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e009      	b.n	8001f3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbf1      	blt.n	8001f28 <_write+0x12>
  }
  return len;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_close>:

int _close(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f76:	605a      	str	r2, [r3, #4]
  return 0;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_isatty>:

int _isatty(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <_sbrk+0x5c>)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <_sbrk+0x60>)
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <_sbrk+0x64>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <_sbrk+0x68>)
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <_sbrk+0x64>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d207      	bcs.n	8001ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe8:	f004 ff52 	bl	8006e90 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	220c      	movs	r2, #12
 8001ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	e009      	b.n	800200c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <_sbrk+0x64>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <_sbrk+0x64>)
 8002008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20018000 	.word	0x20018000
 8002018:	00000400 	.word	0x00000400
 800201c:	20001744 	.word	0x20001744
 8002020:	20001898 	.word	0x20001898

08002024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <SystemInit+0x20>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <SystemInit+0x20>)
 8002030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800204e:	490e      	ldr	r1, [pc, #56]	; (8002088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002054:	e002      	b.n	800205c <LoopCopyDataInit>

08002056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205a:	3304      	adds	r3, #4

0800205c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800205c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002060:	d3f9      	bcc.n	8002056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002064:	4c0b      	ldr	r4, [pc, #44]	; (8002094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002068:	e001      	b.n	800206e <LoopFillZerobss>

0800206a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800206c:	3204      	adds	r2, #4

0800206e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002070:	d3fb      	bcc.n	800206a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002072:	f7ff ffd7 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f004 ff11 	bl	8006e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7ff fc33 	bl	80018e4 <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002080:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	20000e7c 	.word	0x20000e7c
  ldr r2, =_sidata
 800208c:	08008780 	.word	0x08008780
  ldr r2, =_sbss
 8002090:	20000e7c 	.word	0x20000e7c
  ldr r4, =_ebss
 8002094:	20001898 	.word	0x20001898

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>
	...

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_Init+0x40>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_Init+0x40>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_Init+0x40>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 f92b 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 f808 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7ff fdca 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x54>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x58>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f943 	bl	800238a <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
 800211c:	f000 f90b 	bl	8002336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_InitTick+0x5c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000e14 	.word	0x20000e14
 8002138:	20000e1c 	.word	0x20000e1c
 800213c:	20000e18 	.word	0x20000e18

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000e1c 	.word	0x20000e1c
 8002164:	20001748 	.word	0x20001748

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20001748 	.word	0x20001748

08002180 <__NVIC_SetPriorityGrouping>:
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <SysTick_Config>:
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f7ff ff8e 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff29 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff3e 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff8e 	bl	8002274 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5d 	bl	8002220 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff31 	bl	80021e4 <__NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffa2 	bl	80022dc <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff feda 	bl	8002168 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d008      	beq.n	80023d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e052      	b.n	800247a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0216 	bic.w	r2, r2, #22
 80023e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <HAL_DMA_Abort+0x62>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0208 	bic.w	r2, r2, #8
 8002412:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0201 	bic.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002424:	e013      	b.n	800244e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002426:	f7ff fe9f 	bl	8002168 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b05      	cmp	r3, #5
 8002432:	d90c      	bls.n	800244e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e015      	b.n	800247a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e4      	bne.n	8002426 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	223f      	movs	r2, #63	; 0x3f
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d004      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e00c      	b.n	80024ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2205      	movs	r2, #5
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d4:	b2db      	uxtb	r3, r3
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e159      	b.n	80027b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 8148 	bne.w	80027ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d005      	beq.n	8002536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	2b02      	cmp	r3, #2
 8002534:	d130      	bne.n	8002598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 0201 	and.w	r2, r3, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d017      	beq.n	80025d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d123      	bne.n	8002628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0203 	and.w	r2, r3, #3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a2 	beq.w	80027ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_GPIO_Init+0x2e8>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_GPIO_Init+0x2e8>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_GPIO_Init+0x2e8>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002686:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_GPIO_Init+0x2ec>)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a49      	ldr	r2, [pc, #292]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d019      	beq.n	80026e6 <HAL_GPIO_Init+0x202>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a48      	ldr	r2, [pc, #288]	; (80027d8 <HAL_GPIO_Init+0x2f4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_GPIO_Init+0x1fe>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a47      	ldr	r2, [pc, #284]	; (80027dc <HAL_GPIO_Init+0x2f8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00d      	beq.n	80026de <HAL_GPIO_Init+0x1fa>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a46      	ldr	r2, [pc, #280]	; (80027e0 <HAL_GPIO_Init+0x2fc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <HAL_GPIO_Init+0x1f6>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a45      	ldr	r2, [pc, #276]	; (80027e4 <HAL_GPIO_Init+0x300>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_GPIO_Init+0x1f2>
 80026d2:	2304      	movs	r3, #4
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026e6:	2300      	movs	r3, #0
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f8:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_GPIO_Init+0x2ec>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272a:	4a2f      	ldr	r2, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x304>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <HAL_GPIO_Init+0x304>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277e:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_GPIO_Init+0x304>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	f67f aea2 	bls.w	8002500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40013c00 	.word	0x40013c00

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e12b      	b.n	8002a8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff fa36 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002884:	f003 f884 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 8002888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4a81      	ldr	r2, [pc, #516]	; (8002a94 <HAL_I2C_Init+0x274>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d807      	bhi.n	80028a4 <HAL_I2C_Init+0x84>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a80      	ldr	r2, [pc, #512]	; (8002a98 <HAL_I2C_Init+0x278>)
 8002898:	4293      	cmp	r3, r2
 800289a:	bf94      	ite	ls
 800289c:	2301      	movls	r3, #1
 800289e:	2300      	movhi	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e006      	b.n	80028b2 <HAL_I2C_Init+0x92>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a7d      	ldr	r2, [pc, #500]	; (8002a9c <HAL_I2C_Init+0x27c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0e7      	b.n	8002a8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a78      	ldr	r2, [pc, #480]	; (8002aa0 <HAL_I2C_Init+0x280>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0c9b      	lsrs	r3, r3, #18
 80028c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4a6a      	ldr	r2, [pc, #424]	; (8002a94 <HAL_I2C_Init+0x274>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d802      	bhi.n	80028f4 <HAL_I2C_Init+0xd4>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3301      	adds	r3, #1
 80028f2:	e009      	b.n	8002908 <HAL_I2C_Init+0xe8>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	4a69      	ldr	r2, [pc, #420]	; (8002aa4 <HAL_I2C_Init+0x284>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	3301      	adds	r3, #1
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	430b      	orrs	r3, r1
 800290e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800291a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	495c      	ldr	r1, [pc, #368]	; (8002a94 <HAL_I2C_Init+0x274>)
 8002924:	428b      	cmp	r3, r1
 8002926:	d819      	bhi.n	800295c <HAL_I2C_Init+0x13c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1e59      	subs	r1, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fbb1 f3f3 	udiv	r3, r1, r3
 8002936:	1c59      	adds	r1, r3, #1
 8002938:	f640 73fc 	movw	r3, #4092	; 0xffc
 800293c:	400b      	ands	r3, r1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_I2C_Init+0x138>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e59      	subs	r1, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002950:	3301      	adds	r3, #1
 8002952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002956:	e051      	b.n	80029fc <HAL_I2C_Init+0x1dc>
 8002958:	2304      	movs	r3, #4
 800295a:	e04f      	b.n	80029fc <HAL_I2C_Init+0x1dc>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d111      	bne.n	8002988 <HAL_I2C_Init+0x168>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1e58      	subs	r0, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	440b      	add	r3, r1
 8002972:	fbb0 f3f3 	udiv	r3, r0, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e012      	b.n	80029ae <HAL_I2C_Init+0x18e>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	0099      	lsls	r1, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	fbb0 f3f3 	udiv	r3, r0, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Init+0x196>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e022      	b.n	80029fc <HAL_I2C_Init+0x1dc>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <HAL_I2C_Init+0x1bc>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1e58      	subs	r0, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	440b      	add	r3, r1
 80029cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029da:	e00f      	b.n	80029fc <HAL_I2C_Init+0x1dc>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e58      	subs	r0, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	0099      	lsls	r1, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f2:	3301      	adds	r3, #1
 80029f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	6809      	ldr	r1, [r1, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69da      	ldr	r2, [r3, #28]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6911      	ldr	r1, [r2, #16]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	4311      	orrs	r1, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	000186a0 	.word	0x000186a0
 8002a98:	001e847f 	.word	0x001e847f
 8002a9c:	003d08ff 	.word	0x003d08ff
 8002aa0:	431bde83 	.word	0x431bde83
 8002aa4:	10624dd3 	.word	0x10624dd3

08002aa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff fb54 	bl	8002168 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	f040 80e0 	bne.w	8002c90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4970      	ldr	r1, [pc, #448]	; (8002c9c <HAL_I2C_Master_Transmit+0x1f4>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f002 f8be 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e0d3      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_Master_Transmit+0x50>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e0cc      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d007      	beq.n	8002b1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	893a      	ldrh	r2, [r7, #8]
 8002b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a50      	ldr	r2, [pc, #320]	; (8002ca0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b60:	8979      	ldrh	r1, [r7, #10]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f001 fe80 	bl	800486c <I2C_MasterRequestWrite>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e08d      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b8c:	e066      	b.n	8002c5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f002 f938 	bl	8004e08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06b      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_I2C_Master_Transmit+0x188>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d017      	beq.n	8002c30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	6a39      	ldr	r1, [r7, #32]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f002 f928 	bl	8004e8a <I2C_WaitOnBTFFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00d      	beq.n	8002c5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d107      	bne.n	8002c58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e01a      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d194      	bne.n	8002b8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e000      	b.n	8002c92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
  }
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	00100002 	.word	0x00100002
 8002ca0:	ffff0000 	.word	0xffff0000

08002ca4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	; 0x30
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	817b      	strh	r3, [r7, #10]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff fa56 	bl	8002168 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 820b 	bne.w	80030e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	2319      	movs	r3, #25
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	497c      	ldr	r1, [pc, #496]	; (8002ec8 <HAL_I2C_Master_Receive+0x224>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f001 ffc0 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e1fe      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2C_Master_Receive+0x50>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e1f7      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d007      	beq.n	8002d1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2222      	movs	r2, #34	; 0x22
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2210      	movs	r2, #16
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	893a      	ldrh	r2, [r7, #8]
 8002d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a5c      	ldr	r2, [pc, #368]	; (8002ecc <HAL_I2C_Master_Receive+0x228>)
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f001 fe04 	bl	8004970 <I2C_MasterRequestRead>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e1b8      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d113      	bne.n	8002da2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e18c      	b.n	80030bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d11b      	bne.n	8002de2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e16c      	b.n	80030bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d11b      	bne.n	8002e22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	e14c      	b.n	80030bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e48:	e138      	b.n	80030bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	f200 80f1 	bhi.w	8003036 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d123      	bne.n	8002ea4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f002 f885 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e139      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ea2:	e10b      	b.n	80030bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d14e      	bne.n	8002f4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4906      	ldr	r1, [pc, #24]	; (8002ed0 <HAL_I2C_Master_Receive+0x22c>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f001 fed0 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e10e      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
 8002ec6:	bf00      	nop
 8002ec8:	00100002 	.word	0x00100002
 8002ecc:	ffff0000 	.word	0xffff0000
 8002ed0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f48:	e0b8      	b.n	80030bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	2200      	movs	r2, #0
 8002f52:	4966      	ldr	r1, [pc, #408]	; (80030ec <HAL_I2C_Master_Receive+0x448>)
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f001 fe81 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0bf      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	2200      	movs	r2, #0
 8002fae:	494f      	ldr	r1, [pc, #316]	; (80030ec <HAL_I2C_Master_Receive+0x448>)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f001 fe53 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e091      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003034:	e042      	b.n	80030bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f001 ff98 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e04c      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b04      	cmp	r3, #4
 8003088:	d118      	bne.n	80030bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f47f aec2 	bne.w	8002e4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3728      	adds	r7, #40	; 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	00010004 	.word	0x00010004

080030f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003110:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d003      	beq.n	8003128 <HAL_I2C_EV_IRQHandler+0x38>
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	f040 80b1 	bne.w	800328a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10d      	bne.n	800315e <HAL_I2C_EV_IRQHandler+0x6e>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003148:	d003      	beq.n	8003152 <HAL_I2C_EV_IRQHandler+0x62>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003150:	d101      	bne.n	8003156 <HAL_I2C_EV_IRQHandler+0x66>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_I2C_EV_IRQHandler+0x68>
 8003156:	2300      	movs	r3, #0
 8003158:	2b01      	cmp	r3, #1
 800315a:	f000 8114 	beq.w	8003386 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00b      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x90>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316e:	2b00      	cmp	r3, #0
 8003170:	d006      	beq.n	8003180 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f001 ff81 	bl	800507a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fd5e 	bl	8003c3a <I2C_Master_SB>
 800317e:	e083      	b.n	8003288 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_I2C_EV_IRQHandler+0xac>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fdd6 	bl	8003d46 <I2C_Master_ADD10>
 800319a:	e075      	b.n	8003288 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_I2C_EV_IRQHandler+0xc8>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fdf2 	bl	8003d9a <I2C_Master_ADDR>
 80031b6:	e067      	b.n	8003288 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d036      	beq.n	8003230 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d0:	f000 80db 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0x10a>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0x10a>
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f9d6 	bl	80035a4 <I2C_MasterTransmit_TXE>
 80031f8:	e046      	b.n	8003288 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80c2 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x29a>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80bc 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003212:	7bbb      	ldrb	r3, [r7, #14]
 8003214:	2b21      	cmp	r3, #33	; 0x21
 8003216:	d103      	bne.n	8003220 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fa5f 	bl	80036dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321e:	e0b4      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	f040 80b1 	bne.w	800338a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 facd 	bl	80037c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322e:	e0ac      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323e:	f000 80a4 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0x178>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_I2C_EV_IRQHandler+0x178>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d103      	bne.n	8003268 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fb45 	bl	80038f0 <I2C_MasterReceive_RXNE>
 8003266:	e00f      	b.n	8003288 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 808b 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x29a>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8085 	beq.w	800338a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fbf0 	bl	8003a66 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	e080      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x29a>
 8003288:	e07f      	b.n	800338a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e007      	b.n	80032ac <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d011      	beq.n	80032da <HAL_I2C_EV_IRQHandler+0x1ea>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00c      	beq.n	80032da <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 ffb0 	bl	8004238 <I2C_Slave_ADDR>
 80032d8:	e05a      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0x206>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 ffea 	bl	80042c8 <I2C_Slave_STOPF>
 80032f4:	e04c      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	2b21      	cmp	r3, #33	; 0x21
 80032fa:	d002      	beq.n	8003302 <HAL_I2C_EV_IRQHandler+0x212>
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	2b29      	cmp	r3, #41	; 0x29
 8003300:	d120      	bne.n	8003344 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <HAL_I2C_EV_IRQHandler+0x238>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <HAL_I2C_EV_IRQHandler+0x238>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d103      	bne.n	8003328 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fecb 	bl	80040bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003326:	e032      	b.n	800338e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d02d      	beq.n	800338e <HAL_I2C_EV_IRQHandler+0x29e>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003338:	2b00      	cmp	r3, #0
 800333a:	d028      	beq.n	800338e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fefa 	bl	8004136 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003342:	e024      	b.n	800338e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <HAL_I2C_EV_IRQHandler+0x27a>
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_I2C_EV_IRQHandler+0x27a>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 ff08 	bl	8004178 <I2C_SlaveReceive_RXNE>
 8003368:	e012      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 ff38 	bl	80041f4 <I2C_SlaveReceive_BTF>
 8003384:	e004      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b08a      	sub	sp, #40	; 0x28
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0x4a>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033de:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <HAL_I2C_ER_IRQHandler+0x70>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	f043 0302 	orr.w	r3, r3, #2
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003404:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340c:	2b00      	cmp	r3, #0
 800340e:	d03e      	beq.n	800348e <HAL_I2C_ER_IRQHandler+0xf8>
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d039      	beq.n	800348e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800341a:	7efb      	ldrb	r3, [r7, #27]
 800341c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003434:	7ebb      	ldrb	r3, [r7, #26]
 8003436:	2b20      	cmp	r3, #32
 8003438:	d112      	bne.n	8003460 <HAL_I2C_ER_IRQHandler+0xca>
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10f      	bne.n	8003460 <HAL_I2C_ER_IRQHandler+0xca>
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b21      	cmp	r3, #33	; 0x21
 8003444:	d008      	beq.n	8003458 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	2b29      	cmp	r3, #41	; 0x29
 800344a:	d005      	beq.n	8003458 <HAL_I2C_ER_IRQHandler+0xc2>
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b28      	cmp	r3, #40	; 0x28
 8003450:	d106      	bne.n	8003460 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b21      	cmp	r3, #33	; 0x21
 8003456:	d103      	bne.n	8003460 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f001 f865 	bl	8004528 <I2C_Slave_AF>
 800345e:	e016      	b.n	800348e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003468:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003472:	7efb      	ldrb	r3, [r7, #27]
 8003474:	2b10      	cmp	r3, #16
 8003476:	d002      	beq.n	800347e <HAL_I2C_ER_IRQHandler+0xe8>
 8003478:	7efb      	ldrb	r3, [r7, #27]
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d107      	bne.n	800348e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <HAL_I2C_ER_IRQHandler+0x11e>
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80034b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d008      	beq.n	80034cc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f001 f89e 	bl	8004608 <I2C_ITError>
  }
}
 80034cc:	bf00      	nop
 80034ce:	3728      	adds	r7, #40	; 0x28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
 8003530:	4613      	mov	r3, r2
 8003532:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d150      	bne.n	800366c <I2C_MasterTransmit_TXE+0xc8>
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b21      	cmp	r3, #33	; 0x21
 80035ce:	d14d      	bne.n	800366c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d01d      	beq.n	8003612 <I2C_MasterTransmit_TXE+0x6e>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d01a      	beq.n	8003612 <I2C_MasterTransmit_TXE+0x6e>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e2:	d016      	beq.n	8003612 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2211      	movs	r2, #17
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ff62 	bl	80034d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003610:	e060      	b.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003620:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d107      	bne.n	800365c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff7d 	bl	8003554 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800365a:	e03b      	b.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff35 	bl	80034d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800366a:	e033      	b.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b21      	cmp	r3, #33	; 0x21
 8003670:	d005      	beq.n	800367e <I2C_MasterTransmit_TXE+0xda>
 8003672:	7bbb      	ldrb	r3, [r7, #14]
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d12d      	bne.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b22      	cmp	r3, #34	; 0x22
 800367c:	d12a      	bne.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d108      	bne.n	800369a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003696:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003698:	e01c      	b.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d103      	bne.n	80036ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f88e 	bl	80037c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80036ac:	e012      	b.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036d2:	e7ff      	b.n	80036d4 <I2C_MasterTransmit_TXE+0x130>
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b21      	cmp	r3, #33	; 0x21
 80036f4:	d164      	bne.n	80037c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003724:	e04c      	b.n	80037c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d01d      	beq.n	8003768 <I2C_MasterTransmit_BTF+0x8c>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d01a      	beq.n	8003768 <I2C_MasterTransmit_BTF+0x8c>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003738:	d016      	beq.n	8003768 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003748:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2211      	movs	r2, #17
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff feb7 	bl	80034d4 <HAL_I2C_MasterTxCpltCallback>
}
 8003766:	e02b      	b.n	80037c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003776:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003786:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d107      	bne.n	80037b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fed2 	bl	8003554 <HAL_I2C_MemTxCpltCallback>
}
 80037b0:	e006      	b.n	80037c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fe8a 	bl	80034d4 <HAL_I2C_MasterTxCpltCallback>
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d11d      	bne.n	800381c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10b      	bne.n	8003800 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80037fe:	e073      	b.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	b29b      	uxth	r3, r3
 8003806:	121b      	asrs	r3, r3, #8
 8003808:	b2da      	uxtb	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	651a      	str	r2, [r3, #80]	; 0x50
}
 800381a:	e065      	b.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003820:	2b01      	cmp	r3, #1
 8003822:	d10b      	bne.n	800383c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003828:	b2da      	uxtb	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
}
 800383a:	e055      	b.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	2b02      	cmp	r3, #2
 8003842:	d151      	bne.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b22      	cmp	r3, #34	; 0x22
 8003848:	d10d      	bne.n	8003866 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003858:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003864:	e040      	b.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d015      	beq.n	800389c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b21      	cmp	r3, #33	; 0x21
 8003874:	d112      	bne.n	800389c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800389a:	e025      	b.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d120      	bne.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b21      	cmp	r3, #33	; 0x21
 80038aa:	d11d      	bne.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe36 	bl	8003554 <HAL_I2C_MemTxCpltCallback>
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b22      	cmp	r3, #34	; 0x22
 8003902:	f040 80ac 	bne.w	8003a5e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d921      	bls.n	8003958 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b03      	cmp	r3, #3
 8003942:	f040 808c 	bne.w	8003a5e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003954:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003956:	e082      	b.n	8003a5e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	2b02      	cmp	r3, #2
 800395e:	d075      	beq.n	8003a4c <I2C_MasterReceive_RXNE+0x15c>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d002      	beq.n	800396c <I2C_MasterReceive_RXNE+0x7c>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d16f      	bne.n	8003a4c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f001 facd 	bl	8004f0c <I2C_WaitOnSTOPRequestThroughIT>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d142      	bne.n	80039fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003986:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003996:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d10a      	bne.n	80039e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fdc1 	bl	8003568 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039e6:	e03a      	b.n	8003a5e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2212      	movs	r2, #18
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fd76 	bl	80034e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039fc:	e02f      	b.n	8003a5e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a0c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fd99 	bl	800357c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a4a:	e008      	b.n	8003a5e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5a:	605a      	str	r2, [r3, #4]
}
 8003a5c:	e7ff      	b.n	8003a5e <I2C_MasterReceive_RXNE+0x16e>
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d11b      	bne.n	8003ab6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003ab4:	e0bd      	b.n	8003c32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d129      	bne.n	8003b14 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ace:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d00a      	beq.n	8003aec <I2C_MasterReceive_BTF+0x86>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d007      	beq.n	8003aec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b12:	e08e      	b.n	8003c32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d176      	bne.n	8003c0c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d002      	beq.n	8003b2a <I2C_MasterReceive_BTF+0xc4>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d108      	bne.n	8003b3c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e019      	b.n	8003b70 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d002      	beq.n	8003b48 <I2C_MasterReceive_BTF+0xe2>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d108      	bne.n	8003b5a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e00a      	b.n	8003b70 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d007      	beq.n	8003b70 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003bca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d10a      	bne.n	8003bf6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fcba 	bl	8003568 <HAL_I2C_MemRxCpltCallback>
}
 8003bf4:	e01d      	b.n	8003c32 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2212      	movs	r2, #18
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fc6f 	bl	80034e8 <HAL_I2C_MasterRxCpltCallback>
}
 8003c0a:	e012      	b.n	8003c32 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d117      	bne.n	8003c7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c68:	e067      	b.n	8003d3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
}
 8003c7c:	e05d      	b.n	8003d3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c86:	d133      	bne.n	8003cf0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b21      	cmp	r3, #33	; 0x21
 8003c92:	d109      	bne.n	8003ca8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca4:	611a      	str	r2, [r3, #16]
 8003ca6:	e008      	b.n	8003cba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <I2C_Master_SB+0x92>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d108      	bne.n	8003cde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d032      	beq.n	8003d3a <I2C_Master_SB+0x100>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d02d      	beq.n	8003d3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cec:	605a      	str	r2, [r3, #4]
}
 8003cee:	e024      	b.n	8003d3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10e      	bne.n	8003d16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	11db      	asrs	r3, r3, #7
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f063 030f 	orn	r3, r3, #15
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]
}
 8003d14:	e011      	b.n	8003d3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10d      	bne.n	8003d3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	11db      	asrs	r3, r3, #7
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 0306 	and.w	r3, r3, #6
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f063 030e 	orn	r3, r3, #14
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	611a      	str	r2, [r3, #16]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <I2C_Master_ADD10+0x26>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <I2C_Master_ADD10+0x48>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8c:	605a      	str	r2, [r3, #4]
  }
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b091      	sub	sp, #68	; 0x44
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b22      	cmp	r3, #34	; 0x22
 8003dc2:	f040 8169 	bne.w	8004098 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10f      	bne.n	8003dee <I2C_Master_ADDR+0x54>
 8003dce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d10b      	bne.n	8003dee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	633b      	str	r3, [r7, #48]	; 0x30
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	e160      	b.n	80040b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11d      	bne.n	8003e32 <I2C_Master_ADDR+0x98>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dfe:	d118      	bne.n	8003e32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e00:	2300      	movs	r3, #0
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	651a      	str	r2, [r3, #80]	; 0x50
 8003e30:	e13e      	b.n	80040b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d113      	bne.n	8003e64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e115      	b.n	8004090 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	f040 808a 	bne.w	8003f84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e76:	d137      	bne.n	8003ee8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e96:	d113      	bne.n	8003ec0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	e0e7      	b.n	8004090 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	623b      	str	r3, [r7, #32]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e0d3      	b.n	8004090 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d02e      	beq.n	8003f4c <I2C_Master_ADDR+0x1b2>
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d02b      	beq.n	8003f4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	2b12      	cmp	r3, #18
 8003ef8:	d102      	bne.n	8003f00 <I2C_Master_ADDR+0x166>
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d125      	bne.n	8003f4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d00e      	beq.n	8003f24 <I2C_Master_ADDR+0x18a>
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d00b      	beq.n	8003f24 <I2C_Master_ADDR+0x18a>
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d008      	beq.n	8003f24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	e007      	b.n	8003f34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	e0a1      	b.n	8004090 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e085      	b.n	8004090 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d14d      	bne.n	800402a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d016      	beq.n	8003fc2 <I2C_Master_ADDR+0x228>
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d013      	beq.n	8003fc2 <I2C_Master_ADDR+0x228>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d010      	beq.n	8003fc2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e007      	b.n	8003fd2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fd0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe0:	d117      	bne.n	8004012 <I2C_Master_ADDR+0x278>
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fe8:	d00b      	beq.n	8004002 <I2C_Master_ADDR+0x268>
 8003fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d008      	beq.n	8004002 <I2C_Master_ADDR+0x268>
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d005      	beq.n	8004002 <I2C_Master_ADDR+0x268>
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d002      	beq.n	8004002 <I2C_Master_ADDR+0x268>
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d107      	bne.n	8004012 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004010:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	e032      	b.n	8004090 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004038:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004048:	d117      	bne.n	800407a <I2C_Master_ADDR+0x2e0>
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004050:	d00b      	beq.n	800406a <I2C_Master_ADDR+0x2d0>
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	2b01      	cmp	r3, #1
 8004056:	d008      	beq.n	800406a <I2C_Master_ADDR+0x2d0>
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b08      	cmp	r3, #8
 800405c:	d005      	beq.n	800406a <I2C_Master_ADDR+0x2d0>
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	2b10      	cmp	r3, #16
 8004062:	d002      	beq.n	800406a <I2C_Master_ADDR+0x2d0>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	2b20      	cmp	r3, #32
 8004068:	d107      	bne.n	800407a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004078:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004096:	e00b      	b.n	80040b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
}
 80040ae:	e7ff      	b.n	80040b0 <I2C_Master_ADDR+0x316>
 80040b0:	bf00      	nop
 80040b2:	3744      	adds	r7, #68	; 0x44
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02b      	beq.n	800412e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	781a      	ldrb	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d114      	bne.n	800412e <I2C_SlaveTransmit_TXE+0x72>
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b29      	cmp	r3, #41	; 0x29
 8004108:	d111      	bne.n	800412e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2221      	movs	r2, #33	; 0x21
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2228      	movs	r2, #40	; 0x28
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff f9e7 	bl	80034fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d011      	beq.n	800416c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004186:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02c      	beq.n	80041ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d114      	bne.n	80041ec <I2C_SlaveReceive_RXNE+0x74>
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b2a      	cmp	r3, #42	; 0x2a
 80041c6:	d111      	bne.n	80041ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2222      	movs	r2, #34	; 0x22
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2228      	movs	r2, #40	; 0x28
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff f992 	bl	8003510 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004252:	2b28      	cmp	r3, #40	; 0x28
 8004254:	d125      	bne.n	80042a2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004264:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	81bb      	strh	r3, [r7, #12]
 8004284:	e002      	b.n	800428c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004294:	89ba      	ldrh	r2, [r7, #12]
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff f942 	bl	8003524 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042a0:	e00e      	b.n	80042c0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80042e8:	2300      	movs	r3, #0
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004314:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004324:	d172      	bne.n	800440c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b22      	cmp	r3, #34	; 0x22
 800432a:	d002      	beq.n	8004332 <I2C_Slave_STOPF+0x6a>
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b2a      	cmp	r3, #42	; 0x2a
 8004330:	d135      	bne.n	800439e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0204 	orr.w	r2, r3, #4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004364:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f8ab 	bl	80024c6 <HAL_DMA_GetState>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d049      	beq.n	800440a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4a69      	ldr	r2, [pc, #420]	; (8004520 <I2C_Slave_STOPF+0x258>)
 800437c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe f87d 	bl	8002482 <HAL_DMA_Abort_IT>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03d      	beq.n	800440a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004398:	4610      	mov	r0, r2
 800439a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800439c:	e035      	b.n	800440a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe f875 	bl	80024c6 <HAL_DMA_GetState>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d014      	beq.n	800440c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	4a4e      	ldr	r2, [pc, #312]	; (8004520 <I2C_Slave_STOPF+0x258>)
 80043e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f847 	bl	8002482 <HAL_DMA_Abort_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
 8004408:	e000      	b.n	800440c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800440a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d03e      	beq.n	8004494 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d112      	bne.n	800444a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d112      	bne.n	800447e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f043 0204 	orr.w	r2, r3, #4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f8b3 	bl	8004608 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044a2:	e039      	b.n	8004518 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b2a      	cmp	r3, #42	; 0x2a
 80044a8:	d109      	bne.n	80044be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2228      	movs	r2, #40	; 0x28
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff f829 	bl	8003510 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b28      	cmp	r3, #40	; 0x28
 80044c8:	d111      	bne.n	80044ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a15      	ldr	r2, [pc, #84]	; (8004524 <I2C_Slave_STOPF+0x25c>)
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff f82a 	bl	8003540 <HAL_I2C_ListenCpltCallback>
}
 80044ec:	e014      	b.n	8004518 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	2b22      	cmp	r3, #34	; 0x22
 80044f4:	d002      	beq.n	80044fc <I2C_Slave_STOPF+0x234>
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b22      	cmp	r3, #34	; 0x22
 80044fa:	d10d      	bne.n	8004518 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fe fffc 	bl	8003510 <HAL_I2C_SlaveRxCpltCallback>
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	08004b0d 	.word	0x08004b0d
 8004524:	ffff0000 	.word	0xffff0000

08004528 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d002      	beq.n	800454a <I2C_Slave_AF+0x22>
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b20      	cmp	r3, #32
 8004548:	d129      	bne.n	800459e <I2C_Slave_AF+0x76>
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b28      	cmp	r3, #40	; 0x28
 800454e:	d126      	bne.n	800459e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <I2C_Slave_AF+0xdc>)
 8004554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004564:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800456e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fe ffd2 	bl	8003540 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800459c:	e02e      	b.n	80045fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b21      	cmp	r3, #33	; 0x21
 80045a2:	d126      	bne.n	80045f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a17      	ldr	r2, [pc, #92]	; (8004604 <I2C_Slave_AF+0xdc>)
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2221      	movs	r2, #33	; 0x21
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fe ff86 	bl	80034fc <HAL_I2C_SlaveTxCpltCallback>
}
 80045f0:	e004      	b.n	80045fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045fa:	615a      	str	r2, [r3, #20]
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	ffff0000 	.word	0xffff0000

08004608 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	2b10      	cmp	r3, #16
 8004624:	d002      	beq.n	800462c <I2C_ITError+0x24>
 8004626:	7bbb      	ldrb	r3, [r7, #14]
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d10a      	bne.n	8004642 <I2C_ITError+0x3a>
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b22      	cmp	r3, #34	; 0x22
 8004630:	d107      	bne.n	8004642 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004640:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004648:	2b28      	cmp	r3, #40	; 0x28
 800464a:	d107      	bne.n	800465c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2228      	movs	r2, #40	; 0x28
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800465a:	e015      	b.n	8004688 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466a:	d00a      	beq.n	8004682 <I2C_ITError+0x7a>
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b60      	cmp	r3, #96	; 0x60
 8004670:	d007      	beq.n	8004682 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004696:	d162      	bne.n	800475e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d020      	beq.n	80046f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	4a6a      	ldr	r2, [pc, #424]	; (8004864 <I2C_ITError+0x25c>)
 80046bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd fedd 	bl	8002482 <HAL_DMA_Abort_IT>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8089 	beq.w	80047e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f2:	4610      	mov	r0, r2
 80046f4:	4798      	blx	r3
 80046f6:	e074      	b.n	80047e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	4a59      	ldr	r2, [pc, #356]	; (8004864 <I2C_ITError+0x25c>)
 80046fe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	4618      	mov	r0, r3
 8004706:	f7fd febc 	bl	8002482 <HAL_DMA_Abort_IT>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d068      	beq.n	80047e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b40      	cmp	r3, #64	; 0x40
 800471c:	d10b      	bne.n	8004736 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004758:	4610      	mov	r0, r2
 800475a:	4798      	blx	r3
 800475c:	e041      	b.n	80047e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b60      	cmp	r3, #96	; 0x60
 8004768:	d125      	bne.n	80047b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d10b      	bne.n	800479e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fe feee 	bl	8003590 <HAL_I2C_AbortCpltCallback>
 80047b4:	e015      	b.n	80047e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d10b      	bne.n	80047dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fe fecd 	bl	800357c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10e      	bne.n	8004810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800481e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d113      	bne.n	800485c <I2C_ITError+0x254>
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b28      	cmp	r3, #40	; 0x28
 8004838:	d110      	bne.n	800485c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <I2C_ITError+0x260>)
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fe fe72 	bl	8003540 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	08004b0d 	.word	0x08004b0d
 8004868:	ffff0000 	.word	0xffff0000

0800486c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	460b      	mov	r3, r1
 800487a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d006      	beq.n	8004896 <I2C_MasterRequestWrite+0x2a>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d003      	beq.n	8004896 <I2C_MasterRequestWrite+0x2a>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004894:	d108      	bne.n	80048a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e00b      	b.n	80048c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b12      	cmp	r3, #18
 80048ae:	d107      	bne.n	80048c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f9c5 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	d103      	bne.n	80048f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e035      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048fc:	d108      	bne.n	8004910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800490c:	611a      	str	r2, [r3, #16]
 800490e:	e01b      	b.n	8004948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004910:	897b      	ldrh	r3, [r7, #10]
 8004912:	11db      	asrs	r3, r3, #7
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f063 030f 	orn	r3, r3, #15
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <I2C_MasterRequestWrite+0xfc>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f9eb 	bl	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e010      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800493e:	897b      	ldrh	r3, [r7, #10]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4907      	ldr	r1, [pc, #28]	; (800496c <I2C_MasterRequestWrite+0x100>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f9db 	bl	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	00010008 	.word	0x00010008
 800496c:	00010002 	.word	0x00010002

08004970 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	460b      	mov	r3, r1
 800497e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004994:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d006      	beq.n	80049aa <I2C_MasterRequestRead+0x3a>
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d003      	beq.n	80049aa <I2C_MasterRequestRead+0x3a>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a8:	d108      	bne.n	80049bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e00b      	b.n	80049d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	2b11      	cmp	r3, #17
 80049c2:	d107      	bne.n	80049d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f93b 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fa:	d103      	bne.n	8004a04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e079      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a10:	d108      	bne.n	8004a24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]
 8004a22:	e05f      	b.n	8004ae4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a24:	897b      	ldrh	r3, [r7, #10]
 8004a26:	11db      	asrs	r3, r3, #7
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0306 	and.w	r3, r3, #6
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f063 030f 	orn	r3, r3, #15
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4930      	ldr	r1, [pc, #192]	; (8004b04 <I2C_MasterRequestRead+0x194>)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f961 	bl	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e054      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a52:	897b      	ldrh	r3, [r7, #10]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4929      	ldr	r1, [pc, #164]	; (8004b08 <I2C_MasterRequestRead+0x198>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f951 	bl	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e044      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f8d9 	bl	8004c5c <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abe:	d103      	bne.n	8004ac8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e017      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004acc:	897b      	ldrh	r3, [r7, #10]
 8004ace:	11db      	asrs	r3, r3, #7
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f063 030e 	orn	r3, r3, #14
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4907      	ldr	r1, [pc, #28]	; (8004b08 <I2C_MasterRequestRead+0x198>)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f90d 	bl	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	00010008 	.word	0x00010008
 8004b08:	00010002 	.word	0x00010002

08004b0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b26:	4b4b      	ldr	r3, [pc, #300]	; (8004c54 <I2C_DMAAbort+0x148>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	08db      	lsrs	r3, r3, #3
 8004b2c:	4a4a      	ldr	r2, [pc, #296]	; (8004c58 <I2C_DMAAbort+0x14c>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0a1a      	lsrs	r2, r3, #8
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	00da      	lsls	r2, r3, #3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b52:	e00a      	b.n	8004b6a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b68:	d0ea      	beq.n	8004b40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	2200      	movs	r2, #0
 8004b78:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	2200      	movs	r2, #0
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bac:	2200      	movs	r2, #0
 8004bae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b60      	cmp	r3, #96	; 0x60
 8004bda:	d10e      	bne.n	8004bfa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	f7fe fccc 	bl	8003590 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bf8:	e027      	b.n	8004c4a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c00:	2b28      	cmp	r3, #40	; 0x28
 8004c02:	d117      	bne.n	8004c34 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2228      	movs	r2, #40	; 0x28
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c32:	e007      	b.n	8004c44 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f7fe fc99 	bl	800357c <HAL_I2C_ErrorCallback>
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000e14 	.word	0x20000e14
 8004c58:	14f8b589 	.word	0x14f8b589

08004c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c6c:	e025      	b.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d021      	beq.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fd fa77 	bl	8002168 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d116      	bne.n	8004cba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0220 	orr.w	r2, r3, #32
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e023      	b.n	8004d02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d10d      	bne.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bf0c      	ite	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	2300      	movne	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	e00c      	b.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4013      	ands	r3, r2
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf0c      	ite	eq
 8004cf2:	2301      	moveq	r3, #1
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d0b6      	beq.n	8004c6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d18:	e051      	b.n	8004dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d28:	d123      	bne.n	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 0204 	orr.w	r2, r3, #4
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e046      	b.n	8004e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d021      	beq.n	8004dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fd f9f5 	bl	8002168 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d116      	bne.n	8004dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f043 0220 	orr.w	r2, r3, #32
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e020      	b.n	8004e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d10c      	bne.n	8004de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	e00b      	b.n	8004dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	43da      	mvns	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4013      	ands	r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d18d      	bne.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e14:	e02d      	b.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f900 	bl	800501c <I2C_IsAcknowledgeFailed>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e02d      	b.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d021      	beq.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2e:	f7fd f99b 	bl	8002168 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d116      	bne.n	8004e72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e007      	b.n	8004e82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d1ca      	bne.n	8004e16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e96:	e02d      	b.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f8bf 	bl	800501c <I2C_IsAcknowledgeFailed>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e02d      	b.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d021      	beq.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb0:	f7fd f95a 	bl	8002168 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d302      	bcc.n	8004ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d116      	bne.n	8004ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e007      	b.n	8004f04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d1ca      	bne.n	8004e98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f18:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f20:	fba2 2303 	umull	r2, r3, r2, r3
 8004f24:	0a1a      	lsrs	r2, r3, #8
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d107      	bne.n	8004f4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e008      	b.n	8004f5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f58:	d0e9      	beq.n	8004f2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000e14 	.word	0x20000e14
 8004f6c:	14f8b589 	.word	0x14f8b589

08004f70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f7c:	e042      	b.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d119      	bne.n	8004fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e029      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fd f8d2 	bl	8002168 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e007      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d1b5      	bne.n	8004f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005032:	d11b      	bne.n	800506c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800503c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f043 0204 	orr.w	r2, r3, #4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800508a:	d103      	bne.n	8005094 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005092:	e007      	b.n	80050a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800509c:	d102      	bne.n	80050a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2208      	movs	r2, #8
 80050a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e267      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d075      	beq.n	80051ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ce:	4b88      	ldr	r3, [pc, #544]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d00c      	beq.n	80050f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050da:	4b85      	ldr	r3, [pc, #532]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d112      	bne.n	800510c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e6:	4b82      	ldr	r3, [pc, #520]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f2:	d10b      	bne.n	800510c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	4b7e      	ldr	r3, [pc, #504]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05b      	beq.n	80051b8 <HAL_RCC_OscConfig+0x108>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d157      	bne.n	80051b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e242      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d106      	bne.n	8005124 <HAL_RCC_OscConfig+0x74>
 8005116:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a75      	ldr	r2, [pc, #468]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xb0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0x98>
 800512e:	4b70      	ldr	r3, [pc, #448]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a6f      	ldr	r2, [pc, #444]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b6d      	ldr	r3, [pc, #436]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a6c      	ldr	r2, [pc, #432]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xb0>
 8005148:	4b69      	ldr	r3, [pc, #420]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a68      	ldr	r2, [pc, #416]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b66      	ldr	r3, [pc, #408]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a65      	ldr	r2, [pc, #404]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005168:	f7fc fffe 	bl	8002168 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005170:	f7fc fffa 	bl	8002168 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e207      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xc0>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fc ffea 	bl	8002168 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005198:	f7fc ffe6 	bl	8002168 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e1f3      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	4b51      	ldr	r3, [pc, #324]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0xe8>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d063      	beq.n	800528e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d2:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d11c      	bne.n	8005218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051de:	4b44      	ldr	r3, [pc, #272]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d116      	bne.n	8005218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x152>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e1c7      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005202:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4937      	ldr	r1, [pc, #220]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005212:	4313      	orrs	r3, r2
 8005214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	e03a      	b.n	800528e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005220:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <HAL_RCC_OscConfig+0x244>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fc ff9f 	bl	8002168 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522e:	f7fc ff9b 	bl	8002168 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e1a8      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005240:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4925      	ldr	r1, [pc, #148]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
 8005260:	e015      	b.n	800528e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005262:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_RCC_OscConfig+0x244>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fc ff7e 	bl	8002168 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005270:	f7fc ff7a 	bl	8002168 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e187      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005282:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d036      	beq.n	8005308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <HAL_RCC_OscConfig+0x248>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fc ff5e 	bl	8002168 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b0:	f7fc ff5a 	bl	8002168 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e167      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80052c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x200>
 80052ce:	e01b      	b.n	8005308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_RCC_OscConfig+0x248>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d6:	f7fc ff47 	bl	8002168 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052dc:	e00e      	b.n	80052fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052de:	f7fc ff43 	bl	8002168 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d907      	bls.n	80052fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e150      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
 80052f0:	40023800 	.word	0x40023800
 80052f4:	42470000 	.word	0x42470000
 80052f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	4b88      	ldr	r3, [pc, #544]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80052fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ea      	bne.n	80052de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8097 	beq.w	8005444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531a:	4b81      	ldr	r3, [pc, #516]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	4b7d      	ldr	r3, [pc, #500]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	4a7c      	ldr	r2, [pc, #496]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b7a      	ldr	r3, [pc, #488]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005346:	4b77      	ldr	r3, [pc, #476]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d118      	bne.n	8005384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005352:	4b74      	ldr	r3, [pc, #464]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a73      	ldr	r2, [pc, #460]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535e:	f7fc ff03 	bl	8002168 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005366:	f7fc feff 	bl	8002168 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e10c      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005378:	4b6a      	ldr	r3, [pc, #424]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d106      	bne.n	800539a <HAL_RCC_OscConfig+0x2ea>
 800538c:	4b64      	ldr	r3, [pc, #400]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4a63      	ldr	r2, [pc, #396]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	6713      	str	r3, [r2, #112]	; 0x70
 8005398:	e01c      	b.n	80053d4 <HAL_RCC_OscConfig+0x324>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b05      	cmp	r3, #5
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x30c>
 80053a2:	4b5f      	ldr	r3, [pc, #380]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	4a5e      	ldr	r2, [pc, #376]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053a8:	f043 0304 	orr.w	r3, r3, #4
 80053ac:	6713      	str	r3, [r2, #112]	; 0x70
 80053ae:	4b5c      	ldr	r3, [pc, #368]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a5b      	ldr	r2, [pc, #364]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ba:	e00b      	b.n	80053d4 <HAL_RCC_OscConfig+0x324>
 80053bc:	4b58      	ldr	r3, [pc, #352]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	4a57      	ldr	r2, [pc, #348]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	; 0x70
 80053c8:	4b55      	ldr	r3, [pc, #340]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4a54      	ldr	r2, [pc, #336]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053ce:	f023 0304 	bic.w	r3, r3, #4
 80053d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d015      	beq.n	8005408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053dc:	f7fc fec4 	bl	8002168 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e4:	f7fc fec0 	bl	8002168 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0cb      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	4b49      	ldr	r3, [pc, #292]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0ee      	beq.n	80053e4 <HAL_RCC_OscConfig+0x334>
 8005406:	e014      	b.n	8005432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005408:	f7fc feae 	bl	8002168 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fc feaa 	bl	8002168 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0b5      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005426:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1ee      	bne.n	8005410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d105      	bne.n	8005444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005438:	4b39      	ldr	r3, [pc, #228]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	4a38      	ldr	r2, [pc, #224]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800543e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a1 	beq.w	8005590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800544e:	4b34      	ldr	r3, [pc, #208]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b08      	cmp	r3, #8
 8005458:	d05c      	beq.n	8005514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d141      	bne.n	80054e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <HAL_RCC_OscConfig+0x478>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fc fe7e 	bl	8002168 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005470:	f7fc fe7a 	bl	8002168 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e087      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69da      	ldr	r2, [r3, #28]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	019b      	lsls	r3, r3, #6
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	3b01      	subs	r3, #1
 80054a8:	041b      	lsls	r3, r3, #16
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	491b      	ldr	r1, [pc, #108]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCC_OscConfig+0x478>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054be:	f7fc fe53 	bl	8002168 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c6:	f7fc fe4f 	bl	8002168 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e05c      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x416>
 80054e4:	e054      	b.n	8005590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <HAL_RCC_OscConfig+0x478>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ec:	f7fc fe3c 	bl	8002168 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f4:	f7fc fe38 	bl	8002168 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e045      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x444>
 8005512:	e03d      	b.n	8005590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d107      	bne.n	800552c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e038      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
 8005520:	40023800 	.word	0x40023800
 8005524:	40007000 	.word	0x40007000
 8005528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x4ec>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d028      	beq.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d121      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d11a      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005564:	4293      	cmp	r3, r2
 8005566:	d111      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	3b01      	subs	r3, #1
 8005576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d107      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800

080055a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0cc      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b4:	4b68      	ldr	r3, [pc, #416]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d90c      	bls.n	80055dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b65      	ldr	r3, [pc, #404]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	4b63      	ldr	r3, [pc, #396]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0b8      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d020      	beq.n	800562a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055f4:	4b59      	ldr	r3, [pc, #356]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	4a58      	ldr	r2, [pc, #352]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800560c:	4b53      	ldr	r3, [pc, #332]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a52      	ldr	r2, [pc, #328]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005618:	4b50      	ldr	r3, [pc, #320]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	494d      	ldr	r1, [pc, #308]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d044      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d107      	bne.n	800564e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563e:	4b47      	ldr	r3, [pc, #284]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d119      	bne.n	800567e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e07f      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d003      	beq.n	800565e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800565a:	2b03      	cmp	r3, #3
 800565c:	d107      	bne.n	800566e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800565e:	4b3f      	ldr	r3, [pc, #252]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e06f      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566e:	4b3b      	ldr	r3, [pc, #236]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e067      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800567e:	4b37      	ldr	r3, [pc, #220]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 0203 	bic.w	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4934      	ldr	r1, [pc, #208]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	4313      	orrs	r3, r2
 800568e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005690:	f7fc fd6a 	bl	8002168 <HAL_GetTick>
 8005694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005696:	e00a      	b.n	80056ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005698:	f7fc fd66 	bl	8002168 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e04f      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	4b2b      	ldr	r3, [pc, #172]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 020c 	and.w	r2, r3, #12
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1eb      	bne.n	8005698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c0:	4b25      	ldr	r3, [pc, #148]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d20c      	bcs.n	80056e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b22      	ldr	r3, [pc, #136]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e032      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f4:	4b19      	ldr	r3, [pc, #100]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4916      	ldr	r1, [pc, #88]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	4313      	orrs	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005712:	4b12      	ldr	r3, [pc, #72]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	490e      	ldr	r1, [pc, #56]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005726:	f000 f821 	bl	800576c <HAL_RCC_GetSysClockFreq>
 800572a:	4602      	mov	r2, r0
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	490a      	ldr	r1, [pc, #40]	; (8005760 <HAL_RCC_ClockConfig+0x1c0>)
 8005738:	5ccb      	ldrb	r3, [r1, r3]
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	4a09      	ldr	r2, [pc, #36]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 8005740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fc fcca 	bl	80020e0 <HAL_InitTick>

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40023c00 	.word	0x40023c00
 800575c:	40023800 	.word	0x40023800
 8005760:	08008574 	.word	0x08008574
 8005764:	20000e14 	.word	0x20000e14
 8005768:	20000e18 	.word	0x20000e18

0800576c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800576c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005770:	b094      	sub	sp, #80	; 0x50
 8005772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	647b      	str	r3, [r7, #68]	; 0x44
 8005778:	2300      	movs	r3, #0
 800577a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800577c:	2300      	movs	r3, #0
 800577e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005784:	4b79      	ldr	r3, [pc, #484]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 030c 	and.w	r3, r3, #12
 800578c:	2b08      	cmp	r3, #8
 800578e:	d00d      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x40>
 8005790:	2b08      	cmp	r3, #8
 8005792:	f200 80e1 	bhi.w	8005958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0x34>
 800579a:	2b04      	cmp	r3, #4
 800579c:	d003      	beq.n	80057a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800579e:	e0db      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a0:	4b73      	ldr	r3, [pc, #460]	; (8005970 <HAL_RCC_GetSysClockFreq+0x204>)
 80057a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057a4:	e0db      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057a6:	4b73      	ldr	r3, [pc, #460]	; (8005974 <HAL_RCC_GetSysClockFreq+0x208>)
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057aa:	e0d8      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057ac:	4b6f      	ldr	r3, [pc, #444]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057b6:	4b6d      	ldr	r3, [pc, #436]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d063      	beq.n	800588a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c2:	4b6a      	ldr	r3, [pc, #424]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	2200      	movs	r2, #0
 80057ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80057cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30
 80057d6:	2300      	movs	r3, #0
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
 80057da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f04f 0100 	mov.w	r1, #0
 80057ea:	0159      	lsls	r1, r3, #5
 80057ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f0:	0150      	lsls	r0, r2, #5
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4621      	mov	r1, r4
 80057f8:	1a51      	subs	r1, r2, r1
 80057fa:	6139      	str	r1, [r7, #16]
 80057fc:	4629      	mov	r1, r5
 80057fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005810:	4659      	mov	r1, fp
 8005812:	018b      	lsls	r3, r1, #6
 8005814:	4651      	mov	r1, sl
 8005816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800581a:	4651      	mov	r1, sl
 800581c:	018a      	lsls	r2, r1, #6
 800581e:	4651      	mov	r1, sl
 8005820:	ebb2 0801 	subs.w	r8, r2, r1
 8005824:	4659      	mov	r1, fp
 8005826:	eb63 0901 	sbc.w	r9, r3, r1
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800583a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800583e:	4690      	mov	r8, r2
 8005840:	4699      	mov	r9, r3
 8005842:	4623      	mov	r3, r4
 8005844:	eb18 0303 	adds.w	r3, r8, r3
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	462b      	mov	r3, r5
 800584c:	eb49 0303 	adc.w	r3, r9, r3
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800585e:	4629      	mov	r1, r5
 8005860:	024b      	lsls	r3, r1, #9
 8005862:	4621      	mov	r1, r4
 8005864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005868:	4621      	mov	r1, r4
 800586a:	024a      	lsls	r2, r1, #9
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005872:	2200      	movs	r2, #0
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
 8005876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800587c:	f7fb f9cc 	bl	8000c18 <__aeabi_uldivmod>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4613      	mov	r3, r2
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	e058      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800588a:	4b38      	ldr	r3, [pc, #224]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	099b      	lsrs	r3, r3, #6
 8005890:	2200      	movs	r2, #0
 8005892:	4618      	mov	r0, r3
 8005894:	4611      	mov	r1, r2
 8005896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	2300      	movs	r3, #0
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058a4:	4642      	mov	r2, r8
 80058a6:	464b      	mov	r3, r9
 80058a8:	f04f 0000 	mov.w	r0, #0
 80058ac:	f04f 0100 	mov.w	r1, #0
 80058b0:	0159      	lsls	r1, r3, #5
 80058b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058b6:	0150      	lsls	r0, r2, #5
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4641      	mov	r1, r8
 80058be:	ebb2 0a01 	subs.w	sl, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058dc:	ebb2 040a 	subs.w	r4, r2, sl
 80058e0:	eb63 050b 	sbc.w	r5, r3, fp
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	00eb      	lsls	r3, r5, #3
 80058ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058f2:	00e2      	lsls	r2, r4, #3
 80058f4:	4614      	mov	r4, r2
 80058f6:	461d      	mov	r5, r3
 80058f8:	4643      	mov	r3, r8
 80058fa:	18e3      	adds	r3, r4, r3
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	464b      	mov	r3, r9
 8005900:	eb45 0303 	adc.w	r3, r5, r3
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005912:	4629      	mov	r1, r5
 8005914:	028b      	lsls	r3, r1, #10
 8005916:	4621      	mov	r1, r4
 8005918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800591c:	4621      	mov	r1, r4
 800591e:	028a      	lsls	r2, r1, #10
 8005920:	4610      	mov	r0, r2
 8005922:	4619      	mov	r1, r3
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	2200      	movs	r2, #0
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	61fa      	str	r2, [r7, #28]
 800592c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005930:	f7fb f972 	bl	8000c18 <__aeabi_uldivmod>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4613      	mov	r3, r2
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	3301      	adds	r3, #1
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800594c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800594e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005956:	e002      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_RCC_GetSysClockFreq+0x204>)
 800595a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800595c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800595e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005960:	4618      	mov	r0, r3
 8005962:	3750      	adds	r7, #80	; 0x50
 8005964:	46bd      	mov	sp, r7
 8005966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
 8005970:	00f42400 	.word	0x00f42400
 8005974:	007a1200 	.word	0x007a1200

08005978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <HAL_RCC_GetHCLKFreq+0x14>)
 800597e:	681b      	ldr	r3, [r3, #0]
}
 8005980:	4618      	mov	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000e14 	.word	0x20000e14

08005990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005994:	f7ff fff0 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 8005998:	4602      	mov	r2, r0
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	0a9b      	lsrs	r3, r3, #10
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	4903      	ldr	r1, [pc, #12]	; (80059b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a6:	5ccb      	ldrb	r3, [r1, r3]
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40023800 	.word	0x40023800
 80059b4:	08008584 	.word	0x08008584

080059b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059bc:	f7ff ffdc 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 80059c0:	4602      	mov	r2, r0
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	0b5b      	lsrs	r3, r3, #13
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	4903      	ldr	r1, [pc, #12]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ce:	5ccb      	ldrb	r3, [r1, r3]
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40023800 	.word	0x40023800
 80059dc:	08008584 	.word	0x08008584

080059e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e03f      	b.n	8005a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc f9ae 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fd19 	bl	800645c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d130      	bne.n	8005af6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_UART_Transmit_IT+0x26>
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e029      	b.n	8005af8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Transmit_IT+0x38>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e022      	b.n	8005af8 <HAL_UART_Transmit_IT+0x7e>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2221      	movs	r2, #33	; 0x21
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005af0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e000      	b.n	8005af8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
  }
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d11d      	bne.n	8005b5a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_UART_Receive_IT+0x26>
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e016      	b.n	8005b5c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_UART_Receive_IT+0x38>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e00f      	b.n	8005b5c <HAL_UART_Receive_IT+0x58>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b4a:	88fb      	ldrh	r3, [r7, #6]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 faab 	bl	80060ac <UART_Start_Receive_IT>
 8005b56:	4603      	mov	r3, r0
 8005b58:	e000      	b.n	8005b5c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b0ba      	sub	sp, #232	; 0xe8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10f      	bne.n	8005bca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_UART_IRQHandler+0x66>
 8005bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fb8f 	bl	80062e6 <UART_Receive_IT>
      return;
 8005bc8:	e256      	b.n	8006078 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80de 	beq.w	8005d90 <HAL_UART_IRQHandler+0x22c>
 8005bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80d1 	beq.w	8005d90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <HAL_UART_IRQHandler+0xae>
 8005bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f043 0201 	orr.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_UART_IRQHandler+0xd2>
 8005c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0202 	orr.w	r2, r3, #2
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00b      	beq.n	8005c5a <HAL_UART_IRQHandler+0xf6>
 8005c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f043 0204 	orr.w	r2, r3, #4
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <HAL_UART_IRQHandler+0x126>
 8005c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d105      	bne.n	8005c7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f043 0208 	orr.w	r2, r3, #8
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 81ed 	beq.w	800606e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x14e>
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fb1a 	bl	80062e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <HAL_UART_IRQHandler+0x17a>
 8005cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d04f      	beq.n	8005d7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa22 	bl	8006128 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d141      	bne.n	8005d76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1d9      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d013      	beq.n	8005d6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	4a7d      	ldr	r2, [pc, #500]	; (8005f40 <HAL_UART_IRQHandler+0x3dc>)
 8005d4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fc fb95 	bl	8002482 <HAL_DMA_Abort_IT>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6c:	e00e      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f986 	bl	8006080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d74:	e00a      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f982 	bl	8006080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	e006      	b.n	8005d8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f97e 	bl	8006080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d8a:	e170      	b.n	800606e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d8c:	bf00      	nop
    return;
 8005d8e:	e16e      	b.n	800606e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	f040 814a 	bne.w	800602e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8143 	beq.w	800602e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 813c 	beq.w	800602e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b40      	cmp	r3, #64	; 0x40
 8005dd8:	f040 80b4 	bne.w	8005f44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005de8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8140 	beq.w	8006072 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	f080 8139 	bcs.w	8006072 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e12:	f000 8088 	beq.w	8005f26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1d9      	bne.n	8005e16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3314      	adds	r3, #20
 8005e82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e1      	bne.n	8005e62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3314      	adds	r3, #20
 8005ebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ec4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ec8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eca:	e841 2300 	strex	r3, r2, [r1]
 8005ece:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1e3      	bne.n	8005e9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef6:	f023 0310 	bic.w	r3, r3, #16
 8005efa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f08:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e3      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fc fa3e 	bl	80023a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8ac 	bl	8006094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f3c:	e099      	b.n	8006072 <HAL_UART_IRQHandler+0x50e>
 8005f3e:	bf00      	nop
 8005f40:	080061ef 	.word	0x080061ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 808b 	beq.w	8006076 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8086 	beq.w	8006076 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	330c      	adds	r3, #12
 8005f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f8e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e3      	bne.n	8005f6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3314      	adds	r3, #20
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3314      	adds	r3, #20
 8005fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fc6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e3      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0310 	bic.w	r3, r3, #16
 8005ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	617b      	str	r3, [r7, #20]
   return(result);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e3      	bne.n	8005fe8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f834 	bl	8006094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800602c:	e023      	b.n	8006076 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800602e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <HAL_UART_IRQHandler+0x4ea>
 800603a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f8e5 	bl	8006216 <UART_Transmit_IT>
    return;
 800604c:	e014      	b.n	8006078 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <HAL_UART_IRQHandler+0x514>
 800605a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f925 	bl	80062b6 <UART_EndTransmit_IT>
    return;
 800606c:	e004      	b.n	8006078 <HAL_UART_IRQHandler+0x514>
    return;
 800606e:	bf00      	nop
 8006070:	e002      	b.n	8006078 <HAL_UART_IRQHandler+0x514>
      return;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <HAL_UART_IRQHandler+0x514>
      return;
 8006076:	bf00      	nop
  }
}
 8006078:	37e8      	adds	r7, #232	; 0xe8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2222      	movs	r2, #34	; 0x22
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695a      	ldr	r2, [r3, #20]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0201 	orr.w	r2, r2, #1
 8006108:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0220 	orr.w	r2, r2, #32
 8006118:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b095      	sub	sp, #84	; 0x54
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006150:	643a      	str	r2, [r7, #64]	; 0x40
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	61fb      	str	r3, [r7, #28]
   return(result);
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	64bb      	str	r3, [r7, #72]	; 0x48
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006184:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800618a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e5      	bne.n	8006164 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	2b01      	cmp	r3, #1
 800619e:	d119      	bne.n	80061d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f023 0310 	bic.w	r3, r3, #16
 80061b6:	647b      	str	r3, [r7, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c0:	61ba      	str	r2, [r7, #24]
 80061c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	6979      	ldr	r1, [r7, #20]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	613b      	str	r3, [r7, #16]
   return(result);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e5      	bne.n	80061a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061e2:	bf00      	nop
 80061e4:	3754      	adds	r7, #84	; 0x54
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff ff39 	bl	8006080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b21      	cmp	r3, #33	; 0x21
 8006228:	d13e      	bne.n	80062a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006232:	d114      	bne.n	800625e <UART_Transmit_IT+0x48>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d110      	bne.n	800625e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006250:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	1c9a      	adds	r2, r3, #2
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	621a      	str	r2, [r3, #32]
 800625c:	e008      	b.n	8006270 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	1c59      	adds	r1, r3, #1
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6211      	str	r1, [r2, #32]
 8006268:	781a      	ldrb	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29b      	uxth	r3, r3
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4619      	mov	r1, r3
 800627e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10f      	bne.n	80062a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006292:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e000      	b.n	80062aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
  }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68da      	ldr	r2, [r3, #12]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fb fa1e 	bl	8001718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b08c      	sub	sp, #48	; 0x30
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b22      	cmp	r3, #34	; 0x22
 80062f8:	f040 80ab 	bne.w	8006452 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006304:	d117      	bne.n	8006336 <UART_Receive_IT+0x50>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d113      	bne.n	8006336 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006324:	b29a      	uxth	r2, r3
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	1c9a      	adds	r2, r3, #2
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	629a      	str	r2, [r3, #40]	; 0x28
 8006334:	e026      	b.n	8006384 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006348:	d007      	beq.n	800635a <UART_Receive_IT+0x74>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <UART_Receive_IT+0x82>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	b2da      	uxtb	r2, r3
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e008      	b.n	800637a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29b      	uxth	r3, r3
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4619      	mov	r1, r3
 8006392:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006394:	2b00      	cmp	r3, #0
 8006396:	d15a      	bne.n	800644e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0220 	bic.w	r2, r2, #32
 80063a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695a      	ldr	r2, [r3, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0201 	bic.w	r2, r2, #1
 80063c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d135      	bne.n	8006444 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	330c      	adds	r3, #12
 80063e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	613b      	str	r3, [r7, #16]
   return(result);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f023 0310 	bic.w	r3, r3, #16
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fe:	623a      	str	r2, [r7, #32]
 8006400:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	69f9      	ldr	r1, [r7, #28]
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	61bb      	str	r3, [r7, #24]
   return(result);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e5      	bne.n	80063de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0310 	and.w	r3, r3, #16
 800641c:	2b10      	cmp	r3, #16
 800641e:	d10a      	bne.n	8006436 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006420:	2300      	movs	r3, #0
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fe29 	bl	8006094 <HAL_UARTEx_RxEventCallback>
 8006442:	e002      	b.n	800644a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fb f99b 	bl	8001780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e002      	b.n	8006454 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e000      	b.n	8006454 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006452:	2302      	movs	r3, #2
  }
}
 8006454:	4618      	mov	r0, r3
 8006456:	3730      	adds	r7, #48	; 0x30
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800645c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006460:	b0c0      	sub	sp, #256	; 0x100
 8006462:	af00      	add	r7, sp, #0
 8006464:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	68d9      	ldr	r1, [r3, #12]
 800647a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	ea40 0301 	orr.w	r3, r0, r1
 8006484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	431a      	orrs	r2, r3
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	431a      	orrs	r2, r3
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064b4:	f021 010c 	bic.w	r1, r1, #12
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064c2:	430b      	orrs	r3, r1
 80064c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d6:	6999      	ldr	r1, [r3, #24]
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	ea40 0301 	orr.w	r3, r0, r1
 80064e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b8f      	ldr	r3, [pc, #572]	; (8006728 <UART_SetConfig+0x2cc>)
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d005      	beq.n	80064fc <UART_SetConfig+0xa0>
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b8d      	ldr	r3, [pc, #564]	; (800672c <UART_SetConfig+0x2d0>)
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d104      	bne.n	8006506 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7ff fa5c 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
 8006500:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006504:	e003      	b.n	800650e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006506:	f7ff fa43 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 800650a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	f040 810c 	bne.w	8006734 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800651c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006520:	2200      	movs	r2, #0
 8006522:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006526:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800652a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	1891      	adds	r1, r2, r2
 8006534:	65b9      	str	r1, [r7, #88]	; 0x58
 8006536:	415b      	adcs	r3, r3
 8006538:	65fb      	str	r3, [r7, #92]	; 0x5c
 800653a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800653e:	4621      	mov	r1, r4
 8006540:	eb12 0801 	adds.w	r8, r2, r1
 8006544:	4629      	mov	r1, r5
 8006546:	eb43 0901 	adc.w	r9, r3, r1
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800655a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800655e:	4690      	mov	r8, r2
 8006560:	4699      	mov	r9, r3
 8006562:	4623      	mov	r3, r4
 8006564:	eb18 0303 	adds.w	r3, r8, r3
 8006568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800656c:	462b      	mov	r3, r5
 800656e:	eb49 0303 	adc.w	r3, r9, r3
 8006572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006582:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800658a:	460b      	mov	r3, r1
 800658c:	18db      	adds	r3, r3, r3
 800658e:	653b      	str	r3, [r7, #80]	; 0x50
 8006590:	4613      	mov	r3, r2
 8006592:	eb42 0303 	adc.w	r3, r2, r3
 8006596:	657b      	str	r3, [r7, #84]	; 0x54
 8006598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800659c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065a0:	f7fa fb3a 	bl	8000c18 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4b61      	ldr	r3, [pc, #388]	; (8006730 <UART_SetConfig+0x2d4>)
 80065aa:	fba3 2302 	umull	r2, r3, r3, r2
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	011c      	lsls	r4, r3, #4
 80065b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	1891      	adds	r1, r2, r2
 80065ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80065cc:	415b      	adcs	r3, r3
 80065ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065d4:	4641      	mov	r1, r8
 80065d6:	eb12 0a01 	adds.w	sl, r2, r1
 80065da:	4649      	mov	r1, r9
 80065dc:	eb43 0b01 	adc.w	fp, r3, r1
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065f4:	4692      	mov	sl, r2
 80065f6:	469b      	mov	fp, r3
 80065f8:	4643      	mov	r3, r8
 80065fa:	eb1a 0303 	adds.w	r3, sl, r3
 80065fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006602:	464b      	mov	r3, r9
 8006604:	eb4b 0303 	adc.w	r3, fp, r3
 8006608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006618:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800661c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006620:	460b      	mov	r3, r1
 8006622:	18db      	adds	r3, r3, r3
 8006624:	643b      	str	r3, [r7, #64]	; 0x40
 8006626:	4613      	mov	r3, r2
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	647b      	str	r3, [r7, #68]	; 0x44
 800662e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006632:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006636:	f7fa faef 	bl	8000c18 <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4611      	mov	r1, r2
 8006640:	4b3b      	ldr	r3, [pc, #236]	; (8006730 <UART_SetConfig+0x2d4>)
 8006642:	fba3 2301 	umull	r2, r3, r3, r1
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	2264      	movs	r2, #100	; 0x64
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	1acb      	subs	r3, r1, r3
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006656:	4b36      	ldr	r3, [pc, #216]	; (8006730 <UART_SetConfig+0x2d4>)
 8006658:	fba3 2302 	umull	r2, r3, r3, r2
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006664:	441c      	add	r4, r3
 8006666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800666a:	2200      	movs	r2, #0
 800666c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006670:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	1891      	adds	r1, r2, r2
 800667e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006680:	415b      	adcs	r3, r3
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006688:	4641      	mov	r1, r8
 800668a:	1851      	adds	r1, r2, r1
 800668c:	6339      	str	r1, [r7, #48]	; 0x30
 800668e:	4649      	mov	r1, r9
 8006690:	414b      	adcs	r3, r1
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066a0:	4659      	mov	r1, fp
 80066a2:	00cb      	lsls	r3, r1, #3
 80066a4:	4651      	mov	r1, sl
 80066a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066aa:	4651      	mov	r1, sl
 80066ac:	00ca      	lsls	r2, r1, #3
 80066ae:	4610      	mov	r0, r2
 80066b0:	4619      	mov	r1, r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	4642      	mov	r2, r8
 80066b6:	189b      	adds	r3, r3, r2
 80066b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066bc:	464b      	mov	r3, r9
 80066be:	460a      	mov	r2, r1
 80066c0:	eb42 0303 	adc.w	r3, r2, r3
 80066c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066dc:	460b      	mov	r3, r1
 80066de:	18db      	adds	r3, r3, r3
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e2:	4613      	mov	r3, r2
 80066e4:	eb42 0303 	adc.w	r3, r2, r3
 80066e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066f2:	f7fa fa91 	bl	8000c18 <__aeabi_uldivmod>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <UART_SetConfig+0x2d4>)
 80066fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	2164      	movs	r1, #100	; 0x64
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	3332      	adds	r3, #50	; 0x32
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <UART_SetConfig+0x2d4>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f003 0207 	and.w	r2, r3, #7
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4422      	add	r2, r4
 8006722:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006724:	e106      	b.n	8006934 <UART_SetConfig+0x4d8>
 8006726:	bf00      	nop
 8006728:	40011000 	.word	0x40011000
 800672c:	40011400 	.word	0x40011400
 8006730:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006738:	2200      	movs	r2, #0
 800673a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800673e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006742:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006746:	4642      	mov	r2, r8
 8006748:	464b      	mov	r3, r9
 800674a:	1891      	adds	r1, r2, r2
 800674c:	6239      	str	r1, [r7, #32]
 800674e:	415b      	adcs	r3, r3
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
 8006752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006756:	4641      	mov	r1, r8
 8006758:	1854      	adds	r4, r2, r1
 800675a:	4649      	mov	r1, r9
 800675c:	eb43 0501 	adc.w	r5, r3, r1
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	00eb      	lsls	r3, r5, #3
 800676a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800676e:	00e2      	lsls	r2, r4, #3
 8006770:	4614      	mov	r4, r2
 8006772:	461d      	mov	r5, r3
 8006774:	4643      	mov	r3, r8
 8006776:	18e3      	adds	r3, r4, r3
 8006778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800677c:	464b      	mov	r3, r9
 800677e:	eb45 0303 	adc.w	r3, r5, r3
 8006782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006792:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067a2:	4629      	mov	r1, r5
 80067a4:	008b      	lsls	r3, r1, #2
 80067a6:	4621      	mov	r1, r4
 80067a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ac:	4621      	mov	r1, r4
 80067ae:	008a      	lsls	r2, r1, #2
 80067b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067b4:	f7fa fa30 	bl	8000c18 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4b60      	ldr	r3, [pc, #384]	; (8006940 <UART_SetConfig+0x4e4>)
 80067be:	fba3 2302 	umull	r2, r3, r3, r2
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	011c      	lsls	r4, r3, #4
 80067c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067d8:	4642      	mov	r2, r8
 80067da:	464b      	mov	r3, r9
 80067dc:	1891      	adds	r1, r2, r2
 80067de:	61b9      	str	r1, [r7, #24]
 80067e0:	415b      	adcs	r3, r3
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e8:	4641      	mov	r1, r8
 80067ea:	1851      	adds	r1, r2, r1
 80067ec:	6139      	str	r1, [r7, #16]
 80067ee:	4649      	mov	r1, r9
 80067f0:	414b      	adcs	r3, r1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006800:	4659      	mov	r1, fp
 8006802:	00cb      	lsls	r3, r1, #3
 8006804:	4651      	mov	r1, sl
 8006806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800680a:	4651      	mov	r1, sl
 800680c:	00ca      	lsls	r2, r1, #3
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	4603      	mov	r3, r0
 8006814:	4642      	mov	r2, r8
 8006816:	189b      	adds	r3, r3, r2
 8006818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800681c:	464b      	mov	r3, r9
 800681e:	460a      	mov	r2, r1
 8006820:	eb42 0303 	adc.w	r3, r2, r3
 8006824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	67bb      	str	r3, [r7, #120]	; 0x78
 8006832:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006840:	4649      	mov	r1, r9
 8006842:	008b      	lsls	r3, r1, #2
 8006844:	4641      	mov	r1, r8
 8006846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800684a:	4641      	mov	r1, r8
 800684c:	008a      	lsls	r2, r1, #2
 800684e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006852:	f7fa f9e1 	bl	8000c18 <__aeabi_uldivmod>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4611      	mov	r1, r2
 800685c:	4b38      	ldr	r3, [pc, #224]	; (8006940 <UART_SetConfig+0x4e4>)
 800685e:	fba3 2301 	umull	r2, r3, r3, r1
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	2264      	movs	r2, #100	; 0x64
 8006866:	fb02 f303 	mul.w	r3, r2, r3
 800686a:	1acb      	subs	r3, r1, r3
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	3332      	adds	r3, #50	; 0x32
 8006870:	4a33      	ldr	r2, [pc, #204]	; (8006940 <UART_SetConfig+0x4e4>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800687c:	441c      	add	r4, r3
 800687e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006882:	2200      	movs	r2, #0
 8006884:	673b      	str	r3, [r7, #112]	; 0x70
 8006886:	677a      	str	r2, [r7, #116]	; 0x74
 8006888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	1891      	adds	r1, r2, r2
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	415b      	adcs	r3, r3
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800689c:	4641      	mov	r1, r8
 800689e:	1851      	adds	r1, r2, r1
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	4649      	mov	r1, r9
 80068a4:	414b      	adcs	r3, r1
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068b4:	4659      	mov	r1, fp
 80068b6:	00cb      	lsls	r3, r1, #3
 80068b8:	4651      	mov	r1, sl
 80068ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068be:	4651      	mov	r1, sl
 80068c0:	00ca      	lsls	r2, r1, #3
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	4642      	mov	r2, r8
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ce:	464b      	mov	r3, r9
 80068d0:	460a      	mov	r2, r1
 80068d2:	eb42 0303 	adc.w	r3, r2, r3
 80068d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	663b      	str	r3, [r7, #96]	; 0x60
 80068e2:	667a      	str	r2, [r7, #100]	; 0x64
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068f0:	4649      	mov	r1, r9
 80068f2:	008b      	lsls	r3, r1, #2
 80068f4:	4641      	mov	r1, r8
 80068f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068fa:	4641      	mov	r1, r8
 80068fc:	008a      	lsls	r2, r1, #2
 80068fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006902:	f7fa f989 	bl	8000c18 <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <UART_SetConfig+0x4e4>)
 800690c:	fba3 1302 	umull	r1, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	2164      	movs	r1, #100	; 0x64
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	3332      	adds	r3, #50	; 0x32
 800691e:	4a08      	ldr	r2, [pc, #32]	; (8006940 <UART_SetConfig+0x4e4>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4422      	add	r2, r4
 8006932:	609a      	str	r2, [r3, #8]
}
 8006934:	bf00      	nop
 8006936:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800693a:	46bd      	mov	sp, r7
 800693c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006940:	51eb851f 	.word	0x51eb851f

08006944 <atoi>:
 8006944:	220a      	movs	r2, #10
 8006946:	2100      	movs	r1, #0
 8006948:	f000 b882 	b.w	8006a50 <strtol>

0800694c <_strtol_l.constprop.0>:
 800694c:	2b01      	cmp	r3, #1
 800694e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006952:	d001      	beq.n	8006958 <_strtol_l.constprop.0+0xc>
 8006954:	2b24      	cmp	r3, #36	; 0x24
 8006956:	d906      	bls.n	8006966 <_strtol_l.constprop.0+0x1a>
 8006958:	f000 fa9a 	bl	8006e90 <__errno>
 800695c:	2316      	movs	r3, #22
 800695e:	6003      	str	r3, [r0, #0]
 8006960:	2000      	movs	r0, #0
 8006962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006966:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a4c <_strtol_l.constprop.0+0x100>
 800696a:	460d      	mov	r5, r1
 800696c:	462e      	mov	r6, r5
 800696e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006972:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006976:	f017 0708 	ands.w	r7, r7, #8
 800697a:	d1f7      	bne.n	800696c <_strtol_l.constprop.0+0x20>
 800697c:	2c2d      	cmp	r4, #45	; 0x2d
 800697e:	d132      	bne.n	80069e6 <_strtol_l.constprop.0+0x9a>
 8006980:	782c      	ldrb	r4, [r5, #0]
 8006982:	2701      	movs	r7, #1
 8006984:	1cb5      	adds	r5, r6, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d05b      	beq.n	8006a42 <_strtol_l.constprop.0+0xf6>
 800698a:	2b10      	cmp	r3, #16
 800698c:	d109      	bne.n	80069a2 <_strtol_l.constprop.0+0x56>
 800698e:	2c30      	cmp	r4, #48	; 0x30
 8006990:	d107      	bne.n	80069a2 <_strtol_l.constprop.0+0x56>
 8006992:	782c      	ldrb	r4, [r5, #0]
 8006994:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006998:	2c58      	cmp	r4, #88	; 0x58
 800699a:	d14d      	bne.n	8006a38 <_strtol_l.constprop.0+0xec>
 800699c:	786c      	ldrb	r4, [r5, #1]
 800699e:	2310      	movs	r3, #16
 80069a0:	3502      	adds	r5, #2
 80069a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80069a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80069aa:	f04f 0e00 	mov.w	lr, #0
 80069ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80069b2:	4676      	mov	r6, lr
 80069b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80069b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80069bc:	f1bc 0f09 	cmp.w	ip, #9
 80069c0:	d816      	bhi.n	80069f0 <_strtol_l.constprop.0+0xa4>
 80069c2:	4664      	mov	r4, ip
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	dd24      	ble.n	8006a12 <_strtol_l.constprop.0+0xc6>
 80069c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80069cc:	d008      	beq.n	80069e0 <_strtol_l.constprop.0+0x94>
 80069ce:	45b1      	cmp	r9, r6
 80069d0:	d31c      	bcc.n	8006a0c <_strtol_l.constprop.0+0xc0>
 80069d2:	d101      	bne.n	80069d8 <_strtol_l.constprop.0+0x8c>
 80069d4:	45a2      	cmp	sl, r4
 80069d6:	db19      	blt.n	8006a0c <_strtol_l.constprop.0+0xc0>
 80069d8:	fb06 4603 	mla	r6, r6, r3, r4
 80069dc:	f04f 0e01 	mov.w	lr, #1
 80069e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069e4:	e7e8      	b.n	80069b8 <_strtol_l.constprop.0+0x6c>
 80069e6:	2c2b      	cmp	r4, #43	; 0x2b
 80069e8:	bf04      	itt	eq
 80069ea:	782c      	ldrbeq	r4, [r5, #0]
 80069ec:	1cb5      	addeq	r5, r6, #2
 80069ee:	e7ca      	b.n	8006986 <_strtol_l.constprop.0+0x3a>
 80069f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80069f4:	f1bc 0f19 	cmp.w	ip, #25
 80069f8:	d801      	bhi.n	80069fe <_strtol_l.constprop.0+0xb2>
 80069fa:	3c37      	subs	r4, #55	; 0x37
 80069fc:	e7e2      	b.n	80069c4 <_strtol_l.constprop.0+0x78>
 80069fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006a02:	f1bc 0f19 	cmp.w	ip, #25
 8006a06:	d804      	bhi.n	8006a12 <_strtol_l.constprop.0+0xc6>
 8006a08:	3c57      	subs	r4, #87	; 0x57
 8006a0a:	e7db      	b.n	80069c4 <_strtol_l.constprop.0+0x78>
 8006a0c:	f04f 3eff 	mov.w	lr, #4294967295
 8006a10:	e7e6      	b.n	80069e0 <_strtol_l.constprop.0+0x94>
 8006a12:	f1be 3fff 	cmp.w	lr, #4294967295
 8006a16:	d105      	bne.n	8006a24 <_strtol_l.constprop.0+0xd8>
 8006a18:	2322      	movs	r3, #34	; 0x22
 8006a1a:	6003      	str	r3, [r0, #0]
 8006a1c:	4646      	mov	r6, r8
 8006a1e:	b942      	cbnz	r2, 8006a32 <_strtol_l.constprop.0+0xe6>
 8006a20:	4630      	mov	r0, r6
 8006a22:	e79e      	b.n	8006962 <_strtol_l.constprop.0+0x16>
 8006a24:	b107      	cbz	r7, 8006a28 <_strtol_l.constprop.0+0xdc>
 8006a26:	4276      	negs	r6, r6
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d0f9      	beq.n	8006a20 <_strtol_l.constprop.0+0xd4>
 8006a2c:	f1be 0f00 	cmp.w	lr, #0
 8006a30:	d000      	beq.n	8006a34 <_strtol_l.constprop.0+0xe8>
 8006a32:	1e69      	subs	r1, r5, #1
 8006a34:	6011      	str	r1, [r2, #0]
 8006a36:	e7f3      	b.n	8006a20 <_strtol_l.constprop.0+0xd4>
 8006a38:	2430      	movs	r4, #48	; 0x30
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1b1      	bne.n	80069a2 <_strtol_l.constprop.0+0x56>
 8006a3e:	2308      	movs	r3, #8
 8006a40:	e7af      	b.n	80069a2 <_strtol_l.constprop.0+0x56>
 8006a42:	2c30      	cmp	r4, #48	; 0x30
 8006a44:	d0a5      	beq.n	8006992 <_strtol_l.constprop.0+0x46>
 8006a46:	230a      	movs	r3, #10
 8006a48:	e7ab      	b.n	80069a2 <_strtol_l.constprop.0+0x56>
 8006a4a:	bf00      	nop
 8006a4c:	0800858d 	.word	0x0800858d

08006a50 <strtol>:
 8006a50:	4613      	mov	r3, r2
 8006a52:	460a      	mov	r2, r1
 8006a54:	4601      	mov	r1, r0
 8006a56:	4802      	ldr	r0, [pc, #8]	; (8006a60 <strtol+0x10>)
 8006a58:	6800      	ldr	r0, [r0, #0]
 8006a5a:	f7ff bf77 	b.w	800694c <_strtol_l.constprop.0>
 8006a5e:	bf00      	nop
 8006a60:	20000e78 	.word	0x20000e78

08006a64 <std>:
 8006a64:	2300      	movs	r3, #0
 8006a66:	b510      	push	{r4, lr}
 8006a68:	4604      	mov	r4, r0
 8006a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a72:	6083      	str	r3, [r0, #8]
 8006a74:	8181      	strh	r1, [r0, #12]
 8006a76:	6643      	str	r3, [r0, #100]	; 0x64
 8006a78:	81c2      	strh	r2, [r0, #14]
 8006a7a:	6183      	str	r3, [r0, #24]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	2208      	movs	r2, #8
 8006a80:	305c      	adds	r0, #92	; 0x5c
 8006a82:	f000 f935 	bl	8006cf0 <memset>
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <std+0x58>)
 8006a88:	6263      	str	r3, [r4, #36]	; 0x24
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <std+0x5c>)
 8006a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <std+0x60>)
 8006a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a92:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <std+0x64>)
 8006a94:	6323      	str	r3, [r4, #48]	; 0x30
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <std+0x68>)
 8006a98:	6224      	str	r4, [r4, #32]
 8006a9a:	429c      	cmp	r4, r3
 8006a9c:	d006      	beq.n	8006aac <std+0x48>
 8006a9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006aa2:	4294      	cmp	r4, r2
 8006aa4:	d002      	beq.n	8006aac <std+0x48>
 8006aa6:	33d0      	adds	r3, #208	; 0xd0
 8006aa8:	429c      	cmp	r4, r3
 8006aaa:	d105      	bne.n	8006ab8 <std+0x54>
 8006aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab4:	f000 ba16 	b.w	8006ee4 <__retarget_lock_init_recursive>
 8006ab8:	bd10      	pop	{r4, pc}
 8006aba:	bf00      	nop
 8006abc:	08006c29 	.word	0x08006c29
 8006ac0:	08006c4b 	.word	0x08006c4b
 8006ac4:	08006c83 	.word	0x08006c83
 8006ac8:	08006ca7 	.word	0x08006ca7
 8006acc:	2000174c 	.word	0x2000174c

08006ad0 <stdio_exit_handler>:
 8006ad0:	4a02      	ldr	r2, [pc, #8]	; (8006adc <stdio_exit_handler+0xc>)
 8006ad2:	4903      	ldr	r1, [pc, #12]	; (8006ae0 <stdio_exit_handler+0x10>)
 8006ad4:	4803      	ldr	r0, [pc, #12]	; (8006ae4 <stdio_exit_handler+0x14>)
 8006ad6:	f000 b869 	b.w	8006bac <_fwalk_sglue>
 8006ada:	bf00      	nop
 8006adc:	20000e20 	.word	0x20000e20
 8006ae0:	08007805 	.word	0x08007805
 8006ae4:	20000e2c 	.word	0x20000e2c

08006ae8 <cleanup_stdio>:
 8006ae8:	6841      	ldr	r1, [r0, #4]
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <cleanup_stdio+0x34>)
 8006aec:	4299      	cmp	r1, r3
 8006aee:	b510      	push	{r4, lr}
 8006af0:	4604      	mov	r4, r0
 8006af2:	d001      	beq.n	8006af8 <cleanup_stdio+0x10>
 8006af4:	f000 fe86 	bl	8007804 <_fflush_r>
 8006af8:	68a1      	ldr	r1, [r4, #8]
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <cleanup_stdio+0x38>)
 8006afc:	4299      	cmp	r1, r3
 8006afe:	d002      	beq.n	8006b06 <cleanup_stdio+0x1e>
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fe7f 	bl	8007804 <_fflush_r>
 8006b06:	68e1      	ldr	r1, [r4, #12]
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <cleanup_stdio+0x3c>)
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	d004      	beq.n	8006b18 <cleanup_stdio+0x30>
 8006b0e:	4620      	mov	r0, r4
 8006b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b14:	f000 be76 	b.w	8007804 <_fflush_r>
 8006b18:	bd10      	pop	{r4, pc}
 8006b1a:	bf00      	nop
 8006b1c:	2000174c 	.word	0x2000174c
 8006b20:	200017b4 	.word	0x200017b4
 8006b24:	2000181c 	.word	0x2000181c

08006b28 <global_stdio_init.part.0>:
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <global_stdio_init.part.0+0x30>)
 8006b2c:	4c0b      	ldr	r4, [pc, #44]	; (8006b5c <global_stdio_init.part.0+0x34>)
 8006b2e:	4a0c      	ldr	r2, [pc, #48]	; (8006b60 <global_stdio_init.part.0+0x38>)
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	4620      	mov	r0, r4
 8006b34:	2200      	movs	r2, #0
 8006b36:	2104      	movs	r1, #4
 8006b38:	f7ff ff94 	bl	8006a64 <std>
 8006b3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006b40:	2201      	movs	r2, #1
 8006b42:	2109      	movs	r1, #9
 8006b44:	f7ff ff8e 	bl	8006a64 <std>
 8006b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b52:	2112      	movs	r1, #18
 8006b54:	f7ff bf86 	b.w	8006a64 <std>
 8006b58:	20001884 	.word	0x20001884
 8006b5c:	2000174c 	.word	0x2000174c
 8006b60:	08006ad1 	.word	0x08006ad1

08006b64 <__sfp_lock_acquire>:
 8006b64:	4801      	ldr	r0, [pc, #4]	; (8006b6c <__sfp_lock_acquire+0x8>)
 8006b66:	f000 b9be 	b.w	8006ee6 <__retarget_lock_acquire_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	2000188d 	.word	0x2000188d

08006b70 <__sfp_lock_release>:
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <__sfp_lock_release+0x8>)
 8006b72:	f000 b9b9 	b.w	8006ee8 <__retarget_lock_release_recursive>
 8006b76:	bf00      	nop
 8006b78:	2000188d 	.word	0x2000188d

08006b7c <__sinit>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	4604      	mov	r4, r0
 8006b80:	f7ff fff0 	bl	8006b64 <__sfp_lock_acquire>
 8006b84:	6a23      	ldr	r3, [r4, #32]
 8006b86:	b11b      	cbz	r3, 8006b90 <__sinit+0x14>
 8006b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8c:	f7ff bff0 	b.w	8006b70 <__sfp_lock_release>
 8006b90:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <__sinit+0x28>)
 8006b92:	6223      	str	r3, [r4, #32]
 8006b94:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <__sinit+0x2c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f5      	bne.n	8006b88 <__sinit+0xc>
 8006b9c:	f7ff ffc4 	bl	8006b28 <global_stdio_init.part.0>
 8006ba0:	e7f2      	b.n	8006b88 <__sinit+0xc>
 8006ba2:	bf00      	nop
 8006ba4:	08006ae9 	.word	0x08006ae9
 8006ba8:	20001884 	.word	0x20001884

08006bac <_fwalk_sglue>:
 8006bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	4688      	mov	r8, r1
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	2600      	movs	r6, #0
 8006bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8006bc0:	d505      	bpl.n	8006bce <_fwalk_sglue+0x22>
 8006bc2:	6824      	ldr	r4, [r4, #0]
 8006bc4:	2c00      	cmp	r4, #0
 8006bc6:	d1f7      	bne.n	8006bb8 <_fwalk_sglue+0xc>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bce:	89ab      	ldrh	r3, [r5, #12]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d907      	bls.n	8006be4 <_fwalk_sglue+0x38>
 8006bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	d003      	beq.n	8006be4 <_fwalk_sglue+0x38>
 8006bdc:	4629      	mov	r1, r5
 8006bde:	4638      	mov	r0, r7
 8006be0:	47c0      	blx	r8
 8006be2:	4306      	orrs	r6, r0
 8006be4:	3568      	adds	r5, #104	; 0x68
 8006be6:	e7e9      	b.n	8006bbc <_fwalk_sglue+0x10>

08006be8 <siprintf>:
 8006be8:	b40e      	push	{r1, r2, r3}
 8006bea:	b500      	push	{lr}
 8006bec:	b09c      	sub	sp, #112	; 0x70
 8006bee:	ab1d      	add	r3, sp, #116	; 0x74
 8006bf0:	9002      	str	r0, [sp, #8]
 8006bf2:	9006      	str	r0, [sp, #24]
 8006bf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bf8:	4809      	ldr	r0, [pc, #36]	; (8006c20 <siprintf+0x38>)
 8006bfa:	9107      	str	r1, [sp, #28]
 8006bfc:	9104      	str	r1, [sp, #16]
 8006bfe:	4909      	ldr	r1, [pc, #36]	; (8006c24 <siprintf+0x3c>)
 8006c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c04:	9105      	str	r1, [sp, #20]
 8006c06:	6800      	ldr	r0, [r0, #0]
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	a902      	add	r1, sp, #8
 8006c0c:	f000 fae6 	bl	80071dc <_svfiprintf_r>
 8006c10:	9b02      	ldr	r3, [sp, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	b01c      	add	sp, #112	; 0x70
 8006c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c1c:	b003      	add	sp, #12
 8006c1e:	4770      	bx	lr
 8006c20:	20000e78 	.word	0x20000e78
 8006c24:	ffff0208 	.word	0xffff0208

08006c28 <__sread>:
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c30:	f000 f90a 	bl	8006e48 <_read_r>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	bfab      	itete	ge
 8006c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c3c:	181b      	addge	r3, r3, r0
 8006c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c42:	bfac      	ite	ge
 8006c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c46:	81a3      	strhlt	r3, [r4, #12]
 8006c48:	bd10      	pop	{r4, pc}

08006c4a <__swrite>:
 8006c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4e:	461f      	mov	r7, r3
 8006c50:	898b      	ldrh	r3, [r1, #12]
 8006c52:	05db      	lsls	r3, r3, #23
 8006c54:	4605      	mov	r5, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4616      	mov	r6, r2
 8006c5a:	d505      	bpl.n	8006c68 <__swrite+0x1e>
 8006c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c60:	2302      	movs	r3, #2
 8006c62:	2200      	movs	r2, #0
 8006c64:	f000 f8de 	bl	8006e24 <_lseek_r>
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c72:	81a3      	strh	r3, [r4, #12]
 8006c74:	4632      	mov	r2, r6
 8006c76:	463b      	mov	r3, r7
 8006c78:	4628      	mov	r0, r5
 8006c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7e:	f000 b8f5 	b.w	8006e6c <_write_r>

08006c82 <__sseek>:
 8006c82:	b510      	push	{r4, lr}
 8006c84:	460c      	mov	r4, r1
 8006c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8a:	f000 f8cb 	bl	8006e24 <_lseek_r>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	bf15      	itete	ne
 8006c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c9e:	81a3      	strheq	r3, [r4, #12]
 8006ca0:	bf18      	it	ne
 8006ca2:	81a3      	strhne	r3, [r4, #12]
 8006ca4:	bd10      	pop	{r4, pc}

08006ca6 <__sclose>:
 8006ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006caa:	f000 b8ab 	b.w	8006e04 <_close_r>
	...

08006cb0 <_vsiprintf_r>:
 8006cb0:	b500      	push	{lr}
 8006cb2:	b09b      	sub	sp, #108	; 0x6c
 8006cb4:	9100      	str	r1, [sp, #0]
 8006cb6:	9104      	str	r1, [sp, #16]
 8006cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cbc:	9105      	str	r1, [sp, #20]
 8006cbe:	9102      	str	r1, [sp, #8]
 8006cc0:	4905      	ldr	r1, [pc, #20]	; (8006cd8 <_vsiprintf_r+0x28>)
 8006cc2:	9103      	str	r1, [sp, #12]
 8006cc4:	4669      	mov	r1, sp
 8006cc6:	f000 fa89 	bl	80071dc <_svfiprintf_r>
 8006cca:	9b00      	ldr	r3, [sp, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	b01b      	add	sp, #108	; 0x6c
 8006cd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cd6:	bf00      	nop
 8006cd8:	ffff0208 	.word	0xffff0208

08006cdc <vsiprintf>:
 8006cdc:	4613      	mov	r3, r2
 8006cde:	460a      	mov	r2, r1
 8006ce0:	4601      	mov	r1, r0
 8006ce2:	4802      	ldr	r0, [pc, #8]	; (8006cec <vsiprintf+0x10>)
 8006ce4:	6800      	ldr	r0, [r0, #0]
 8006ce6:	f7ff bfe3 	b.w	8006cb0 <_vsiprintf_r>
 8006cea:	bf00      	nop
 8006cec:	20000e78 	.word	0x20000e78

08006cf0 <memset>:
 8006cf0:	4402      	add	r2, r0
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d100      	bne.n	8006cfa <memset+0xa>
 8006cf8:	4770      	bx	lr
 8006cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfe:	e7f9      	b.n	8006cf4 <memset+0x4>

08006d00 <strncmp>:
 8006d00:	b510      	push	{r4, lr}
 8006d02:	b16a      	cbz	r2, 8006d20 <strncmp+0x20>
 8006d04:	3901      	subs	r1, #1
 8006d06:	1884      	adds	r4, r0, r2
 8006d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d103      	bne.n	8006d1c <strncmp+0x1c>
 8006d14:	42a0      	cmp	r0, r4
 8006d16:	d001      	beq.n	8006d1c <strncmp+0x1c>
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	d1f5      	bne.n	8006d08 <strncmp+0x8>
 8006d1c:	1ad0      	subs	r0, r2, r3
 8006d1e:	bd10      	pop	{r4, pc}
 8006d20:	4610      	mov	r0, r2
 8006d22:	e7fc      	b.n	8006d1e <strncmp+0x1e>

08006d24 <strncpy>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	3901      	subs	r1, #1
 8006d28:	4603      	mov	r3, r0
 8006d2a:	b132      	cbz	r2, 8006d3a <strncpy+0x16>
 8006d2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d30:	f803 4b01 	strb.w	r4, [r3], #1
 8006d34:	3a01      	subs	r2, #1
 8006d36:	2c00      	cmp	r4, #0
 8006d38:	d1f7      	bne.n	8006d2a <strncpy+0x6>
 8006d3a:	441a      	add	r2, r3
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d100      	bne.n	8006d44 <strncpy+0x20>
 8006d42:	bd10      	pop	{r4, pc}
 8006d44:	f803 1b01 	strb.w	r1, [r3], #1
 8006d48:	e7f9      	b.n	8006d3e <strncpy+0x1a>
	...

08006d4c <strtok>:
 8006d4c:	4b16      	ldr	r3, [pc, #88]	; (8006da8 <strtok+0x5c>)
 8006d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d50:	681e      	ldr	r6, [r3, #0]
 8006d52:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006d54:	4605      	mov	r5, r0
 8006d56:	b9fc      	cbnz	r4, 8006d98 <strtok+0x4c>
 8006d58:	2050      	movs	r0, #80	; 0x50
 8006d5a:	9101      	str	r1, [sp, #4]
 8006d5c:	f000 f930 	bl	8006fc0 <malloc>
 8006d60:	9901      	ldr	r1, [sp, #4]
 8006d62:	6470      	str	r0, [r6, #68]	; 0x44
 8006d64:	4602      	mov	r2, r0
 8006d66:	b920      	cbnz	r0, 8006d72 <strtok+0x26>
 8006d68:	4b10      	ldr	r3, [pc, #64]	; (8006dac <strtok+0x60>)
 8006d6a:	4811      	ldr	r0, [pc, #68]	; (8006db0 <strtok+0x64>)
 8006d6c:	215b      	movs	r1, #91	; 0x5b
 8006d6e:	f000 f8bd 	bl	8006eec <__assert_func>
 8006d72:	e9c0 4400 	strd	r4, r4, [r0]
 8006d76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006d7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006d7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006d82:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006d86:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006d8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006d8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006d92:	6184      	str	r4, [r0, #24]
 8006d94:	7704      	strb	r4, [r0, #28]
 8006d96:	6244      	str	r4, [r0, #36]	; 0x24
 8006d98:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	b002      	add	sp, #8
 8006da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006da4:	f000 b806 	b.w	8006db4 <__strtok_r>
 8006da8:	20000e78 	.word	0x20000e78
 8006dac:	0800868d 	.word	0x0800868d
 8006db0:	080086a4 	.word	0x080086a4

08006db4 <__strtok_r>:
 8006db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db6:	b908      	cbnz	r0, 8006dbc <__strtok_r+0x8>
 8006db8:	6810      	ldr	r0, [r2, #0]
 8006dba:	b188      	cbz	r0, 8006de0 <__strtok_r+0x2c>
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006dc4:	460f      	mov	r7, r1
 8006dc6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006dca:	b91e      	cbnz	r6, 8006dd4 <__strtok_r+0x20>
 8006dcc:	b965      	cbnz	r5, 8006de8 <__strtok_r+0x34>
 8006dce:	6015      	str	r5, [r2, #0]
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e005      	b.n	8006de0 <__strtok_r+0x2c>
 8006dd4:	42b5      	cmp	r5, r6
 8006dd6:	d1f6      	bne.n	8006dc6 <__strtok_r+0x12>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f0      	bne.n	8006dbe <__strtok_r+0xa>
 8006ddc:	6014      	str	r4, [r2, #0]
 8006dde:	7003      	strb	r3, [r0, #0]
 8006de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de2:	461c      	mov	r4, r3
 8006de4:	e00c      	b.n	8006e00 <__strtok_r+0x4c>
 8006de6:	b915      	cbnz	r5, 8006dee <__strtok_r+0x3a>
 8006de8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006dec:	460e      	mov	r6, r1
 8006dee:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006df2:	42ab      	cmp	r3, r5
 8006df4:	d1f7      	bne.n	8006de6 <__strtok_r+0x32>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f3      	beq.n	8006de2 <__strtok_r+0x2e>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006e00:	6014      	str	r4, [r2, #0]
 8006e02:	e7ed      	b.n	8006de0 <__strtok_r+0x2c>

08006e04 <_close_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	; (8006e20 <_close_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fb f89d 	bl	8001f4e <_close>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_close_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_close_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	20001888 	.word	0x20001888

08006e24 <_lseek_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_lseek_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fb f8b2 	bl	8001f9c <_lseek>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_lseek_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_lseek_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20001888 	.word	0x20001888

08006e48 <_read_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d07      	ldr	r5, [pc, #28]	; (8006e68 <_read_r+0x20>)
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	2200      	movs	r2, #0
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fb f840 	bl	8001edc <_read>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_read_r+0x1e>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_read_r+0x1e>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	20001888 	.word	0x20001888

08006e6c <_write_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d07      	ldr	r5, [pc, #28]	; (8006e8c <_write_r+0x20>)
 8006e70:	4604      	mov	r4, r0
 8006e72:	4608      	mov	r0, r1
 8006e74:	4611      	mov	r1, r2
 8006e76:	2200      	movs	r2, #0
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7fb f84b 	bl	8001f16 <_write>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_write_r+0x1e>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_write_r+0x1e>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	20001888 	.word	0x20001888

08006e90 <__errno>:
 8006e90:	4b01      	ldr	r3, [pc, #4]	; (8006e98 <__errno+0x8>)
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	20000e78 	.word	0x20000e78

08006e9c <__libc_init_array>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4d0d      	ldr	r5, [pc, #52]	; (8006ed4 <__libc_init_array+0x38>)
 8006ea0:	4c0d      	ldr	r4, [pc, #52]	; (8006ed8 <__libc_init_array+0x3c>)
 8006ea2:	1b64      	subs	r4, r4, r5
 8006ea4:	10a4      	asrs	r4, r4, #2
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	42a6      	cmp	r6, r4
 8006eaa:	d109      	bne.n	8006ec0 <__libc_init_array+0x24>
 8006eac:	4d0b      	ldr	r5, [pc, #44]	; (8006edc <__libc_init_array+0x40>)
 8006eae:	4c0c      	ldr	r4, [pc, #48]	; (8006ee0 <__libc_init_array+0x44>)
 8006eb0:	f001 fa88 	bl	80083c4 <_init>
 8006eb4:	1b64      	subs	r4, r4, r5
 8006eb6:	10a4      	asrs	r4, r4, #2
 8006eb8:	2600      	movs	r6, #0
 8006eba:	42a6      	cmp	r6, r4
 8006ebc:	d105      	bne.n	8006eca <__libc_init_array+0x2e>
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec4:	4798      	blx	r3
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__libc_init_array+0xc>
 8006eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ece:	4798      	blx	r3
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	e7f2      	b.n	8006eba <__libc_init_array+0x1e>
 8006ed4:	08008778 	.word	0x08008778
 8006ed8:	08008778 	.word	0x08008778
 8006edc:	08008778 	.word	0x08008778
 8006ee0:	0800877c 	.word	0x0800877c

08006ee4 <__retarget_lock_init_recursive>:
 8006ee4:	4770      	bx	lr

08006ee6 <__retarget_lock_acquire_recursive>:
 8006ee6:	4770      	bx	lr

08006ee8 <__retarget_lock_release_recursive>:
 8006ee8:	4770      	bx	lr
	...

08006eec <__assert_func>:
 8006eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eee:	4614      	mov	r4, r2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <__assert_func+0x2c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	68d8      	ldr	r0, [r3, #12]
 8006efa:	b14c      	cbz	r4, 8006f10 <__assert_func+0x24>
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <__assert_func+0x30>)
 8006efe:	9100      	str	r1, [sp, #0]
 8006f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f04:	4906      	ldr	r1, [pc, #24]	; (8006f20 <__assert_func+0x34>)
 8006f06:	462b      	mov	r3, r5
 8006f08:	f000 fca4 	bl	8007854 <fiprintf>
 8006f0c:	f000 fcec 	bl	80078e8 <abort>
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <__assert_func+0x38>)
 8006f12:	461c      	mov	r4, r3
 8006f14:	e7f3      	b.n	8006efe <__assert_func+0x12>
 8006f16:	bf00      	nop
 8006f18:	20000e78 	.word	0x20000e78
 8006f1c:	080086fe 	.word	0x080086fe
 8006f20:	0800870b 	.word	0x0800870b
 8006f24:	08008739 	.word	0x08008739

08006f28 <_free_r>:
 8006f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f2a:	2900      	cmp	r1, #0
 8006f2c:	d044      	beq.n	8006fb8 <_free_r+0x90>
 8006f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f32:	9001      	str	r0, [sp, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f1a1 0404 	sub.w	r4, r1, #4
 8006f3a:	bfb8      	it	lt
 8006f3c:	18e4      	addlt	r4, r4, r3
 8006f3e:	f000 f8e7 	bl	8007110 <__malloc_lock>
 8006f42:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <_free_r+0x94>)
 8006f44:	9801      	ldr	r0, [sp, #4]
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	b933      	cbnz	r3, 8006f58 <_free_r+0x30>
 8006f4a:	6063      	str	r3, [r4, #4]
 8006f4c:	6014      	str	r4, [r2, #0]
 8006f4e:	b003      	add	sp, #12
 8006f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f54:	f000 b8e2 	b.w	800711c <__malloc_unlock>
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	d908      	bls.n	8006f6e <_free_r+0x46>
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	1961      	adds	r1, r4, r5
 8006f60:	428b      	cmp	r3, r1
 8006f62:	bf01      	itttt	eq
 8006f64:	6819      	ldreq	r1, [r3, #0]
 8006f66:	685b      	ldreq	r3, [r3, #4]
 8006f68:	1949      	addeq	r1, r1, r5
 8006f6a:	6021      	streq	r1, [r4, #0]
 8006f6c:	e7ed      	b.n	8006f4a <_free_r+0x22>
 8006f6e:	461a      	mov	r2, r3
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	b10b      	cbz	r3, 8006f78 <_free_r+0x50>
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d9fa      	bls.n	8006f6e <_free_r+0x46>
 8006f78:	6811      	ldr	r1, [r2, #0]
 8006f7a:	1855      	adds	r5, r2, r1
 8006f7c:	42a5      	cmp	r5, r4
 8006f7e:	d10b      	bne.n	8006f98 <_free_r+0x70>
 8006f80:	6824      	ldr	r4, [r4, #0]
 8006f82:	4421      	add	r1, r4
 8006f84:	1854      	adds	r4, r2, r1
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	6011      	str	r1, [r2, #0]
 8006f8a:	d1e0      	bne.n	8006f4e <_free_r+0x26>
 8006f8c:	681c      	ldr	r4, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	6053      	str	r3, [r2, #4]
 8006f92:	440c      	add	r4, r1
 8006f94:	6014      	str	r4, [r2, #0]
 8006f96:	e7da      	b.n	8006f4e <_free_r+0x26>
 8006f98:	d902      	bls.n	8006fa0 <_free_r+0x78>
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	e7d6      	b.n	8006f4e <_free_r+0x26>
 8006fa0:	6825      	ldr	r5, [r4, #0]
 8006fa2:	1961      	adds	r1, r4, r5
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	bf04      	itt	eq
 8006fa8:	6819      	ldreq	r1, [r3, #0]
 8006faa:	685b      	ldreq	r3, [r3, #4]
 8006fac:	6063      	str	r3, [r4, #4]
 8006fae:	bf04      	itt	eq
 8006fb0:	1949      	addeq	r1, r1, r5
 8006fb2:	6021      	streq	r1, [r4, #0]
 8006fb4:	6054      	str	r4, [r2, #4]
 8006fb6:	e7ca      	b.n	8006f4e <_free_r+0x26>
 8006fb8:	b003      	add	sp, #12
 8006fba:	bd30      	pop	{r4, r5, pc}
 8006fbc:	20001890 	.word	0x20001890

08006fc0 <malloc>:
 8006fc0:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <malloc+0xc>)
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	f000 b823 	b.w	8007010 <_malloc_r>
 8006fca:	bf00      	nop
 8006fcc:	20000e78 	.word	0x20000e78

08006fd0 <sbrk_aligned>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4e0e      	ldr	r6, [pc, #56]	; (800700c <sbrk_aligned+0x3c>)
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	6831      	ldr	r1, [r6, #0]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	b911      	cbnz	r1, 8006fe2 <sbrk_aligned+0x12>
 8006fdc:	f000 fc66 	bl	80078ac <_sbrk_r>
 8006fe0:	6030      	str	r0, [r6, #0]
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 fc61 	bl	80078ac <_sbrk_r>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d00a      	beq.n	8007004 <sbrk_aligned+0x34>
 8006fee:	1cc4      	adds	r4, r0, #3
 8006ff0:	f024 0403 	bic.w	r4, r4, #3
 8006ff4:	42a0      	cmp	r0, r4
 8006ff6:	d007      	beq.n	8007008 <sbrk_aligned+0x38>
 8006ff8:	1a21      	subs	r1, r4, r0
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f000 fc56 	bl	80078ac <_sbrk_r>
 8007000:	3001      	adds	r0, #1
 8007002:	d101      	bne.n	8007008 <sbrk_aligned+0x38>
 8007004:	f04f 34ff 	mov.w	r4, #4294967295
 8007008:	4620      	mov	r0, r4
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	20001894 	.word	0x20001894

08007010 <_malloc_r>:
 8007010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007014:	1ccd      	adds	r5, r1, #3
 8007016:	f025 0503 	bic.w	r5, r5, #3
 800701a:	3508      	adds	r5, #8
 800701c:	2d0c      	cmp	r5, #12
 800701e:	bf38      	it	cc
 8007020:	250c      	movcc	r5, #12
 8007022:	2d00      	cmp	r5, #0
 8007024:	4607      	mov	r7, r0
 8007026:	db01      	blt.n	800702c <_malloc_r+0x1c>
 8007028:	42a9      	cmp	r1, r5
 800702a:	d905      	bls.n	8007038 <_malloc_r+0x28>
 800702c:	230c      	movs	r3, #12
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	2600      	movs	r6, #0
 8007032:	4630      	mov	r0, r6
 8007034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007038:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800710c <_malloc_r+0xfc>
 800703c:	f000 f868 	bl	8007110 <__malloc_lock>
 8007040:	f8d8 3000 	ldr.w	r3, [r8]
 8007044:	461c      	mov	r4, r3
 8007046:	bb5c      	cbnz	r4, 80070a0 <_malloc_r+0x90>
 8007048:	4629      	mov	r1, r5
 800704a:	4638      	mov	r0, r7
 800704c:	f7ff ffc0 	bl	8006fd0 <sbrk_aligned>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	4604      	mov	r4, r0
 8007054:	d155      	bne.n	8007102 <_malloc_r+0xf2>
 8007056:	f8d8 4000 	ldr.w	r4, [r8]
 800705a:	4626      	mov	r6, r4
 800705c:	2e00      	cmp	r6, #0
 800705e:	d145      	bne.n	80070ec <_malloc_r+0xdc>
 8007060:	2c00      	cmp	r4, #0
 8007062:	d048      	beq.n	80070f6 <_malloc_r+0xe6>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	4631      	mov	r1, r6
 8007068:	4638      	mov	r0, r7
 800706a:	eb04 0903 	add.w	r9, r4, r3
 800706e:	f000 fc1d 	bl	80078ac <_sbrk_r>
 8007072:	4581      	cmp	r9, r0
 8007074:	d13f      	bne.n	80070f6 <_malloc_r+0xe6>
 8007076:	6821      	ldr	r1, [r4, #0]
 8007078:	1a6d      	subs	r5, r5, r1
 800707a:	4629      	mov	r1, r5
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff ffa7 	bl	8006fd0 <sbrk_aligned>
 8007082:	3001      	adds	r0, #1
 8007084:	d037      	beq.n	80070f6 <_malloc_r+0xe6>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	442b      	add	r3, r5
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	f8d8 3000 	ldr.w	r3, [r8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d038      	beq.n	8007106 <_malloc_r+0xf6>
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	42a2      	cmp	r2, r4
 8007098:	d12b      	bne.n	80070f2 <_malloc_r+0xe2>
 800709a:	2200      	movs	r2, #0
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	e00f      	b.n	80070c0 <_malloc_r+0xb0>
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	1b52      	subs	r2, r2, r5
 80070a4:	d41f      	bmi.n	80070e6 <_malloc_r+0xd6>
 80070a6:	2a0b      	cmp	r2, #11
 80070a8:	d917      	bls.n	80070da <_malloc_r+0xca>
 80070aa:	1961      	adds	r1, r4, r5
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	6025      	str	r5, [r4, #0]
 80070b0:	bf18      	it	ne
 80070b2:	6059      	strne	r1, [r3, #4]
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	bf08      	it	eq
 80070b8:	f8c8 1000 	streq.w	r1, [r8]
 80070bc:	5162      	str	r2, [r4, r5]
 80070be:	604b      	str	r3, [r1, #4]
 80070c0:	4638      	mov	r0, r7
 80070c2:	f104 060b 	add.w	r6, r4, #11
 80070c6:	f000 f829 	bl	800711c <__malloc_unlock>
 80070ca:	f026 0607 	bic.w	r6, r6, #7
 80070ce:	1d23      	adds	r3, r4, #4
 80070d0:	1af2      	subs	r2, r6, r3
 80070d2:	d0ae      	beq.n	8007032 <_malloc_r+0x22>
 80070d4:	1b9b      	subs	r3, r3, r6
 80070d6:	50a3      	str	r3, [r4, r2]
 80070d8:	e7ab      	b.n	8007032 <_malloc_r+0x22>
 80070da:	42a3      	cmp	r3, r4
 80070dc:	6862      	ldr	r2, [r4, #4]
 80070de:	d1dd      	bne.n	800709c <_malloc_r+0x8c>
 80070e0:	f8c8 2000 	str.w	r2, [r8]
 80070e4:	e7ec      	b.n	80070c0 <_malloc_r+0xb0>
 80070e6:	4623      	mov	r3, r4
 80070e8:	6864      	ldr	r4, [r4, #4]
 80070ea:	e7ac      	b.n	8007046 <_malloc_r+0x36>
 80070ec:	4634      	mov	r4, r6
 80070ee:	6876      	ldr	r6, [r6, #4]
 80070f0:	e7b4      	b.n	800705c <_malloc_r+0x4c>
 80070f2:	4613      	mov	r3, r2
 80070f4:	e7cc      	b.n	8007090 <_malloc_r+0x80>
 80070f6:	230c      	movs	r3, #12
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4638      	mov	r0, r7
 80070fc:	f000 f80e 	bl	800711c <__malloc_unlock>
 8007100:	e797      	b.n	8007032 <_malloc_r+0x22>
 8007102:	6025      	str	r5, [r4, #0]
 8007104:	e7dc      	b.n	80070c0 <_malloc_r+0xb0>
 8007106:	605b      	str	r3, [r3, #4]
 8007108:	deff      	udf	#255	; 0xff
 800710a:	bf00      	nop
 800710c:	20001890 	.word	0x20001890

08007110 <__malloc_lock>:
 8007110:	4801      	ldr	r0, [pc, #4]	; (8007118 <__malloc_lock+0x8>)
 8007112:	f7ff bee8 	b.w	8006ee6 <__retarget_lock_acquire_recursive>
 8007116:	bf00      	nop
 8007118:	2000188c 	.word	0x2000188c

0800711c <__malloc_unlock>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__malloc_unlock+0x8>)
 800711e:	f7ff bee3 	b.w	8006ee8 <__retarget_lock_release_recursive>
 8007122:	bf00      	nop
 8007124:	2000188c 	.word	0x2000188c

08007128 <__ssputs_r>:
 8007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	688e      	ldr	r6, [r1, #8]
 800712e:	461f      	mov	r7, r3
 8007130:	42be      	cmp	r6, r7
 8007132:	680b      	ldr	r3, [r1, #0]
 8007134:	4682      	mov	sl, r0
 8007136:	460c      	mov	r4, r1
 8007138:	4690      	mov	r8, r2
 800713a:	d82c      	bhi.n	8007196 <__ssputs_r+0x6e>
 800713c:	898a      	ldrh	r2, [r1, #12]
 800713e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007142:	d026      	beq.n	8007192 <__ssputs_r+0x6a>
 8007144:	6965      	ldr	r5, [r4, #20]
 8007146:	6909      	ldr	r1, [r1, #16]
 8007148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800714c:	eba3 0901 	sub.w	r9, r3, r1
 8007150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007154:	1c7b      	adds	r3, r7, #1
 8007156:	444b      	add	r3, r9
 8007158:	106d      	asrs	r5, r5, #1
 800715a:	429d      	cmp	r5, r3
 800715c:	bf38      	it	cc
 800715e:	461d      	movcc	r5, r3
 8007160:	0553      	lsls	r3, r2, #21
 8007162:	d527      	bpl.n	80071b4 <__ssputs_r+0x8c>
 8007164:	4629      	mov	r1, r5
 8007166:	f7ff ff53 	bl	8007010 <_malloc_r>
 800716a:	4606      	mov	r6, r0
 800716c:	b360      	cbz	r0, 80071c8 <__ssputs_r+0xa0>
 800716e:	6921      	ldr	r1, [r4, #16]
 8007170:	464a      	mov	r2, r9
 8007172:	f000 fbab 	bl	80078cc <memcpy>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800717c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007180:	81a3      	strh	r3, [r4, #12]
 8007182:	6126      	str	r6, [r4, #16]
 8007184:	6165      	str	r5, [r4, #20]
 8007186:	444e      	add	r6, r9
 8007188:	eba5 0509 	sub.w	r5, r5, r9
 800718c:	6026      	str	r6, [r4, #0]
 800718e:	60a5      	str	r5, [r4, #8]
 8007190:	463e      	mov	r6, r7
 8007192:	42be      	cmp	r6, r7
 8007194:	d900      	bls.n	8007198 <__ssputs_r+0x70>
 8007196:	463e      	mov	r6, r7
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	4632      	mov	r2, r6
 800719c:	4641      	mov	r1, r8
 800719e:	f000 fb6b 	bl	8007878 <memmove>
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	1b9b      	subs	r3, r3, r6
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	4433      	add	r3, r6
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	2000      	movs	r0, #0
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	462a      	mov	r2, r5
 80071b6:	f000 fb9e 	bl	80078f6 <_realloc_r>
 80071ba:	4606      	mov	r6, r0
 80071bc:	2800      	cmp	r0, #0
 80071be:	d1e0      	bne.n	8007182 <__ssputs_r+0x5a>
 80071c0:	6921      	ldr	r1, [r4, #16]
 80071c2:	4650      	mov	r0, sl
 80071c4:	f7ff feb0 	bl	8006f28 <_free_r>
 80071c8:	230c      	movs	r3, #12
 80071ca:	f8ca 3000 	str.w	r3, [sl]
 80071ce:	89a3      	ldrh	r3, [r4, #12]
 80071d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	f04f 30ff 	mov.w	r0, #4294967295
 80071da:	e7e9      	b.n	80071b0 <__ssputs_r+0x88>

080071dc <_svfiprintf_r>:
 80071dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e0:	4698      	mov	r8, r3
 80071e2:	898b      	ldrh	r3, [r1, #12]
 80071e4:	061b      	lsls	r3, r3, #24
 80071e6:	b09d      	sub	sp, #116	; 0x74
 80071e8:	4607      	mov	r7, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	d50e      	bpl.n	800720e <_svfiprintf_r+0x32>
 80071f0:	690b      	ldr	r3, [r1, #16]
 80071f2:	b963      	cbnz	r3, 800720e <_svfiprintf_r+0x32>
 80071f4:	2140      	movs	r1, #64	; 0x40
 80071f6:	f7ff ff0b 	bl	8007010 <_malloc_r>
 80071fa:	6028      	str	r0, [r5, #0]
 80071fc:	6128      	str	r0, [r5, #16]
 80071fe:	b920      	cbnz	r0, 800720a <_svfiprintf_r+0x2e>
 8007200:	230c      	movs	r3, #12
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	f04f 30ff 	mov.w	r0, #4294967295
 8007208:	e0d0      	b.n	80073ac <_svfiprintf_r+0x1d0>
 800720a:	2340      	movs	r3, #64	; 0x40
 800720c:	616b      	str	r3, [r5, #20]
 800720e:	2300      	movs	r3, #0
 8007210:	9309      	str	r3, [sp, #36]	; 0x24
 8007212:	2320      	movs	r3, #32
 8007214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007218:	f8cd 800c 	str.w	r8, [sp, #12]
 800721c:	2330      	movs	r3, #48	; 0x30
 800721e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073c4 <_svfiprintf_r+0x1e8>
 8007222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007226:	f04f 0901 	mov.w	r9, #1
 800722a:	4623      	mov	r3, r4
 800722c:	469a      	mov	sl, r3
 800722e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007232:	b10a      	cbz	r2, 8007238 <_svfiprintf_r+0x5c>
 8007234:	2a25      	cmp	r2, #37	; 0x25
 8007236:	d1f9      	bne.n	800722c <_svfiprintf_r+0x50>
 8007238:	ebba 0b04 	subs.w	fp, sl, r4
 800723c:	d00b      	beq.n	8007256 <_svfiprintf_r+0x7a>
 800723e:	465b      	mov	r3, fp
 8007240:	4622      	mov	r2, r4
 8007242:	4629      	mov	r1, r5
 8007244:	4638      	mov	r0, r7
 8007246:	f7ff ff6f 	bl	8007128 <__ssputs_r>
 800724a:	3001      	adds	r0, #1
 800724c:	f000 80a9 	beq.w	80073a2 <_svfiprintf_r+0x1c6>
 8007250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007252:	445a      	add	r2, fp
 8007254:	9209      	str	r2, [sp, #36]	; 0x24
 8007256:	f89a 3000 	ldrb.w	r3, [sl]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 80a1 	beq.w	80073a2 <_svfiprintf_r+0x1c6>
 8007260:	2300      	movs	r3, #0
 8007262:	f04f 32ff 	mov.w	r2, #4294967295
 8007266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800726a:	f10a 0a01 	add.w	sl, sl, #1
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	9307      	str	r3, [sp, #28]
 8007272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007276:	931a      	str	r3, [sp, #104]	; 0x68
 8007278:	4654      	mov	r4, sl
 800727a:	2205      	movs	r2, #5
 800727c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007280:	4850      	ldr	r0, [pc, #320]	; (80073c4 <_svfiprintf_r+0x1e8>)
 8007282:	f7f8 ffc5 	bl	8000210 <memchr>
 8007286:	9a04      	ldr	r2, [sp, #16]
 8007288:	b9d8      	cbnz	r0, 80072c2 <_svfiprintf_r+0xe6>
 800728a:	06d0      	lsls	r0, r2, #27
 800728c:	bf44      	itt	mi
 800728e:	2320      	movmi	r3, #32
 8007290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007294:	0711      	lsls	r1, r2, #28
 8007296:	bf44      	itt	mi
 8007298:	232b      	movmi	r3, #43	; 0x2b
 800729a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729e:	f89a 3000 	ldrb.w	r3, [sl]
 80072a2:	2b2a      	cmp	r3, #42	; 0x2a
 80072a4:	d015      	beq.n	80072d2 <_svfiprintf_r+0xf6>
 80072a6:	9a07      	ldr	r2, [sp, #28]
 80072a8:	4654      	mov	r4, sl
 80072aa:	2000      	movs	r0, #0
 80072ac:	f04f 0c0a 	mov.w	ip, #10
 80072b0:	4621      	mov	r1, r4
 80072b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b6:	3b30      	subs	r3, #48	; 0x30
 80072b8:	2b09      	cmp	r3, #9
 80072ba:	d94d      	bls.n	8007358 <_svfiprintf_r+0x17c>
 80072bc:	b1b0      	cbz	r0, 80072ec <_svfiprintf_r+0x110>
 80072be:	9207      	str	r2, [sp, #28]
 80072c0:	e014      	b.n	80072ec <_svfiprintf_r+0x110>
 80072c2:	eba0 0308 	sub.w	r3, r0, r8
 80072c6:	fa09 f303 	lsl.w	r3, r9, r3
 80072ca:	4313      	orrs	r3, r2
 80072cc:	9304      	str	r3, [sp, #16]
 80072ce:	46a2      	mov	sl, r4
 80072d0:	e7d2      	b.n	8007278 <_svfiprintf_r+0x9c>
 80072d2:	9b03      	ldr	r3, [sp, #12]
 80072d4:	1d19      	adds	r1, r3, #4
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	9103      	str	r1, [sp, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfbb      	ittet	lt
 80072de:	425b      	neglt	r3, r3
 80072e0:	f042 0202 	orrlt.w	r2, r2, #2
 80072e4:	9307      	strge	r3, [sp, #28]
 80072e6:	9307      	strlt	r3, [sp, #28]
 80072e8:	bfb8      	it	lt
 80072ea:	9204      	strlt	r2, [sp, #16]
 80072ec:	7823      	ldrb	r3, [r4, #0]
 80072ee:	2b2e      	cmp	r3, #46	; 0x2e
 80072f0:	d10c      	bne.n	800730c <_svfiprintf_r+0x130>
 80072f2:	7863      	ldrb	r3, [r4, #1]
 80072f4:	2b2a      	cmp	r3, #42	; 0x2a
 80072f6:	d134      	bne.n	8007362 <_svfiprintf_r+0x186>
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	1d1a      	adds	r2, r3, #4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	9203      	str	r2, [sp, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	bfb8      	it	lt
 8007304:	f04f 33ff 	movlt.w	r3, #4294967295
 8007308:	3402      	adds	r4, #2
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80073d4 <_svfiprintf_r+0x1f8>
 8007310:	7821      	ldrb	r1, [r4, #0]
 8007312:	2203      	movs	r2, #3
 8007314:	4650      	mov	r0, sl
 8007316:	f7f8 ff7b 	bl	8000210 <memchr>
 800731a:	b138      	cbz	r0, 800732c <_svfiprintf_r+0x150>
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	eba0 000a 	sub.w	r0, r0, sl
 8007322:	2240      	movs	r2, #64	; 0x40
 8007324:	4082      	lsls	r2, r0
 8007326:	4313      	orrs	r3, r2
 8007328:	3401      	adds	r4, #1
 800732a:	9304      	str	r3, [sp, #16]
 800732c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007330:	4825      	ldr	r0, [pc, #148]	; (80073c8 <_svfiprintf_r+0x1ec>)
 8007332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007336:	2206      	movs	r2, #6
 8007338:	f7f8 ff6a 	bl	8000210 <memchr>
 800733c:	2800      	cmp	r0, #0
 800733e:	d038      	beq.n	80073b2 <_svfiprintf_r+0x1d6>
 8007340:	4b22      	ldr	r3, [pc, #136]	; (80073cc <_svfiprintf_r+0x1f0>)
 8007342:	bb1b      	cbnz	r3, 800738c <_svfiprintf_r+0x1b0>
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	3307      	adds	r3, #7
 8007348:	f023 0307 	bic.w	r3, r3, #7
 800734c:	3308      	adds	r3, #8
 800734e:	9303      	str	r3, [sp, #12]
 8007350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007352:	4433      	add	r3, r6
 8007354:	9309      	str	r3, [sp, #36]	; 0x24
 8007356:	e768      	b.n	800722a <_svfiprintf_r+0x4e>
 8007358:	fb0c 3202 	mla	r2, ip, r2, r3
 800735c:	460c      	mov	r4, r1
 800735e:	2001      	movs	r0, #1
 8007360:	e7a6      	b.n	80072b0 <_svfiprintf_r+0xd4>
 8007362:	2300      	movs	r3, #0
 8007364:	3401      	adds	r4, #1
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	4619      	mov	r1, r3
 800736a:	f04f 0c0a 	mov.w	ip, #10
 800736e:	4620      	mov	r0, r4
 8007370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007374:	3a30      	subs	r2, #48	; 0x30
 8007376:	2a09      	cmp	r2, #9
 8007378:	d903      	bls.n	8007382 <_svfiprintf_r+0x1a6>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0c6      	beq.n	800730c <_svfiprintf_r+0x130>
 800737e:	9105      	str	r1, [sp, #20]
 8007380:	e7c4      	b.n	800730c <_svfiprintf_r+0x130>
 8007382:	fb0c 2101 	mla	r1, ip, r1, r2
 8007386:	4604      	mov	r4, r0
 8007388:	2301      	movs	r3, #1
 800738a:	e7f0      	b.n	800736e <_svfiprintf_r+0x192>
 800738c:	ab03      	add	r3, sp, #12
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	462a      	mov	r2, r5
 8007392:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <_svfiprintf_r+0x1f4>)
 8007394:	a904      	add	r1, sp, #16
 8007396:	4638      	mov	r0, r7
 8007398:	f3af 8000 	nop.w
 800739c:	1c42      	adds	r2, r0, #1
 800739e:	4606      	mov	r6, r0
 80073a0:	d1d6      	bne.n	8007350 <_svfiprintf_r+0x174>
 80073a2:	89ab      	ldrh	r3, [r5, #12]
 80073a4:	065b      	lsls	r3, r3, #25
 80073a6:	f53f af2d 	bmi.w	8007204 <_svfiprintf_r+0x28>
 80073aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ac:	b01d      	add	sp, #116	; 0x74
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	ab03      	add	r3, sp, #12
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	462a      	mov	r2, r5
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <_svfiprintf_r+0x1f4>)
 80073ba:	a904      	add	r1, sp, #16
 80073bc:	4638      	mov	r0, r7
 80073be:	f000 f879 	bl	80074b4 <_printf_i>
 80073c2:	e7eb      	b.n	800739c <_svfiprintf_r+0x1c0>
 80073c4:	0800873a 	.word	0x0800873a
 80073c8:	08008744 	.word	0x08008744
 80073cc:	00000000 	.word	0x00000000
 80073d0:	08007129 	.word	0x08007129
 80073d4:	08008740 	.word	0x08008740

080073d8 <_printf_common>:
 80073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	4616      	mov	r6, r2
 80073de:	4699      	mov	r9, r3
 80073e0:	688a      	ldr	r2, [r1, #8]
 80073e2:	690b      	ldr	r3, [r1, #16]
 80073e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	bfb8      	it	lt
 80073ec:	4613      	movlt	r3, r2
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f4:	4607      	mov	r7, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b10a      	cbz	r2, 80073fe <_printf_common+0x26>
 80073fa:	3301      	adds	r3, #1
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	0699      	lsls	r1, r3, #26
 8007402:	bf42      	ittt	mi
 8007404:	6833      	ldrmi	r3, [r6, #0]
 8007406:	3302      	addmi	r3, #2
 8007408:	6033      	strmi	r3, [r6, #0]
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	f015 0506 	ands.w	r5, r5, #6
 8007410:	d106      	bne.n	8007420 <_printf_common+0x48>
 8007412:	f104 0a19 	add.w	sl, r4, #25
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	6832      	ldr	r2, [r6, #0]
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	42ab      	cmp	r3, r5
 800741e:	dc26      	bgt.n	800746e <_printf_common+0x96>
 8007420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007424:	1e13      	subs	r3, r2, #0
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	bf18      	it	ne
 800742a:	2301      	movne	r3, #1
 800742c:	0692      	lsls	r2, r2, #26
 800742e:	d42b      	bmi.n	8007488 <_printf_common+0xb0>
 8007430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007434:	4649      	mov	r1, r9
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	3001      	adds	r0, #1
 800743c:	d01e      	beq.n	800747c <_printf_common+0xa4>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	6922      	ldr	r2, [r4, #16]
 8007442:	f003 0306 	and.w	r3, r3, #6
 8007446:	2b04      	cmp	r3, #4
 8007448:	bf02      	ittt	eq
 800744a:	68e5      	ldreq	r5, [r4, #12]
 800744c:	6833      	ldreq	r3, [r6, #0]
 800744e:	1aed      	subeq	r5, r5, r3
 8007450:	68a3      	ldr	r3, [r4, #8]
 8007452:	bf0c      	ite	eq
 8007454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007458:	2500      	movne	r5, #0
 800745a:	4293      	cmp	r3, r2
 800745c:	bfc4      	itt	gt
 800745e:	1a9b      	subgt	r3, r3, r2
 8007460:	18ed      	addgt	r5, r5, r3
 8007462:	2600      	movs	r6, #0
 8007464:	341a      	adds	r4, #26
 8007466:	42b5      	cmp	r5, r6
 8007468:	d11a      	bne.n	80074a0 <_printf_common+0xc8>
 800746a:	2000      	movs	r0, #0
 800746c:	e008      	b.n	8007480 <_printf_common+0xa8>
 800746e:	2301      	movs	r3, #1
 8007470:	4652      	mov	r2, sl
 8007472:	4649      	mov	r1, r9
 8007474:	4638      	mov	r0, r7
 8007476:	47c0      	blx	r8
 8007478:	3001      	adds	r0, #1
 800747a:	d103      	bne.n	8007484 <_printf_common+0xac>
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007484:	3501      	adds	r5, #1
 8007486:	e7c6      	b.n	8007416 <_printf_common+0x3e>
 8007488:	18e1      	adds	r1, r4, r3
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	2030      	movs	r0, #48	; 0x30
 800748e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007492:	4422      	add	r2, r4
 8007494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800749c:	3302      	adds	r3, #2
 800749e:	e7c7      	b.n	8007430 <_printf_common+0x58>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4622      	mov	r2, r4
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d0e6      	beq.n	800747c <_printf_common+0xa4>
 80074ae:	3601      	adds	r6, #1
 80074b0:	e7d9      	b.n	8007466 <_printf_common+0x8e>
	...

080074b4 <_printf_i>:
 80074b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	7e0f      	ldrb	r7, [r1, #24]
 80074ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074bc:	2f78      	cmp	r7, #120	; 0x78
 80074be:	4691      	mov	r9, r2
 80074c0:	4680      	mov	r8, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	469a      	mov	sl, r3
 80074c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074ca:	d807      	bhi.n	80074dc <_printf_i+0x28>
 80074cc:	2f62      	cmp	r7, #98	; 0x62
 80074ce:	d80a      	bhi.n	80074e6 <_printf_i+0x32>
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	f000 80d4 	beq.w	800767e <_printf_i+0x1ca>
 80074d6:	2f58      	cmp	r7, #88	; 0x58
 80074d8:	f000 80c0 	beq.w	800765c <_printf_i+0x1a8>
 80074dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e4:	e03a      	b.n	800755c <_printf_i+0xa8>
 80074e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074ea:	2b15      	cmp	r3, #21
 80074ec:	d8f6      	bhi.n	80074dc <_printf_i+0x28>
 80074ee:	a101      	add	r1, pc, #4	; (adr r1, 80074f4 <_printf_i+0x40>)
 80074f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	08007561 	.word	0x08007561
 80074fc:	080074dd 	.word	0x080074dd
 8007500:	080074dd 	.word	0x080074dd
 8007504:	080074dd 	.word	0x080074dd
 8007508:	080074dd 	.word	0x080074dd
 800750c:	08007561 	.word	0x08007561
 8007510:	080074dd 	.word	0x080074dd
 8007514:	080074dd 	.word	0x080074dd
 8007518:	080074dd 	.word	0x080074dd
 800751c:	080074dd 	.word	0x080074dd
 8007520:	08007665 	.word	0x08007665
 8007524:	0800758d 	.word	0x0800758d
 8007528:	0800761f 	.word	0x0800761f
 800752c:	080074dd 	.word	0x080074dd
 8007530:	080074dd 	.word	0x080074dd
 8007534:	08007687 	.word	0x08007687
 8007538:	080074dd 	.word	0x080074dd
 800753c:	0800758d 	.word	0x0800758d
 8007540:	080074dd 	.word	0x080074dd
 8007544:	080074dd 	.word	0x080074dd
 8007548:	08007627 	.word	0x08007627
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	1d1a      	adds	r2, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	602a      	str	r2, [r5, #0]
 8007554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800755c:	2301      	movs	r3, #1
 800755e:	e09f      	b.n	80076a0 <_printf_i+0x1ec>
 8007560:	6820      	ldr	r0, [r4, #0]
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	0607      	lsls	r7, r0, #24
 8007566:	f103 0104 	add.w	r1, r3, #4
 800756a:	6029      	str	r1, [r5, #0]
 800756c:	d501      	bpl.n	8007572 <_printf_i+0xbe>
 800756e:	681e      	ldr	r6, [r3, #0]
 8007570:	e003      	b.n	800757a <_printf_i+0xc6>
 8007572:	0646      	lsls	r6, r0, #25
 8007574:	d5fb      	bpl.n	800756e <_printf_i+0xba>
 8007576:	f9b3 6000 	ldrsh.w	r6, [r3]
 800757a:	2e00      	cmp	r6, #0
 800757c:	da03      	bge.n	8007586 <_printf_i+0xd2>
 800757e:	232d      	movs	r3, #45	; 0x2d
 8007580:	4276      	negs	r6, r6
 8007582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007586:	485a      	ldr	r0, [pc, #360]	; (80076f0 <_printf_i+0x23c>)
 8007588:	230a      	movs	r3, #10
 800758a:	e012      	b.n	80075b2 <_printf_i+0xfe>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	6820      	ldr	r0, [r4, #0]
 8007590:	1d19      	adds	r1, r3, #4
 8007592:	6029      	str	r1, [r5, #0]
 8007594:	0605      	lsls	r5, r0, #24
 8007596:	d501      	bpl.n	800759c <_printf_i+0xe8>
 8007598:	681e      	ldr	r6, [r3, #0]
 800759a:	e002      	b.n	80075a2 <_printf_i+0xee>
 800759c:	0641      	lsls	r1, r0, #25
 800759e:	d5fb      	bpl.n	8007598 <_printf_i+0xe4>
 80075a0:	881e      	ldrh	r6, [r3, #0]
 80075a2:	4853      	ldr	r0, [pc, #332]	; (80076f0 <_printf_i+0x23c>)
 80075a4:	2f6f      	cmp	r7, #111	; 0x6f
 80075a6:	bf0c      	ite	eq
 80075a8:	2308      	moveq	r3, #8
 80075aa:	230a      	movne	r3, #10
 80075ac:	2100      	movs	r1, #0
 80075ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075b2:	6865      	ldr	r5, [r4, #4]
 80075b4:	60a5      	str	r5, [r4, #8]
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	bfa2      	ittt	ge
 80075ba:	6821      	ldrge	r1, [r4, #0]
 80075bc:	f021 0104 	bicge.w	r1, r1, #4
 80075c0:	6021      	strge	r1, [r4, #0]
 80075c2:	b90e      	cbnz	r6, 80075c8 <_printf_i+0x114>
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	d04b      	beq.n	8007660 <_printf_i+0x1ac>
 80075c8:	4615      	mov	r5, r2
 80075ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ce:	fb03 6711 	mls	r7, r3, r1, r6
 80075d2:	5dc7      	ldrb	r7, [r0, r7]
 80075d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075d8:	4637      	mov	r7, r6
 80075da:	42bb      	cmp	r3, r7
 80075dc:	460e      	mov	r6, r1
 80075de:	d9f4      	bls.n	80075ca <_printf_i+0x116>
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d10b      	bne.n	80075fc <_printf_i+0x148>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	07de      	lsls	r6, r3, #31
 80075e8:	d508      	bpl.n	80075fc <_printf_i+0x148>
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	6861      	ldr	r1, [r4, #4]
 80075ee:	4299      	cmp	r1, r3
 80075f0:	bfde      	ittt	le
 80075f2:	2330      	movle	r3, #48	; 0x30
 80075f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075fc:	1b52      	subs	r2, r2, r5
 80075fe:	6122      	str	r2, [r4, #16]
 8007600:	f8cd a000 	str.w	sl, [sp]
 8007604:	464b      	mov	r3, r9
 8007606:	aa03      	add	r2, sp, #12
 8007608:	4621      	mov	r1, r4
 800760a:	4640      	mov	r0, r8
 800760c:	f7ff fee4 	bl	80073d8 <_printf_common>
 8007610:	3001      	adds	r0, #1
 8007612:	d14a      	bne.n	80076aa <_printf_i+0x1f6>
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	b004      	add	sp, #16
 800761a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	f043 0320 	orr.w	r3, r3, #32
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	4833      	ldr	r0, [pc, #204]	; (80076f4 <_printf_i+0x240>)
 8007628:	2778      	movs	r7, #120	; 0x78
 800762a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	6829      	ldr	r1, [r5, #0]
 8007632:	061f      	lsls	r7, r3, #24
 8007634:	f851 6b04 	ldr.w	r6, [r1], #4
 8007638:	d402      	bmi.n	8007640 <_printf_i+0x18c>
 800763a:	065f      	lsls	r7, r3, #25
 800763c:	bf48      	it	mi
 800763e:	b2b6      	uxthmi	r6, r6
 8007640:	07df      	lsls	r7, r3, #31
 8007642:	bf48      	it	mi
 8007644:	f043 0320 	orrmi.w	r3, r3, #32
 8007648:	6029      	str	r1, [r5, #0]
 800764a:	bf48      	it	mi
 800764c:	6023      	strmi	r3, [r4, #0]
 800764e:	b91e      	cbnz	r6, 8007658 <_printf_i+0x1a4>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	f023 0320 	bic.w	r3, r3, #32
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	2310      	movs	r3, #16
 800765a:	e7a7      	b.n	80075ac <_printf_i+0xf8>
 800765c:	4824      	ldr	r0, [pc, #144]	; (80076f0 <_printf_i+0x23c>)
 800765e:	e7e4      	b.n	800762a <_printf_i+0x176>
 8007660:	4615      	mov	r5, r2
 8007662:	e7bd      	b.n	80075e0 <_printf_i+0x12c>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	6826      	ldr	r6, [r4, #0]
 8007668:	6961      	ldr	r1, [r4, #20]
 800766a:	1d18      	adds	r0, r3, #4
 800766c:	6028      	str	r0, [r5, #0]
 800766e:	0635      	lsls	r5, r6, #24
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	d501      	bpl.n	8007678 <_printf_i+0x1c4>
 8007674:	6019      	str	r1, [r3, #0]
 8007676:	e002      	b.n	800767e <_printf_i+0x1ca>
 8007678:	0670      	lsls	r0, r6, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0x1c0>
 800767c:	8019      	strh	r1, [r3, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	6123      	str	r3, [r4, #16]
 8007682:	4615      	mov	r5, r2
 8007684:	e7bc      	b.n	8007600 <_printf_i+0x14c>
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	1d1a      	adds	r2, r3, #4
 800768a:	602a      	str	r2, [r5, #0]
 800768c:	681d      	ldr	r5, [r3, #0]
 800768e:	6862      	ldr	r2, [r4, #4]
 8007690:	2100      	movs	r1, #0
 8007692:	4628      	mov	r0, r5
 8007694:	f7f8 fdbc 	bl	8000210 <memchr>
 8007698:	b108      	cbz	r0, 800769e <_printf_i+0x1ea>
 800769a:	1b40      	subs	r0, r0, r5
 800769c:	6060      	str	r0, [r4, #4]
 800769e:	6863      	ldr	r3, [r4, #4]
 80076a0:	6123      	str	r3, [r4, #16]
 80076a2:	2300      	movs	r3, #0
 80076a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a8:	e7aa      	b.n	8007600 <_printf_i+0x14c>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	462a      	mov	r2, r5
 80076ae:	4649      	mov	r1, r9
 80076b0:	4640      	mov	r0, r8
 80076b2:	47d0      	blx	sl
 80076b4:	3001      	adds	r0, #1
 80076b6:	d0ad      	beq.n	8007614 <_printf_i+0x160>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	079b      	lsls	r3, r3, #30
 80076bc:	d413      	bmi.n	80076e6 <_printf_i+0x232>
 80076be:	68e0      	ldr	r0, [r4, #12]
 80076c0:	9b03      	ldr	r3, [sp, #12]
 80076c2:	4298      	cmp	r0, r3
 80076c4:	bfb8      	it	lt
 80076c6:	4618      	movlt	r0, r3
 80076c8:	e7a6      	b.n	8007618 <_printf_i+0x164>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4632      	mov	r2, r6
 80076ce:	4649      	mov	r1, r9
 80076d0:	4640      	mov	r0, r8
 80076d2:	47d0      	blx	sl
 80076d4:	3001      	adds	r0, #1
 80076d6:	d09d      	beq.n	8007614 <_printf_i+0x160>
 80076d8:	3501      	adds	r5, #1
 80076da:	68e3      	ldr	r3, [r4, #12]
 80076dc:	9903      	ldr	r1, [sp, #12]
 80076de:	1a5b      	subs	r3, r3, r1
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	dcf2      	bgt.n	80076ca <_printf_i+0x216>
 80076e4:	e7eb      	b.n	80076be <_printf_i+0x20a>
 80076e6:	2500      	movs	r5, #0
 80076e8:	f104 0619 	add.w	r6, r4, #25
 80076ec:	e7f5      	b.n	80076da <_printf_i+0x226>
 80076ee:	bf00      	nop
 80076f0:	0800874b 	.word	0x0800874b
 80076f4:	0800875c 	.word	0x0800875c

080076f8 <__sflush_r>:
 80076f8:	898a      	ldrh	r2, [r1, #12]
 80076fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	4605      	mov	r5, r0
 8007700:	0710      	lsls	r0, r2, #28
 8007702:	460c      	mov	r4, r1
 8007704:	d458      	bmi.n	80077b8 <__sflush_r+0xc0>
 8007706:	684b      	ldr	r3, [r1, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	dc05      	bgt.n	8007718 <__sflush_r+0x20>
 800770c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	dc02      	bgt.n	8007718 <__sflush_r+0x20>
 8007712:	2000      	movs	r0, #0
 8007714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007718:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771a:	2e00      	cmp	r6, #0
 800771c:	d0f9      	beq.n	8007712 <__sflush_r+0x1a>
 800771e:	2300      	movs	r3, #0
 8007720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007724:	682f      	ldr	r7, [r5, #0]
 8007726:	6a21      	ldr	r1, [r4, #32]
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	d032      	beq.n	8007792 <__sflush_r+0x9a>
 800772c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	075a      	lsls	r2, r3, #29
 8007732:	d505      	bpl.n	8007740 <__sflush_r+0x48>
 8007734:	6863      	ldr	r3, [r4, #4]
 8007736:	1ac0      	subs	r0, r0, r3
 8007738:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800773a:	b10b      	cbz	r3, 8007740 <__sflush_r+0x48>
 800773c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800773e:	1ac0      	subs	r0, r0, r3
 8007740:	2300      	movs	r3, #0
 8007742:	4602      	mov	r2, r0
 8007744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007746:	6a21      	ldr	r1, [r4, #32]
 8007748:	4628      	mov	r0, r5
 800774a:	47b0      	blx	r6
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	d106      	bne.n	8007760 <__sflush_r+0x68>
 8007752:	6829      	ldr	r1, [r5, #0]
 8007754:	291d      	cmp	r1, #29
 8007756:	d82b      	bhi.n	80077b0 <__sflush_r+0xb8>
 8007758:	4a29      	ldr	r2, [pc, #164]	; (8007800 <__sflush_r+0x108>)
 800775a:	410a      	asrs	r2, r1
 800775c:	07d6      	lsls	r6, r2, #31
 800775e:	d427      	bmi.n	80077b0 <__sflush_r+0xb8>
 8007760:	2200      	movs	r2, #0
 8007762:	6062      	str	r2, [r4, #4]
 8007764:	04d9      	lsls	r1, r3, #19
 8007766:	6922      	ldr	r2, [r4, #16]
 8007768:	6022      	str	r2, [r4, #0]
 800776a:	d504      	bpl.n	8007776 <__sflush_r+0x7e>
 800776c:	1c42      	adds	r2, r0, #1
 800776e:	d101      	bne.n	8007774 <__sflush_r+0x7c>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	b903      	cbnz	r3, 8007776 <__sflush_r+0x7e>
 8007774:	6560      	str	r0, [r4, #84]	; 0x54
 8007776:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007778:	602f      	str	r7, [r5, #0]
 800777a:	2900      	cmp	r1, #0
 800777c:	d0c9      	beq.n	8007712 <__sflush_r+0x1a>
 800777e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007782:	4299      	cmp	r1, r3
 8007784:	d002      	beq.n	800778c <__sflush_r+0x94>
 8007786:	4628      	mov	r0, r5
 8007788:	f7ff fbce 	bl	8006f28 <_free_r>
 800778c:	2000      	movs	r0, #0
 800778e:	6360      	str	r0, [r4, #52]	; 0x34
 8007790:	e7c0      	b.n	8007714 <__sflush_r+0x1c>
 8007792:	2301      	movs	r3, #1
 8007794:	4628      	mov	r0, r5
 8007796:	47b0      	blx	r6
 8007798:	1c41      	adds	r1, r0, #1
 800779a:	d1c8      	bne.n	800772e <__sflush_r+0x36>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0c5      	beq.n	800772e <__sflush_r+0x36>
 80077a2:	2b1d      	cmp	r3, #29
 80077a4:	d001      	beq.n	80077aa <__sflush_r+0xb2>
 80077a6:	2b16      	cmp	r3, #22
 80077a8:	d101      	bne.n	80077ae <__sflush_r+0xb6>
 80077aa:	602f      	str	r7, [r5, #0]
 80077ac:	e7b1      	b.n	8007712 <__sflush_r+0x1a>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b4:	81a3      	strh	r3, [r4, #12]
 80077b6:	e7ad      	b.n	8007714 <__sflush_r+0x1c>
 80077b8:	690f      	ldr	r7, [r1, #16]
 80077ba:	2f00      	cmp	r7, #0
 80077bc:	d0a9      	beq.n	8007712 <__sflush_r+0x1a>
 80077be:	0793      	lsls	r3, r2, #30
 80077c0:	680e      	ldr	r6, [r1, #0]
 80077c2:	bf08      	it	eq
 80077c4:	694b      	ldreq	r3, [r1, #20]
 80077c6:	600f      	str	r7, [r1, #0]
 80077c8:	bf18      	it	ne
 80077ca:	2300      	movne	r3, #0
 80077cc:	eba6 0807 	sub.w	r8, r6, r7
 80077d0:	608b      	str	r3, [r1, #8]
 80077d2:	f1b8 0f00 	cmp.w	r8, #0
 80077d6:	dd9c      	ble.n	8007712 <__sflush_r+0x1a>
 80077d8:	6a21      	ldr	r1, [r4, #32]
 80077da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077dc:	4643      	mov	r3, r8
 80077de:	463a      	mov	r2, r7
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b0      	blx	r6
 80077e4:	2800      	cmp	r0, #0
 80077e6:	dc06      	bgt.n	80077f6 <__sflush_r+0xfe>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ee:	81a3      	strh	r3, [r4, #12]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e78e      	b.n	8007714 <__sflush_r+0x1c>
 80077f6:	4407      	add	r7, r0
 80077f8:	eba8 0800 	sub.w	r8, r8, r0
 80077fc:	e7e9      	b.n	80077d2 <__sflush_r+0xda>
 80077fe:	bf00      	nop
 8007800:	dfbffffe 	.word	0xdfbffffe

08007804 <_fflush_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	4605      	mov	r5, r0
 800780a:	460c      	mov	r4, r1
 800780c:	b913      	cbnz	r3, 8007814 <_fflush_r+0x10>
 800780e:	2500      	movs	r5, #0
 8007810:	4628      	mov	r0, r5
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	b118      	cbz	r0, 800781e <_fflush_r+0x1a>
 8007816:	6a03      	ldr	r3, [r0, #32]
 8007818:	b90b      	cbnz	r3, 800781e <_fflush_r+0x1a>
 800781a:	f7ff f9af 	bl	8006b7c <__sinit>
 800781e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f3      	beq.n	800780e <_fflush_r+0xa>
 8007826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007828:	07d0      	lsls	r0, r2, #31
 800782a:	d404      	bmi.n	8007836 <_fflush_r+0x32>
 800782c:	0599      	lsls	r1, r3, #22
 800782e:	d402      	bmi.n	8007836 <_fflush_r+0x32>
 8007830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007832:	f7ff fb58 	bl	8006ee6 <__retarget_lock_acquire_recursive>
 8007836:	4628      	mov	r0, r5
 8007838:	4621      	mov	r1, r4
 800783a:	f7ff ff5d 	bl	80076f8 <__sflush_r>
 800783e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007840:	07da      	lsls	r2, r3, #31
 8007842:	4605      	mov	r5, r0
 8007844:	d4e4      	bmi.n	8007810 <_fflush_r+0xc>
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	059b      	lsls	r3, r3, #22
 800784a:	d4e1      	bmi.n	8007810 <_fflush_r+0xc>
 800784c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800784e:	f7ff fb4b 	bl	8006ee8 <__retarget_lock_release_recursive>
 8007852:	e7dd      	b.n	8007810 <_fflush_r+0xc>

08007854 <fiprintf>:
 8007854:	b40e      	push	{r1, r2, r3}
 8007856:	b503      	push	{r0, r1, lr}
 8007858:	4601      	mov	r1, r0
 800785a:	ab03      	add	r3, sp, #12
 800785c:	4805      	ldr	r0, [pc, #20]	; (8007874 <fiprintf+0x20>)
 800785e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007862:	6800      	ldr	r0, [r0, #0]
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	f000 f89f 	bl	80079a8 <_vfiprintf_r>
 800786a:	b002      	add	sp, #8
 800786c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007870:	b003      	add	sp, #12
 8007872:	4770      	bx	lr
 8007874:	20000e78 	.word	0x20000e78

08007878 <memmove>:
 8007878:	4288      	cmp	r0, r1
 800787a:	b510      	push	{r4, lr}
 800787c:	eb01 0402 	add.w	r4, r1, r2
 8007880:	d902      	bls.n	8007888 <memmove+0x10>
 8007882:	4284      	cmp	r4, r0
 8007884:	4623      	mov	r3, r4
 8007886:	d807      	bhi.n	8007898 <memmove+0x20>
 8007888:	1e43      	subs	r3, r0, #1
 800788a:	42a1      	cmp	r1, r4
 800788c:	d008      	beq.n	80078a0 <memmove+0x28>
 800788e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007896:	e7f8      	b.n	800788a <memmove+0x12>
 8007898:	4402      	add	r2, r0
 800789a:	4601      	mov	r1, r0
 800789c:	428a      	cmp	r2, r1
 800789e:	d100      	bne.n	80078a2 <memmove+0x2a>
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078aa:	e7f7      	b.n	800789c <memmove+0x24>

080078ac <_sbrk_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4d06      	ldr	r5, [pc, #24]	; (80078c8 <_sbrk_r+0x1c>)
 80078b0:	2300      	movs	r3, #0
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	f7fa fb7e 	bl	8001fb8 <_sbrk>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_sbrk_r+0x1a>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_sbrk_r+0x1a>
 80078c4:	6023      	str	r3, [r4, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	20001888 	.word	0x20001888

080078cc <memcpy>:
 80078cc:	440a      	add	r2, r1
 80078ce:	4291      	cmp	r1, r2
 80078d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80078d4:	d100      	bne.n	80078d8 <memcpy+0xc>
 80078d6:	4770      	bx	lr
 80078d8:	b510      	push	{r4, lr}
 80078da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e2:	4291      	cmp	r1, r2
 80078e4:	d1f9      	bne.n	80078da <memcpy+0xe>
 80078e6:	bd10      	pop	{r4, pc}

080078e8 <abort>:
 80078e8:	b508      	push	{r3, lr}
 80078ea:	2006      	movs	r0, #6
 80078ec:	f000 fa34 	bl	8007d58 <raise>
 80078f0:	2001      	movs	r0, #1
 80078f2:	f7fa fae9 	bl	8001ec8 <_exit>

080078f6 <_realloc_r>:
 80078f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	4680      	mov	r8, r0
 80078fc:	4614      	mov	r4, r2
 80078fe:	460e      	mov	r6, r1
 8007900:	b921      	cbnz	r1, 800790c <_realloc_r+0x16>
 8007902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007906:	4611      	mov	r1, r2
 8007908:	f7ff bb82 	b.w	8007010 <_malloc_r>
 800790c:	b92a      	cbnz	r2, 800791a <_realloc_r+0x24>
 800790e:	f7ff fb0b 	bl	8006f28 <_free_r>
 8007912:	4625      	mov	r5, r4
 8007914:	4628      	mov	r0, r5
 8007916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791a:	f000 fa39 	bl	8007d90 <_malloc_usable_size_r>
 800791e:	4284      	cmp	r4, r0
 8007920:	4607      	mov	r7, r0
 8007922:	d802      	bhi.n	800792a <_realloc_r+0x34>
 8007924:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007928:	d812      	bhi.n	8007950 <_realloc_r+0x5a>
 800792a:	4621      	mov	r1, r4
 800792c:	4640      	mov	r0, r8
 800792e:	f7ff fb6f 	bl	8007010 <_malloc_r>
 8007932:	4605      	mov	r5, r0
 8007934:	2800      	cmp	r0, #0
 8007936:	d0ed      	beq.n	8007914 <_realloc_r+0x1e>
 8007938:	42bc      	cmp	r4, r7
 800793a:	4622      	mov	r2, r4
 800793c:	4631      	mov	r1, r6
 800793e:	bf28      	it	cs
 8007940:	463a      	movcs	r2, r7
 8007942:	f7ff ffc3 	bl	80078cc <memcpy>
 8007946:	4631      	mov	r1, r6
 8007948:	4640      	mov	r0, r8
 800794a:	f7ff faed 	bl	8006f28 <_free_r>
 800794e:	e7e1      	b.n	8007914 <_realloc_r+0x1e>
 8007950:	4635      	mov	r5, r6
 8007952:	e7df      	b.n	8007914 <_realloc_r+0x1e>

08007954 <__sfputc_r>:
 8007954:	6893      	ldr	r3, [r2, #8]
 8007956:	3b01      	subs	r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	b410      	push	{r4}
 800795c:	6093      	str	r3, [r2, #8]
 800795e:	da08      	bge.n	8007972 <__sfputc_r+0x1e>
 8007960:	6994      	ldr	r4, [r2, #24]
 8007962:	42a3      	cmp	r3, r4
 8007964:	db01      	blt.n	800796a <__sfputc_r+0x16>
 8007966:	290a      	cmp	r1, #10
 8007968:	d103      	bne.n	8007972 <__sfputc_r+0x1e>
 800796a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800796e:	f000 b935 	b.w	8007bdc <__swbuf_r>
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	1c58      	adds	r0, r3, #1
 8007976:	6010      	str	r0, [r2, #0]
 8007978:	7019      	strb	r1, [r3, #0]
 800797a:	4608      	mov	r0, r1
 800797c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007980:	4770      	bx	lr

08007982 <__sfputs_r>:
 8007982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	4614      	mov	r4, r2
 800798a:	18d5      	adds	r5, r2, r3
 800798c:	42ac      	cmp	r4, r5
 800798e:	d101      	bne.n	8007994 <__sfputs_r+0x12>
 8007990:	2000      	movs	r0, #0
 8007992:	e007      	b.n	80079a4 <__sfputs_r+0x22>
 8007994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007998:	463a      	mov	r2, r7
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff ffda 	bl	8007954 <__sfputc_r>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d1f3      	bne.n	800798c <__sfputs_r+0xa>
 80079a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079a8 <_vfiprintf_r>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	460d      	mov	r5, r1
 80079ae:	b09d      	sub	sp, #116	; 0x74
 80079b0:	4614      	mov	r4, r2
 80079b2:	4698      	mov	r8, r3
 80079b4:	4606      	mov	r6, r0
 80079b6:	b118      	cbz	r0, 80079c0 <_vfiprintf_r+0x18>
 80079b8:	6a03      	ldr	r3, [r0, #32]
 80079ba:	b90b      	cbnz	r3, 80079c0 <_vfiprintf_r+0x18>
 80079bc:	f7ff f8de 	bl	8006b7c <__sinit>
 80079c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079c2:	07d9      	lsls	r1, r3, #31
 80079c4:	d405      	bmi.n	80079d2 <_vfiprintf_r+0x2a>
 80079c6:	89ab      	ldrh	r3, [r5, #12]
 80079c8:	059a      	lsls	r2, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <_vfiprintf_r+0x2a>
 80079cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ce:	f7ff fa8a 	bl	8006ee6 <__retarget_lock_acquire_recursive>
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	071b      	lsls	r3, r3, #28
 80079d6:	d501      	bpl.n	80079dc <_vfiprintf_r+0x34>
 80079d8:	692b      	ldr	r3, [r5, #16]
 80079da:	b99b      	cbnz	r3, 8007a04 <_vfiprintf_r+0x5c>
 80079dc:	4629      	mov	r1, r5
 80079de:	4630      	mov	r0, r6
 80079e0:	f000 f93a 	bl	8007c58 <__swsetup_r>
 80079e4:	b170      	cbz	r0, 8007a04 <_vfiprintf_r+0x5c>
 80079e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079e8:	07dc      	lsls	r4, r3, #31
 80079ea:	d504      	bpl.n	80079f6 <_vfiprintf_r+0x4e>
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
 80079f0:	b01d      	add	sp, #116	; 0x74
 80079f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f6:	89ab      	ldrh	r3, [r5, #12]
 80079f8:	0598      	lsls	r0, r3, #22
 80079fa:	d4f7      	bmi.n	80079ec <_vfiprintf_r+0x44>
 80079fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079fe:	f7ff fa73 	bl	8006ee8 <__retarget_lock_release_recursive>
 8007a02:	e7f3      	b.n	80079ec <_vfiprintf_r+0x44>
 8007a04:	2300      	movs	r3, #0
 8007a06:	9309      	str	r3, [sp, #36]	; 0x24
 8007a08:	2320      	movs	r3, #32
 8007a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a12:	2330      	movs	r3, #48	; 0x30
 8007a14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007bc8 <_vfiprintf_r+0x220>
 8007a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a1c:	f04f 0901 	mov.w	r9, #1
 8007a20:	4623      	mov	r3, r4
 8007a22:	469a      	mov	sl, r3
 8007a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a28:	b10a      	cbz	r2, 8007a2e <_vfiprintf_r+0x86>
 8007a2a:	2a25      	cmp	r2, #37	; 0x25
 8007a2c:	d1f9      	bne.n	8007a22 <_vfiprintf_r+0x7a>
 8007a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a32:	d00b      	beq.n	8007a4c <_vfiprintf_r+0xa4>
 8007a34:	465b      	mov	r3, fp
 8007a36:	4622      	mov	r2, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ffa1 	bl	8007982 <__sfputs_r>
 8007a40:	3001      	adds	r0, #1
 8007a42:	f000 80a9 	beq.w	8007b98 <_vfiprintf_r+0x1f0>
 8007a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a48:	445a      	add	r2, fp
 8007a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f000 80a1 	beq.w	8007b98 <_vfiprintf_r+0x1f0>
 8007a56:	2300      	movs	r3, #0
 8007a58:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a60:	f10a 0a01 	add.w	sl, sl, #1
 8007a64:	9304      	str	r3, [sp, #16]
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a6e:	4654      	mov	r4, sl
 8007a70:	2205      	movs	r2, #5
 8007a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a76:	4854      	ldr	r0, [pc, #336]	; (8007bc8 <_vfiprintf_r+0x220>)
 8007a78:	f7f8 fbca 	bl	8000210 <memchr>
 8007a7c:	9a04      	ldr	r2, [sp, #16]
 8007a7e:	b9d8      	cbnz	r0, 8007ab8 <_vfiprintf_r+0x110>
 8007a80:	06d1      	lsls	r1, r2, #27
 8007a82:	bf44      	itt	mi
 8007a84:	2320      	movmi	r3, #32
 8007a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a8a:	0713      	lsls	r3, r2, #28
 8007a8c:	bf44      	itt	mi
 8007a8e:	232b      	movmi	r3, #43	; 0x2b
 8007a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a94:	f89a 3000 	ldrb.w	r3, [sl]
 8007a98:	2b2a      	cmp	r3, #42	; 0x2a
 8007a9a:	d015      	beq.n	8007ac8 <_vfiprintf_r+0x120>
 8007a9c:	9a07      	ldr	r2, [sp, #28]
 8007a9e:	4654      	mov	r4, sl
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f04f 0c0a 	mov.w	ip, #10
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aac:	3b30      	subs	r3, #48	; 0x30
 8007aae:	2b09      	cmp	r3, #9
 8007ab0:	d94d      	bls.n	8007b4e <_vfiprintf_r+0x1a6>
 8007ab2:	b1b0      	cbz	r0, 8007ae2 <_vfiprintf_r+0x13a>
 8007ab4:	9207      	str	r2, [sp, #28]
 8007ab6:	e014      	b.n	8007ae2 <_vfiprintf_r+0x13a>
 8007ab8:	eba0 0308 	sub.w	r3, r0, r8
 8007abc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	9304      	str	r3, [sp, #16]
 8007ac4:	46a2      	mov	sl, r4
 8007ac6:	e7d2      	b.n	8007a6e <_vfiprintf_r+0xc6>
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	1d19      	adds	r1, r3, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	9103      	str	r1, [sp, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bfbb      	ittet	lt
 8007ad4:	425b      	neglt	r3, r3
 8007ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8007ada:	9307      	strge	r3, [sp, #28]
 8007adc:	9307      	strlt	r3, [sp, #28]
 8007ade:	bfb8      	it	lt
 8007ae0:	9204      	strlt	r2, [sp, #16]
 8007ae2:	7823      	ldrb	r3, [r4, #0]
 8007ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae6:	d10c      	bne.n	8007b02 <_vfiprintf_r+0x15a>
 8007ae8:	7863      	ldrb	r3, [r4, #1]
 8007aea:	2b2a      	cmp	r3, #42	; 0x2a
 8007aec:	d134      	bne.n	8007b58 <_vfiprintf_r+0x1b0>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	9203      	str	r2, [sp, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bfb8      	it	lt
 8007afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007afe:	3402      	adds	r4, #2
 8007b00:	9305      	str	r3, [sp, #20]
 8007b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007bd8 <_vfiprintf_r+0x230>
 8007b06:	7821      	ldrb	r1, [r4, #0]
 8007b08:	2203      	movs	r2, #3
 8007b0a:	4650      	mov	r0, sl
 8007b0c:	f7f8 fb80 	bl	8000210 <memchr>
 8007b10:	b138      	cbz	r0, 8007b22 <_vfiprintf_r+0x17a>
 8007b12:	9b04      	ldr	r3, [sp, #16]
 8007b14:	eba0 000a 	sub.w	r0, r0, sl
 8007b18:	2240      	movs	r2, #64	; 0x40
 8007b1a:	4082      	lsls	r2, r0
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	3401      	adds	r4, #1
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b26:	4829      	ldr	r0, [pc, #164]	; (8007bcc <_vfiprintf_r+0x224>)
 8007b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b2c:	2206      	movs	r2, #6
 8007b2e:	f7f8 fb6f 	bl	8000210 <memchr>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d03f      	beq.n	8007bb6 <_vfiprintf_r+0x20e>
 8007b36:	4b26      	ldr	r3, [pc, #152]	; (8007bd0 <_vfiprintf_r+0x228>)
 8007b38:	bb1b      	cbnz	r3, 8007b82 <_vfiprintf_r+0x1da>
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	3307      	adds	r3, #7
 8007b3e:	f023 0307 	bic.w	r3, r3, #7
 8007b42:	3308      	adds	r3, #8
 8007b44:	9303      	str	r3, [sp, #12]
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	443b      	add	r3, r7
 8007b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4c:	e768      	b.n	8007a20 <_vfiprintf_r+0x78>
 8007b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b52:	460c      	mov	r4, r1
 8007b54:	2001      	movs	r0, #1
 8007b56:	e7a6      	b.n	8007aa6 <_vfiprintf_r+0xfe>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	3401      	adds	r4, #1
 8007b5c:	9305      	str	r3, [sp, #20]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	f04f 0c0a 	mov.w	ip, #10
 8007b64:	4620      	mov	r0, r4
 8007b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b6a:	3a30      	subs	r2, #48	; 0x30
 8007b6c:	2a09      	cmp	r2, #9
 8007b6e:	d903      	bls.n	8007b78 <_vfiprintf_r+0x1d0>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0c6      	beq.n	8007b02 <_vfiprintf_r+0x15a>
 8007b74:	9105      	str	r1, [sp, #20]
 8007b76:	e7c4      	b.n	8007b02 <_vfiprintf_r+0x15a>
 8007b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e7f0      	b.n	8007b64 <_vfiprintf_r+0x1bc>
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	462a      	mov	r2, r5
 8007b88:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <_vfiprintf_r+0x22c>)
 8007b8a:	a904      	add	r1, sp, #16
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f3af 8000 	nop.w
 8007b92:	4607      	mov	r7, r0
 8007b94:	1c78      	adds	r0, r7, #1
 8007b96:	d1d6      	bne.n	8007b46 <_vfiprintf_r+0x19e>
 8007b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b9a:	07d9      	lsls	r1, r3, #31
 8007b9c:	d405      	bmi.n	8007baa <_vfiprintf_r+0x202>
 8007b9e:	89ab      	ldrh	r3, [r5, #12]
 8007ba0:	059a      	lsls	r2, r3, #22
 8007ba2:	d402      	bmi.n	8007baa <_vfiprintf_r+0x202>
 8007ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ba6:	f7ff f99f 	bl	8006ee8 <__retarget_lock_release_recursive>
 8007baa:	89ab      	ldrh	r3, [r5, #12]
 8007bac:	065b      	lsls	r3, r3, #25
 8007bae:	f53f af1d 	bmi.w	80079ec <_vfiprintf_r+0x44>
 8007bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bb4:	e71c      	b.n	80079f0 <_vfiprintf_r+0x48>
 8007bb6:	ab03      	add	r3, sp, #12
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	462a      	mov	r2, r5
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <_vfiprintf_r+0x22c>)
 8007bbe:	a904      	add	r1, sp, #16
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7ff fc77 	bl	80074b4 <_printf_i>
 8007bc6:	e7e4      	b.n	8007b92 <_vfiprintf_r+0x1ea>
 8007bc8:	0800873a 	.word	0x0800873a
 8007bcc:	08008744 	.word	0x08008744
 8007bd0:	00000000 	.word	0x00000000
 8007bd4:	08007983 	.word	0x08007983
 8007bd8:	08008740 	.word	0x08008740

08007bdc <__swbuf_r>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	460e      	mov	r6, r1
 8007be0:	4614      	mov	r4, r2
 8007be2:	4605      	mov	r5, r0
 8007be4:	b118      	cbz	r0, 8007bee <__swbuf_r+0x12>
 8007be6:	6a03      	ldr	r3, [r0, #32]
 8007be8:	b90b      	cbnz	r3, 8007bee <__swbuf_r+0x12>
 8007bea:	f7fe ffc7 	bl	8006b7c <__sinit>
 8007bee:	69a3      	ldr	r3, [r4, #24]
 8007bf0:	60a3      	str	r3, [r4, #8]
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	071a      	lsls	r2, r3, #28
 8007bf6:	d525      	bpl.n	8007c44 <__swbuf_r+0x68>
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	b31b      	cbz	r3, 8007c44 <__swbuf_r+0x68>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	1a98      	subs	r0, r3, r2
 8007c02:	6963      	ldr	r3, [r4, #20]
 8007c04:	b2f6      	uxtb	r6, r6
 8007c06:	4283      	cmp	r3, r0
 8007c08:	4637      	mov	r7, r6
 8007c0a:	dc04      	bgt.n	8007c16 <__swbuf_r+0x3a>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f7ff fdf8 	bl	8007804 <_fflush_r>
 8007c14:	b9e0      	cbnz	r0, 8007c50 <__swbuf_r+0x74>
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	60a3      	str	r3, [r4, #8]
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	6022      	str	r2, [r4, #0]
 8007c22:	701e      	strb	r6, [r3, #0]
 8007c24:	6962      	ldr	r2, [r4, #20]
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d004      	beq.n	8007c36 <__swbuf_r+0x5a>
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	07db      	lsls	r3, r3, #31
 8007c30:	d506      	bpl.n	8007c40 <__swbuf_r+0x64>
 8007c32:	2e0a      	cmp	r6, #10
 8007c34:	d104      	bne.n	8007c40 <__swbuf_r+0x64>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f7ff fde3 	bl	8007804 <_fflush_r>
 8007c3e:	b938      	cbnz	r0, 8007c50 <__swbuf_r+0x74>
 8007c40:	4638      	mov	r0, r7
 8007c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c44:	4621      	mov	r1, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 f806 	bl	8007c58 <__swsetup_r>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d0d5      	beq.n	8007bfc <__swbuf_r+0x20>
 8007c50:	f04f 37ff 	mov.w	r7, #4294967295
 8007c54:	e7f4      	b.n	8007c40 <__swbuf_r+0x64>
	...

08007c58 <__swsetup_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4b2a      	ldr	r3, [pc, #168]	; (8007d04 <__swsetup_r+0xac>)
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	460c      	mov	r4, r1
 8007c62:	b118      	cbz	r0, 8007c6c <__swsetup_r+0x14>
 8007c64:	6a03      	ldr	r3, [r0, #32]
 8007c66:	b90b      	cbnz	r3, 8007c6c <__swsetup_r+0x14>
 8007c68:	f7fe ff88 	bl	8006b7c <__sinit>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c72:	0718      	lsls	r0, r3, #28
 8007c74:	d422      	bmi.n	8007cbc <__swsetup_r+0x64>
 8007c76:	06d9      	lsls	r1, r3, #27
 8007c78:	d407      	bmi.n	8007c8a <__swsetup_r+0x32>
 8007c7a:	2309      	movs	r3, #9
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	e034      	b.n	8007cf4 <__swsetup_r+0x9c>
 8007c8a:	0758      	lsls	r0, r3, #29
 8007c8c:	d512      	bpl.n	8007cb4 <__swsetup_r+0x5c>
 8007c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c90:	b141      	cbz	r1, 8007ca4 <__swsetup_r+0x4c>
 8007c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c96:	4299      	cmp	r1, r3
 8007c98:	d002      	beq.n	8007ca0 <__swsetup_r+0x48>
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f7ff f944 	bl	8006f28 <_free_r>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6363      	str	r3, [r4, #52]	; 0x34
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	2300      	movs	r3, #0
 8007cae:	6063      	str	r3, [r4, #4]
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	89a3      	ldrh	r3, [r4, #12]
 8007cb6:	f043 0308 	orr.w	r3, r3, #8
 8007cba:	81a3      	strh	r3, [r4, #12]
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	b94b      	cbnz	r3, 8007cd4 <__swsetup_r+0x7c>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cca:	d003      	beq.n	8007cd4 <__swsetup_r+0x7c>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 f88c 	bl	8007dec <__smakebuf_r>
 8007cd4:	89a0      	ldrh	r0, [r4, #12]
 8007cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cda:	f010 0301 	ands.w	r3, r0, #1
 8007cde:	d00a      	beq.n	8007cf6 <__swsetup_r+0x9e>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60a3      	str	r3, [r4, #8]
 8007ce4:	6963      	ldr	r3, [r4, #20]
 8007ce6:	425b      	negs	r3, r3
 8007ce8:	61a3      	str	r3, [r4, #24]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	b943      	cbnz	r3, 8007d00 <__swsetup_r+0xa8>
 8007cee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cf2:	d1c4      	bne.n	8007c7e <__swsetup_r+0x26>
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	0781      	lsls	r1, r0, #30
 8007cf8:	bf58      	it	pl
 8007cfa:	6963      	ldrpl	r3, [r4, #20]
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	e7f4      	b.n	8007cea <__swsetup_r+0x92>
 8007d00:	2000      	movs	r0, #0
 8007d02:	e7f7      	b.n	8007cf4 <__swsetup_r+0x9c>
 8007d04:	20000e78 	.word	0x20000e78

08007d08 <_raise_r>:
 8007d08:	291f      	cmp	r1, #31
 8007d0a:	b538      	push	{r3, r4, r5, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	460d      	mov	r5, r1
 8007d10:	d904      	bls.n	8007d1c <_raise_r+0x14>
 8007d12:	2316      	movs	r3, #22
 8007d14:	6003      	str	r3, [r0, #0]
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d1e:	b112      	cbz	r2, 8007d26 <_raise_r+0x1e>
 8007d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d24:	b94b      	cbnz	r3, 8007d3a <_raise_r+0x32>
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 f830 	bl	8007d8c <_getpid_r>
 8007d2c:	462a      	mov	r2, r5
 8007d2e:	4601      	mov	r1, r0
 8007d30:	4620      	mov	r0, r4
 8007d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d36:	f000 b817 	b.w	8007d68 <_kill_r>
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d00a      	beq.n	8007d54 <_raise_r+0x4c>
 8007d3e:	1c59      	adds	r1, r3, #1
 8007d40:	d103      	bne.n	8007d4a <_raise_r+0x42>
 8007d42:	2316      	movs	r3, #22
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	2001      	movs	r0, #1
 8007d48:	e7e7      	b.n	8007d1a <_raise_r+0x12>
 8007d4a:	2400      	movs	r4, #0
 8007d4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d50:	4628      	mov	r0, r5
 8007d52:	4798      	blx	r3
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7e0      	b.n	8007d1a <_raise_r+0x12>

08007d58 <raise>:
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <raise+0xc>)
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	f7ff bfd3 	b.w	8007d08 <_raise_r>
 8007d62:	bf00      	nop
 8007d64:	20000e78 	.word	0x20000e78

08007d68 <_kill_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_kill_r+0x20>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	f7fa f897 	bl	8001ea8 <_kill>
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	d102      	bne.n	8007d84 <_kill_r+0x1c>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b103      	cbz	r3, 8007d84 <_kill_r+0x1c>
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	20001888 	.word	0x20001888

08007d8c <_getpid_r>:
 8007d8c:	f7fa b884 	b.w	8001e98 <_getpid>

08007d90 <_malloc_usable_size_r>:
 8007d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d94:	1f18      	subs	r0, r3, #4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfbc      	itt	lt
 8007d9a:	580b      	ldrlt	r3, [r1, r0]
 8007d9c:	18c0      	addlt	r0, r0, r3
 8007d9e:	4770      	bx	lr

08007da0 <__swhatbuf_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	460c      	mov	r4, r1
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	2900      	cmp	r1, #0
 8007daa:	b096      	sub	sp, #88	; 0x58
 8007dac:	4615      	mov	r5, r2
 8007dae:	461e      	mov	r6, r3
 8007db0:	da0d      	bge.n	8007dce <__swhatbuf_r+0x2e>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007db8:	f04f 0100 	mov.w	r1, #0
 8007dbc:	bf0c      	ite	eq
 8007dbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007dc2:	2340      	movne	r3, #64	; 0x40
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	6031      	str	r1, [r6, #0]
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	b016      	add	sp, #88	; 0x58
 8007dcc:	bd70      	pop	{r4, r5, r6, pc}
 8007dce:	466a      	mov	r2, sp
 8007dd0:	f000 f848 	bl	8007e64 <_fstat_r>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	dbec      	blt.n	8007db2 <__swhatbuf_r+0x12>
 8007dd8:	9901      	ldr	r1, [sp, #4]
 8007dda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007dde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007de2:	4259      	negs	r1, r3
 8007de4:	4159      	adcs	r1, r3
 8007de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dea:	e7eb      	b.n	8007dc4 <__swhatbuf_r+0x24>

08007dec <__smakebuf_r>:
 8007dec:	898b      	ldrh	r3, [r1, #12]
 8007dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007df0:	079d      	lsls	r5, r3, #30
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	d507      	bpl.n	8007e08 <__smakebuf_r+0x1c>
 8007df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	2301      	movs	r3, #1
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	b002      	add	sp, #8
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	ab01      	add	r3, sp, #4
 8007e0a:	466a      	mov	r2, sp
 8007e0c:	f7ff ffc8 	bl	8007da0 <__swhatbuf_r>
 8007e10:	9900      	ldr	r1, [sp, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff f8fb 	bl	8007010 <_malloc_r>
 8007e1a:	b948      	cbnz	r0, 8007e30 <__smakebuf_r+0x44>
 8007e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e20:	059a      	lsls	r2, r3, #22
 8007e22:	d4ef      	bmi.n	8007e04 <__smakebuf_r+0x18>
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	f043 0302 	orr.w	r3, r3, #2
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e7e3      	b.n	8007df8 <__smakebuf_r+0xc>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	6020      	str	r0, [r4, #0]
 8007e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e38:	81a3      	strh	r3, [r4, #12]
 8007e3a:	9b00      	ldr	r3, [sp, #0]
 8007e3c:	6163      	str	r3, [r4, #20]
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	6120      	str	r0, [r4, #16]
 8007e42:	b15b      	cbz	r3, 8007e5c <__smakebuf_r+0x70>
 8007e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 f81d 	bl	8007e88 <_isatty_r>
 8007e4e:	b128      	cbz	r0, 8007e5c <__smakebuf_r+0x70>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	431d      	orrs	r5, r3
 8007e60:	81a5      	strh	r5, [r4, #12]
 8007e62:	e7cf      	b.n	8007e04 <__smakebuf_r+0x18>

08007e64 <_fstat_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_fstat_r+0x20>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7fa f878 	bl	8001f66 <_fstat>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_fstat_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_fstat_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20001888 	.word	0x20001888

08007e88 <_isatty_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d06      	ldr	r5, [pc, #24]	; (8007ea4 <_isatty_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7fa f877 	bl	8001f86 <_isatty>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_isatty_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_isatty_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20001888 	.word	0x20001888

08007ea8 <log10>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	ed2d 8b02 	vpush	{d8}
 8007eae:	ec55 4b10 	vmov	r4, r5, d0
 8007eb2:	f000 f841 	bl	8007f38 <__ieee754_log10>
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	462b      	mov	r3, r5
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	eeb0 8a40 	vmov.f32	s16, s0
 8007ec2:	eef0 8a60 	vmov.f32	s17, s1
 8007ec6:	f7f8 fe49 	bl	8000b5c <__aeabi_dcmpun>
 8007eca:	b998      	cbnz	r0, 8007ef4 <log10+0x4c>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 fe24 	bl	8000b20 <__aeabi_dcmple>
 8007ed8:	b160      	cbz	r0, 8007ef4 <log10+0x4c>
 8007eda:	2200      	movs	r2, #0
 8007edc:	2300      	movs	r3, #0
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 fe09 	bl	8000af8 <__aeabi_dcmpeq>
 8007ee6:	b160      	cbz	r0, 8007f02 <log10+0x5a>
 8007ee8:	f7fe ffd2 	bl	8006e90 <__errno>
 8007eec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007f18 <log10+0x70>
 8007ef0:	2322      	movs	r3, #34	; 0x22
 8007ef2:	6003      	str	r3, [r0, #0]
 8007ef4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ef8:	eef0 0a68 	vmov.f32	s1, s17
 8007efc:	ecbd 8b02 	vpop	{d8}
 8007f00:	bd38      	pop	{r3, r4, r5, pc}
 8007f02:	f7fe ffc5 	bl	8006e90 <__errno>
 8007f06:	ecbd 8b02 	vpop	{d8}
 8007f0a:	2321      	movs	r3, #33	; 0x21
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f12:	4803      	ldr	r0, [pc, #12]	; (8007f20 <log10+0x78>)
 8007f14:	f000 b808 	b.w	8007f28 <nan>
 8007f18:	00000000 	.word	0x00000000
 8007f1c:	fff00000 	.word	0xfff00000
 8007f20:	08008739 	.word	0x08008739
 8007f24:	00000000 	.word	0x00000000

08007f28 <nan>:
 8007f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007f30 <nan+0x8>
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	00000000 	.word	0x00000000
 8007f34:	7ff80000 	.word	0x7ff80000

08007f38 <__ieee754_log10>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	ec55 4b10 	vmov	r4, r5, d0
 8007f40:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8007f44:	462b      	mov	r3, r5
 8007f46:	da2f      	bge.n	8007fa8 <__ieee754_log10+0x70>
 8007f48:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8007f4c:	4322      	orrs	r2, r4
 8007f4e:	d109      	bne.n	8007f64 <__ieee754_log10+0x2c>
 8007f50:	493b      	ldr	r1, [pc, #236]	; (8008040 <__ieee754_log10+0x108>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	2000      	movs	r0, #0
 8007f58:	f7f8 fc90 	bl	800087c <__aeabi_ddiv>
 8007f5c:	ec41 0b10 	vmov	d0, r0, r1
 8007f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	da09      	bge.n	8007f7c <__ieee754_log10+0x44>
 8007f68:	ee10 2a10 	vmov	r2, s0
 8007f6c:	ee10 0a10 	vmov	r0, s0
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 f9a1 	bl	80002b8 <__aeabi_dsub>
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e7ed      	b.n	8007f58 <__ieee754_log10+0x20>
 8007f7c:	4b31      	ldr	r3, [pc, #196]	; (8008044 <__ieee754_log10+0x10c>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	4629      	mov	r1, r5
 8007f82:	ee10 0a10 	vmov	r0, s0
 8007f86:	f7f8 fb4f 	bl	8000628 <__aeabi_dmul>
 8007f8a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8007f8e:	4604      	mov	r4, r0
 8007f90:	460d      	mov	r5, r1
 8007f92:	460b      	mov	r3, r1
 8007f94:	492c      	ldr	r1, [pc, #176]	; (8008048 <__ieee754_log10+0x110>)
 8007f96:	428b      	cmp	r3, r1
 8007f98:	dd08      	ble.n	8007fac <__ieee754_log10+0x74>
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f7f8 f98b 	bl	80002bc <__adddf3>
 8007fa6:	e7d9      	b.n	8007f5c <__ieee754_log10+0x24>
 8007fa8:	2200      	movs	r2, #0
 8007faa:	e7f3      	b.n	8007f94 <__ieee754_log10+0x5c>
 8007fac:	1518      	asrs	r0, r3, #20
 8007fae:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8007fb2:	4410      	add	r0, r2
 8007fb4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8007fb8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007fbc:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8007fc0:	f7f8 fac8 	bl	8000554 <__aeabi_i2d>
 8007fc4:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8007fc8:	3303      	adds	r3, #3
 8007fca:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8007fce:	ec45 4b10 	vmov	d0, r4, r5
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	460f      	mov	r7, r1
 8007fd6:	f000 f83b 	bl	8008050 <__ieee754_log>
 8007fda:	a313      	add	r3, pc, #76	; (adr r3, 8008028 <__ieee754_log10+0xf0>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	ec59 8b10 	vmov	r8, r9, d0
 8007fe8:	f7f8 fb1e 	bl	8000628 <__aeabi_dmul>
 8007fec:	a310      	add	r3, pc, #64	; (adr r3, 8008030 <__ieee754_log10+0xf8>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	460d      	mov	r5, r1
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	f7f8 fb15 	bl	8000628 <__aeabi_dmul>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4620      	mov	r0, r4
 8008004:	4629      	mov	r1, r5
 8008006:	f7f8 f959 	bl	80002bc <__adddf3>
 800800a:	a30b      	add	r3, pc, #44	; (adr r3, 8008038 <__ieee754_log10+0x100>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	4604      	mov	r4, r0
 8008012:	460d      	mov	r5, r1
 8008014:	4630      	mov	r0, r6
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 fb06 	bl	8000628 <__aeabi_dmul>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4620      	mov	r0, r4
 8008022:	4629      	mov	r1, r5
 8008024:	e7bd      	b.n	8007fa2 <__ieee754_log10+0x6a>
 8008026:	bf00      	nop
 8008028:	11f12b36 	.word	0x11f12b36
 800802c:	3d59fef3 	.word	0x3d59fef3
 8008030:	1526e50e 	.word	0x1526e50e
 8008034:	3fdbcb7b 	.word	0x3fdbcb7b
 8008038:	509f6000 	.word	0x509f6000
 800803c:	3fd34413 	.word	0x3fd34413
 8008040:	c3500000 	.word	0xc3500000
 8008044:	43500000 	.word	0x43500000
 8008048:	7fefffff 	.word	0x7fefffff
 800804c:	00000000 	.word	0x00000000

08008050 <__ieee754_log>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	ec51 0b10 	vmov	r0, r1, d0
 8008058:	ed2d 8b04 	vpush	{d8-d9}
 800805c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008060:	b083      	sub	sp, #12
 8008062:	460d      	mov	r5, r1
 8008064:	da29      	bge.n	80080ba <__ieee754_log+0x6a>
 8008066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800806a:	4303      	orrs	r3, r0
 800806c:	ee10 2a10 	vmov	r2, s0
 8008070:	d10c      	bne.n	800808c <__ieee754_log+0x3c>
 8008072:	49cf      	ldr	r1, [pc, #828]	; (80083b0 <__ieee754_log+0x360>)
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	2000      	movs	r0, #0
 800807a:	f7f8 fbff 	bl	800087c <__aeabi_ddiv>
 800807e:	ec41 0b10 	vmov	d0, r0, r1
 8008082:	b003      	add	sp, #12
 8008084:	ecbd 8b04 	vpop	{d8-d9}
 8008088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808c:	2900      	cmp	r1, #0
 800808e:	da05      	bge.n	800809c <__ieee754_log+0x4c>
 8008090:	460b      	mov	r3, r1
 8008092:	f7f8 f911 	bl	80002b8 <__aeabi_dsub>
 8008096:	2200      	movs	r2, #0
 8008098:	2300      	movs	r3, #0
 800809a:	e7ee      	b.n	800807a <__ieee754_log+0x2a>
 800809c:	4bc5      	ldr	r3, [pc, #788]	; (80083b4 <__ieee754_log+0x364>)
 800809e:	2200      	movs	r2, #0
 80080a0:	f7f8 fac2 	bl	8000628 <__aeabi_dmul>
 80080a4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80080a8:	460d      	mov	r5, r1
 80080aa:	4ac3      	ldr	r2, [pc, #780]	; (80083b8 <__ieee754_log+0x368>)
 80080ac:	4295      	cmp	r5, r2
 80080ae:	dd06      	ble.n	80080be <__ieee754_log+0x6e>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	f7f8 f902 	bl	80002bc <__adddf3>
 80080b8:	e7e1      	b.n	800807e <__ieee754_log+0x2e>
 80080ba:	2300      	movs	r3, #0
 80080bc:	e7f5      	b.n	80080aa <__ieee754_log+0x5a>
 80080be:	152c      	asrs	r4, r5, #20
 80080c0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80080c4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80080c8:	441c      	add	r4, r3
 80080ca:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80080ce:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80080d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080d6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80080da:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80080de:	ea42 0105 	orr.w	r1, r2, r5
 80080e2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80080e6:	2200      	movs	r2, #0
 80080e8:	4bb4      	ldr	r3, [pc, #720]	; (80083bc <__ieee754_log+0x36c>)
 80080ea:	f7f8 f8e5 	bl	80002b8 <__aeabi_dsub>
 80080ee:	1cab      	adds	r3, r5, #2
 80080f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	4682      	mov	sl, r0
 80080f8:	468b      	mov	fp, r1
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	dc53      	bgt.n	80081a8 <__ieee754_log+0x158>
 8008100:	2300      	movs	r3, #0
 8008102:	f7f8 fcf9 	bl	8000af8 <__aeabi_dcmpeq>
 8008106:	b1d0      	cbz	r0, 800813e <__ieee754_log+0xee>
 8008108:	2c00      	cmp	r4, #0
 800810a:	f000 8122 	beq.w	8008352 <__ieee754_log+0x302>
 800810e:	4620      	mov	r0, r4
 8008110:	f7f8 fa20 	bl	8000554 <__aeabi_i2d>
 8008114:	a390      	add	r3, pc, #576	; (adr r3, 8008358 <__ieee754_log+0x308>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	4606      	mov	r6, r0
 800811c:	460f      	mov	r7, r1
 800811e:	f7f8 fa83 	bl	8000628 <__aeabi_dmul>
 8008122:	a38f      	add	r3, pc, #572	; (adr r3, 8008360 <__ieee754_log+0x310>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 fa7a 	bl	8000628 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	e7ba      	b.n	80080b4 <__ieee754_log+0x64>
 800813e:	a38a      	add	r3, pc, #552	; (adr r3, 8008368 <__ieee754_log+0x318>)
 8008140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008144:	4650      	mov	r0, sl
 8008146:	4659      	mov	r1, fp
 8008148:	f7f8 fa6e 	bl	8000628 <__aeabi_dmul>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	2000      	movs	r0, #0
 8008152:	499b      	ldr	r1, [pc, #620]	; (80083c0 <__ieee754_log+0x370>)
 8008154:	f7f8 f8b0 	bl	80002b8 <__aeabi_dsub>
 8008158:	4652      	mov	r2, sl
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	465b      	mov	r3, fp
 8008160:	4650      	mov	r0, sl
 8008162:	4659      	mov	r1, fp
 8008164:	f7f8 fa60 	bl	8000628 <__aeabi_dmul>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fa5a 	bl	8000628 <__aeabi_dmul>
 8008174:	4606      	mov	r6, r0
 8008176:	460f      	mov	r7, r1
 8008178:	b914      	cbnz	r4, 8008180 <__ieee754_log+0x130>
 800817a:	4632      	mov	r2, r6
 800817c:	463b      	mov	r3, r7
 800817e:	e0a2      	b.n	80082c6 <__ieee754_log+0x276>
 8008180:	4620      	mov	r0, r4
 8008182:	f7f8 f9e7 	bl	8000554 <__aeabi_i2d>
 8008186:	a374      	add	r3, pc, #464	; (adr r3, 8008358 <__ieee754_log+0x308>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	4680      	mov	r8, r0
 800818e:	4689      	mov	r9, r1
 8008190:	f7f8 fa4a 	bl	8000628 <__aeabi_dmul>
 8008194:	a372      	add	r3, pc, #456	; (adr r3, 8008360 <__ieee754_log+0x310>)
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	4604      	mov	r4, r0
 800819c:	460d      	mov	r5, r1
 800819e:	4640      	mov	r0, r8
 80081a0:	4649      	mov	r1, r9
 80081a2:	f7f8 fa41 	bl	8000628 <__aeabi_dmul>
 80081a6:	e0a7      	b.n	80082f8 <__ieee754_log+0x2a8>
 80081a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081ac:	f7f8 f886 	bl	80002bc <__adddf3>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4650      	mov	r0, sl
 80081b6:	4659      	mov	r1, fp
 80081b8:	f7f8 fb60 	bl	800087c <__aeabi_ddiv>
 80081bc:	ec41 0b18 	vmov	d8, r0, r1
 80081c0:	4620      	mov	r0, r4
 80081c2:	f7f8 f9c7 	bl	8000554 <__aeabi_i2d>
 80081c6:	ec53 2b18 	vmov	r2, r3, d8
 80081ca:	ec41 0b19 	vmov	d9, r0, r1
 80081ce:	ec51 0b18 	vmov	r0, r1, d8
 80081d2:	f7f8 fa29 	bl	8000628 <__aeabi_dmul>
 80081d6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80081da:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
 80081e8:	f7f8 fa1e 	bl	8000628 <__aeabi_dmul>
 80081ec:	a360      	add	r3, pc, #384	; (adr r3, 8008370 <__ieee754_log+0x320>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	4606      	mov	r6, r0
 80081f4:	460f      	mov	r7, r1
 80081f6:	f7f8 fa17 	bl	8000628 <__aeabi_dmul>
 80081fa:	a35f      	add	r3, pc, #380	; (adr r3, 8008378 <__ieee754_log+0x328>)
 80081fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008200:	f7f8 f85c 	bl	80002bc <__adddf3>
 8008204:	4632      	mov	r2, r6
 8008206:	463b      	mov	r3, r7
 8008208:	f7f8 fa0e 	bl	8000628 <__aeabi_dmul>
 800820c:	a35c      	add	r3, pc, #368	; (adr r3, 8008380 <__ieee754_log+0x330>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	f7f8 f853 	bl	80002bc <__adddf3>
 8008216:	4632      	mov	r2, r6
 8008218:	463b      	mov	r3, r7
 800821a:	f7f8 fa05 	bl	8000628 <__aeabi_dmul>
 800821e:	a35a      	add	r3, pc, #360	; (adr r3, 8008388 <__ieee754_log+0x338>)
 8008220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008224:	f7f8 f84a 	bl	80002bc <__adddf3>
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	f7f8 f9fc 	bl	8000628 <__aeabi_dmul>
 8008230:	a357      	add	r3, pc, #348	; (adr r3, 8008390 <__ieee754_log+0x340>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	4680      	mov	r8, r0
 8008238:	4689      	mov	r9, r1
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	f7f8 f9f3 	bl	8000628 <__aeabi_dmul>
 8008242:	a355      	add	r3, pc, #340	; (adr r3, 8008398 <__ieee754_log+0x348>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f838 	bl	80002bc <__adddf3>
 800824c:	4632      	mov	r2, r6
 800824e:	463b      	mov	r3, r7
 8008250:	f7f8 f9ea 	bl	8000628 <__aeabi_dmul>
 8008254:	a352      	add	r3, pc, #328	; (adr r3, 80083a0 <__ieee754_log+0x350>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f8 f82f 	bl	80002bc <__adddf3>
 800825e:	4632      	mov	r2, r6
 8008260:	463b      	mov	r3, r7
 8008262:	f7f8 f9e1 	bl	8000628 <__aeabi_dmul>
 8008266:	460b      	mov	r3, r1
 8008268:	4602      	mov	r2, r0
 800826a:	4649      	mov	r1, r9
 800826c:	4640      	mov	r0, r8
 800826e:	f7f8 f825 	bl	80002bc <__adddf3>
 8008272:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008276:	9b01      	ldr	r3, [sp, #4]
 8008278:	3551      	adds	r5, #81	; 0x51
 800827a:	431d      	orrs	r5, r3
 800827c:	2d00      	cmp	r5, #0
 800827e:	4680      	mov	r8, r0
 8008280:	4689      	mov	r9, r1
 8008282:	dd48      	ble.n	8008316 <__ieee754_log+0x2c6>
 8008284:	4b4e      	ldr	r3, [pc, #312]	; (80083c0 <__ieee754_log+0x370>)
 8008286:	2200      	movs	r2, #0
 8008288:	4650      	mov	r0, sl
 800828a:	4659      	mov	r1, fp
 800828c:	f7f8 f9cc 	bl	8000628 <__aeabi_dmul>
 8008290:	4652      	mov	r2, sl
 8008292:	465b      	mov	r3, fp
 8008294:	f7f8 f9c8 	bl	8000628 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4606      	mov	r6, r0
 800829e:	460f      	mov	r7, r1
 80082a0:	4640      	mov	r0, r8
 80082a2:	4649      	mov	r1, r9
 80082a4:	f7f8 f80a 	bl	80002bc <__adddf3>
 80082a8:	ec53 2b18 	vmov	r2, r3, d8
 80082ac:	f7f8 f9bc 	bl	8000628 <__aeabi_dmul>
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	b964      	cbnz	r4, 80082d0 <__ieee754_log+0x280>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4630      	mov	r0, r6
 80082bc:	4639      	mov	r1, r7
 80082be:	f7f7 fffb 	bl	80002b8 <__aeabi_dsub>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4650      	mov	r0, sl
 80082c8:	4659      	mov	r1, fp
 80082ca:	f7f7 fff5 	bl	80002b8 <__aeabi_dsub>
 80082ce:	e6d6      	b.n	800807e <__ieee754_log+0x2e>
 80082d0:	a321      	add	r3, pc, #132	; (adr r3, 8008358 <__ieee754_log+0x308>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	ec51 0b19 	vmov	r0, r1, d9
 80082da:	f7f8 f9a5 	bl	8000628 <__aeabi_dmul>
 80082de:	a320      	add	r3, pc, #128	; (adr r3, 8008360 <__ieee754_log+0x310>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	4604      	mov	r4, r0
 80082e6:	460d      	mov	r5, r1
 80082e8:	ec51 0b19 	vmov	r0, r1, d9
 80082ec:	f7f8 f99c 	bl	8000628 <__aeabi_dmul>
 80082f0:	4642      	mov	r2, r8
 80082f2:	464b      	mov	r3, r9
 80082f4:	f7f7 ffe2 	bl	80002bc <__adddf3>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f7 ffda 	bl	80002b8 <__aeabi_dsub>
 8008304:	4652      	mov	r2, sl
 8008306:	465b      	mov	r3, fp
 8008308:	f7f7 ffd6 	bl	80002b8 <__aeabi_dsub>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4620      	mov	r0, r4
 8008312:	4629      	mov	r1, r5
 8008314:	e7d9      	b.n	80082ca <__ieee754_log+0x27a>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f7 ffcb 	bl	80002b8 <__aeabi_dsub>
 8008322:	ec53 2b18 	vmov	r2, r3, d8
 8008326:	f7f8 f97f 	bl	8000628 <__aeabi_dmul>
 800832a:	4606      	mov	r6, r0
 800832c:	460f      	mov	r7, r1
 800832e:	2c00      	cmp	r4, #0
 8008330:	f43f af23 	beq.w	800817a <__ieee754_log+0x12a>
 8008334:	a308      	add	r3, pc, #32	; (adr r3, 8008358 <__ieee754_log+0x308>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	ec51 0b19 	vmov	r0, r1, d9
 800833e:	f7f8 f973 	bl	8000628 <__aeabi_dmul>
 8008342:	a307      	add	r3, pc, #28	; (adr r3, 8008360 <__ieee754_log+0x310>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	4604      	mov	r4, r0
 800834a:	460d      	mov	r5, r1
 800834c:	ec51 0b19 	vmov	r0, r1, d9
 8008350:	e727      	b.n	80081a2 <__ieee754_log+0x152>
 8008352:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80083a8 <__ieee754_log+0x358>
 8008356:	e694      	b.n	8008082 <__ieee754_log+0x32>
 8008358:	fee00000 	.word	0xfee00000
 800835c:	3fe62e42 	.word	0x3fe62e42
 8008360:	35793c76 	.word	0x35793c76
 8008364:	3dea39ef 	.word	0x3dea39ef
 8008368:	55555555 	.word	0x55555555
 800836c:	3fd55555 	.word	0x3fd55555
 8008370:	df3e5244 	.word	0xdf3e5244
 8008374:	3fc2f112 	.word	0x3fc2f112
 8008378:	96cb03de 	.word	0x96cb03de
 800837c:	3fc74664 	.word	0x3fc74664
 8008380:	94229359 	.word	0x94229359
 8008384:	3fd24924 	.word	0x3fd24924
 8008388:	55555593 	.word	0x55555593
 800838c:	3fe55555 	.word	0x3fe55555
 8008390:	d078c69f 	.word	0xd078c69f
 8008394:	3fc39a09 	.word	0x3fc39a09
 8008398:	1d8e78af 	.word	0x1d8e78af
 800839c:	3fcc71c5 	.word	0x3fcc71c5
 80083a0:	9997fa04 	.word	0x9997fa04
 80083a4:	3fd99999 	.word	0x3fd99999
	...
 80083b0:	c3500000 	.word	0xc3500000
 80083b4:	43500000 	.word	0x43500000
 80083b8:	7fefffff 	.word	0x7fefffff
 80083bc:	3ff00000 	.word	0x3ff00000
 80083c0:	3fe00000 	.word	0x3fe00000

080083c4 <_init>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr

080083d0 <_fini>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr
